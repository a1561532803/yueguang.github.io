<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在月光下滑坡-个人博客</title>
  
  <subtitle>在月光下滑坡</subtitle>
  <link href="https://a1561532803.github.io/yueguang.github.io/atom.xml" rel="self"/>
  
  <link href="https://a1561532803.github.io/yueguang.github.io/"/>
  <updated>2021-07-05T13:22:07.738Z</updated>
  <id>https://a1561532803.github.io/yueguang.github.io/</id>
  
  <author>
    <name>在月光下滑坡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker复习——简答题篇</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/57113.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/57113.html</id>
    <published>2021-07-05T13:06:05.000Z</published>
    <updated>2021-07-05T13:22:07.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker复习"><a href="#docker复习" class="headerlink" title="docker复习"></a>docker复习</h1><p>注：（）内容为可替换内容/详细补充</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h3><p>答：docker是一个容器平台，可以将开发的项目连同环境一起打包，上线部署。</p><h3 id="Docker与虚拟机的不同点在哪里？"><a href="#Docker与虚拟机的不同点在哪里？" class="headerlink" title="Docker与虚拟机的不同点在哪里？"></a>Docker与虚拟机的不同点在哪里？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705184026311.png" alt="image-20210705184026311"></p><p>答：</p><p>介绍：</p><p>​    docker是一个容器平台，将应用打包进docker后，启动的容器使用沙箱机制，相互隔离，互不影响。</p><p>​    虚拟机是运行在操作系统中的一个虚拟系统。</p><p><strong>区别：</strong></p><p>​    1.启动时间：容器时秒级启动，虚拟机是分钟级启动。</p><p>​    2.轻量级：容器一般是m级别的大小，虚拟机时g级别的大小。</p><p>​    3.性能：容器内部的系统仅支持系统的正常运行，虚拟机则需要一套完整的系统。</p><h3 id="Docker容器有几种状态，分别是什么？"><a href="#Docker容器有几种状态，分别是什么？" class="headerlink" title="Docker容器有几种状态，分别是什么？"></a>Docker容器有几种状态，分别是什么？</h3><p><strong>答：四种状态；运行，已暂停，重新启动，退出</strong></p><p><em>拓展：docker容器的生命周期？</em></p><p>​    <em>答：一个docker容器从产生到运行部署大致分为如下三个状态：Dockerfile、Image、Contaniner。</em></p><p>​    <em>即一个镜像文件从产生、运行到停止的过程。</em></p><h3 id="写出Dockerfile中最常见四条指令，并指明含义？"><a href="#写出Dockerfile中最常见四条指令，并指明含义？" class="headerlink" title="写出Dockerfile中最常见四条指令，并指明含义？"></a>写出Dockerfile中最常见四条指令，并指明含义？</h3><p> 答：</p><p>​    From 指定基础镜像</p><p>​    RUN 运行指定命令</p><p>​    CMD 容器启动时运行的命令</p><p>​    COPY 拷贝文件到镜像</p><p>​    ADD 同copy，但多了解压缩的功能</p><p>​    VOLUME 指定挂载点，容器和宿主机的目录</p><p>​    EVN 设定容器内环境变量</p><h3 id="Docker镜像特点是什么？如何自定义镜像？"><a href="#Docker镜像特点是什么？如何自定义镜像？" class="headerlink" title="Docker镜像特点是什么？如何自定义镜像？"></a>Docker镜像特点是什么？如何自定义镜像？</h3><p>答：（1）Docker镜像就<strong>是一个只读的模板</strong>，容器<strong>在启动的时</strong>候<strong>创建一层可写层</strong>作为<strong>最上层</strong></p><p>（2）方法一：使用<strong>DockerFile直接创建自定义镜像</strong>，基本步骤分别为：编写Dockerfile文件、docker build 生成镜像、docker run 创建容器运行。</p><p>方法二：使用IDEA创建自定义镜像</p><p><em>拓展：启动后，可通过日志查询命令查看是否已启动完毕且成功。</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker logs -f 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Docker-数据卷有什么作用？创建数据卷的命令是？"><a href="#Docker-数据卷有什么作用？创建数据卷的命令是？" class="headerlink" title="Docker 数据卷有什么作用？创建数据卷的命令是？"></a>Docker 数据卷有什么作用？创建数据卷的命令是？</h3><p> <strong>答：容器的持久化、容器间继承与共享数据。</strong></p><p><strong>命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细补充：</p><p>​    Docker数据卷作用（特点）：</p><pre><code>1. 数据卷可在容器之间共享或重用数据 2. 卷中的更改可以直接生效 3. 数据卷中的更改不会包含在镜像的更新中 4. 数据卷的生命周期一直持续到没有容器使用它为止</code></pre><p>创建数据卷的命令：</p><p>使用 -v 命令，也可以在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p><p>-v命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 带权限的-v命令： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>出于可移植和分享的考虑，<u>用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</u></p><p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p><p>使用file构建</p><p>重点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VOLUME<span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer"</span>,<span class="token string">"/dataVolumeContainer2"</span>,<span class="token string">"/dataVolumeContainer3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># volume test</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer1"</span>,<span class="token string">"/dataVolumeContainer2"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"finished,--------success1"</span>CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Docker仓库有哪些，它们的区别是什么？"><a href="#Docker仓库有哪些，它们的区别是什么？" class="headerlink" title="Docker仓库有哪些，它们的区别是什么？"></a>Docker仓库有哪些，它们的区别是什么？</h3><p> 答：分公有仓库与私有仓库</p><p>公有仓库：<strong>Docker Hub</strong>、时速云镜像仓库、网易云镜像服务、DaoCloud镜像市场、阿里云镜像库等</p><p> 私有仓库：用户自己在本地搭建私有Docker Register（最常用的就是registry、Harbor两种）</p><p>区别：公有仓库所有人都可以搜索和下载公共镜像，私有仓库只有私有用户才能查询和下载。</p><h3 id="什么是Docker-Swarm，其功能是什么？"><a href="#什么是Docker-Swarm，其功能是什么？" class="headerlink" title="什么是Docker Swarm，其功能是什么？"></a>什么是Docker Swarm，其功能是什么？</h3><p> 答：<strong>它是Docker的本机群集</strong>（Swarm 是目前 Docker 官方唯一指定（绑定）的集群管理工具）；<strong>它将Docker主机池转变为单个虚拟Docker主机</strong>（它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机），Docker Swarm<strong>提供标准的Docker API</strong>，使得容器可以组成跨主机的子网网络。</p><p><em>拓展：Docker三剑客</em></p><p><em>Docker Machine、Docker Compose、Docker Swarm 并称 Docker 三剑客。</em></p><h3 id="什么是Docker-Compose，使用的步骤是什么"><a href="#什么是Docker-Compose，使用的步骤是什么" class="headerlink" title="什么是Docker Compose，使用的步骤是什么?"></a>什么是Docker Compose，使用的步骤是什么?</h3><p> 答：（1）<strong>Docker Compose是一个用来定义和运行复杂应用的Docker工具。</strong></p><p>使用Docker Compose不再需要使用shell脚本来启动容器，而使用服务编排的方式来管理容器。</p><p><strong>Docker Compose核心是通过一个YAML文件来管理多个Docker容器</strong>，接着就可以从配置中创建并启动所有服务。</p><p> （2）①定义要创建的应用，②创建容器的Dockerfile文件，③定义docker-compose脚本（创建docker-compose.yml文件，并在里面定义服务），④使用Compose构建并运行应用程序，⑤编辑compose文件以添加文件绑定挂载，⑥使用更新的compose文件重新构建和运行应用程序。</p><p> 脚本文件示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  web:    build: <span class="token punctuation">..</span>/    ports:     - <span class="token string">"5000:5000"</span>    volumes:     - <span class="token punctuation">..</span>/src:/opt/src  redis:    image: <span class="token string">"redis:3.0.7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个compose文件就定义了两个服务，即定义了web和redis两个容器。 </p><p>再通过volumes（卷）将主机上的项目目录（../src）挂载到容器中的/opt/src目录下，允许您即时修改代码，而无需重新构建映像。</p><p>web容器： </p><ul><li>使用当前docker-compose.yml文件所在目录的上级目录（compose_test/Dockerfile）中的Dockerfile构建映像。 </li><li>将容器上的暴露端口5000映射到主机上的端口5000。 我们使用Flask Web服务器的默认端口5000。<br>redis容器： </li><li>redis服务使用从Docker Hub提取的官方redis镜像3.0.7版本。</li></ul><p>最后一步命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Registry服务端、客户端如何配置？"><a href="#Registry服务端、客户端如何配置？" class="headerlink" title="Registry服务端、客户端如何配置？"></a>Registry服务端、客户端如何配置？</h3><p> <em>本题答案参考自<a href="https://blog.51cto.com/u_14306186/2514802">https://blog.51cto.com/u_14306186/2514802</a></em></p><p>答：准备两台docker服务器，dockerA创建registry私有仓库，dockerB做测试的客户端。</p><p>tips：本题主要记配置文件的代码</p><p>即docker A：<code>ExecStart=/usr/bin/dockerd    --insecure-registry 服务器IP地址:5000端口号</code></p><p>docker B： <code>ExecStart=/usr/bin/dockerd --insecure-registry 客户端IP地址:5000端口号</code></p><p>注：客户端一定要和服务器仓库ip一致 不然无法识别和上传 至于5000端口 应为registry默认5000端口</p><p>详细步骤：</p><p>docker A:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker pull registry:2              //下载registry:2的镜像</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2</span>//创建一个registry容器来运行registry服务；//-p：端口映射（前面是宿主机端口：后面是容器暴露的端口）；//-v：挂载目录（前面是宿主机的目录：后面的是容器的目录）自动创建宿主机的目录；//--restart<span class="token operator">=</span>always：随docker服务的启动而启动！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203256085.png" alt="image-20210705203256085"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker tag  centos:7 192.168.45.129:5000/centos:7  </span>//更改镜像名称注：私有仓库镜像的命名规则：192.168.45.129:5000/XXX（宿主机的IP:5000端口/镜像名称）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203355817.png" alt="image-20210705203355817"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/docker.service   //修改docker主配置文件</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd    --insecure-registry <span class="token number">192.168</span>.45.129:5000  //修改原本的配置文件添加不安全的仓库（--insecure-registry），地址是宿主机的IP地址与5000端口<span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload </span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker             //重新启动docker服务</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker push  192.168.45.129:5000/centos:7</span>//将重命名后的镜像上传到registry私有仓库<span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/_catalog             //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"centos"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/centos/tags/list         //查看镜像的详细信息</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"centos"</span>,<span class="token string">"tags"</span>:<span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dockerB：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/docker.service </span>//修改docker的主配置文件 <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd --insecure-registry <span class="token number">192.168</span>.45.129:5000//添加内容与registry一致，指定registry私有仓库服务器的IP地址及端口<span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload </span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker            //重新启动docker服务</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/_catalog         //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"centos"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/centos/tags/list     //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"centos"</span>,<span class="token string">"tags"</span>:<span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># docker pull 192.168.45.129:5000/centos:7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203542638.png" alt="image-20210705203542638"></p><h3 id="集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？"><a href="#集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？" class="headerlink" title="集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？"></a>集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？</h3><p>答：（1）略</p><p>（2）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ntpstat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker复习&quot;&gt;&lt;a href=&quot;#docker复习&quot; class=&quot;headerlink&quot; title=&quot;docker复习&quot;&gt;&lt;/a&gt;docker复习&lt;/h1&gt;&lt;p&gt;注：（）内容为可替换内容/详细补充&lt;/p&gt;
&lt;h2 id=&quot;简答题&quot;&gt;&lt;a href=&quot;#简</summary>
      
    
    
    
    <category term="运维" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://a1561532803.github.io/yueguang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的个人博客</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/21396.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/21396.html</id>
    <published>2021-07-04T09:02:44.000Z</published>
    <updated>2021-07-05T08:09:53.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于内容"><a href="#关于内容" class="headerlink" title="关于内容"></a>关于内容</h1><p>以技术博客方向为主，记录自己踩过的坑，考前抱佛脚恶补的知识，分享前辈们的经验，收集到的资源，偶尔备份一些喜欢的句子、读书笔记、生活小技巧等等。</p><p>你可以将本站当做一个资源库来使用。</p><p>欢迎各位大佬们与我交换友链qwq。</p><h1 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h1><h2 id="博客搭建框架"><a href="#博客搭建框架" class="headerlink" title="博客搭建框架"></a>博客搭建框架</h2><p>hexo：</p><p>是一个基于nodejs 的静态博客网站生成器，作者是来自台湾的 Tommy Chen</p><p>安装简单快速、资源丰富，文档对中国朋友很友好，强推！</p><p>本站即是使用该框架搭建！<br><a href="https://hexo.io/zh-cn/">前往Hexo</a></p><p>Wordpress：</p><p>使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。</p><p>老牌建站系统，社区强大，对seo搜索引擎友好，适合DIY，静态化较差，使用的谷歌字体、头像经常被墙，访问加载速度慢，不能一键更新。</p><p><a href="https://wordpress.org/download/">前往Wordpress</a></p><p>Jekyll：</p><p>是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如discuz。<br><a href="http://jekyllcn.com/">前往Jekyll</a></p><p>Hugo：</p><p>Golang语言开发</p><p>特点：</p><p>1、完全跨平台支持，可以运行在 Mac OS X, Linux, Windows, 以及更多!</p><p>2、安装方便 Installation</p><p>3、本地调试 Usage 时通过 LiveReload 自动即时刷新页面。</p><p>4、完全的皮肤支持。</p><p>5、可以部署在任何的支持 HTTP 的服务器上。<br><a href="https://github.com/gohugoio/hugo/releases">前往Hugo</a></p><p>pelican：</p><p>是一个法国人用 python 写的用于生成静态页面的程序，支持：</p><p>1、博客文章和页面</p><p>2、使用外部服务 Disqus 实现的评论功能</p><p>3、支持主题</p><p>4、可对文章生成 PDF 文档</p><p>5、支持多语言发布文章</p><p>6、Atom/RSS feeds</p><p>7、代码着色</p><p>8、使用 LESS CSS (optional)</p><p>9、可导入 WordPress, Dotclear 或者 RSS feeds</p><p>10、集成外部功能 Twitter, Google Analytics, etc. (optional)<br><a href="https://github.com/getpelican/pelican">前往pelican</a></p><p>建站的框架很多，选择喜欢的风格即可。</p><h2 id="域名查询与购买"><a href="#域名查询与购买" class="headerlink" title="域名查询与购买"></a>域名查询与购买</h2><p>阿里云 万网：<a href="https://wanwang.aliyun.com/">前往查询</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于内容&quot;&gt;&lt;a href=&quot;#关于内容&quot; class=&quot;headerlink&quot; title=&quot;关于内容&quot;&gt;&lt;/a&gt;关于内容&lt;/h1&gt;&lt;p&gt;以技术博客方向为主，记录自己踩过的坑，考前抱佛脚恶补的知识，分享前辈们的经验，收集到的资源，偶尔备份一些喜欢的句子、读书笔记</summary>
      
    
    
    
    <category term="web开发" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="分享" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/16107.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/16107.html</id>
    <published>2021-07-03T22:38:43.208Z</published>
    <updated>2021-07-05T08:09:20.566Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="测试" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
