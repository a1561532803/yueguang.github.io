<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在月光下滑坡</title>
  
  <subtitle>在月光下滑坡</subtitle>
  <link href="https://a1561532803.github.io/yueguang.github.io/atom.xml" rel="self"/>
  
  <link href="https://a1561532803.github.io/yueguang.github.io/"/>
  <updated>2021-08-31T20:58:26.777Z</updated>
  <id>https://a1561532803.github.io/yueguang.github.io/</id>
  
  <author>
    <name>在月光下滑坡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS面试（1）——原型原型链</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/16191.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/16191.html</id>
    <published>2021-08-31T14:05:00.000Z</published>
    <updated>2021-08-31T20:58:26.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS面试——原型原型链"><a href="#JS面试——原型原型链" class="headerlink" title="JS面试——原型原型链"></a>JS面试——原型原型链</h1><h2 id="使用class实现继承"><a href="#使用class实现继承" class="headerlink" title="使用class实现继承"></a>使用class实现继承</h2><ul><li><p>基本代码<img src="https://api2.mubu.com/v3/document_image/6ebfa476-aa9a-4e5a-b7f9-76ed9e19b0ed-2637220.jpg" alt="img"></p></li><li><p><code>supper()</code>传值与继承<img src="https://api2.mubu.com/v3/document_image/be7fe330-ec1b-4fec-8e47-d3e27fd690d0-2637220.jpg" alt="img"></p></li><li><p>属性和方法都能继承</p></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li><p>隐式原型</p></li><li><p>这两个东西的属性完全相等<img src="https://api2.mubu.com/v3/document_image/52d9ae05-1db1-4dbc-978a-93e9dc9358c7-2637220.jpg" alt="img"></p></li><li><p>每个对象都有个原型，这个原型一般被称作隐式原型，这个隐式原型会指向构建出的实例的显示原型，当我们在一个对象上，尝试查找它的属性或方法的时候，找不到属性和方法，就会往它的隐式原型上去找</p><ul><li>student就是对象，_proto_是它的隐式原型<img src="https://api2.mubu.com/v3/document_image/ea583740-5f02-4117-94fd-a7ffd3282920-2637220.jpg" alt="img"></li></ul></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li><p>一张图总结<img src="https://api2.mubu.com/v3/document_image/3871c588-bdd4-4f4c-b6e9-bcf978bcdb70-2637220.jpg" alt="img"></p></li><li><p>当我们访问一个对象的属性或方法时，首先从自身的属性去找，如果找不到，就会往它的原型去找，如果从它的原型找还找不到，就会往它的原型的原型去找（套娃），就形成了原型链</p></li><li><p>如何检查一个属性和方法是否是自身所拥有的？</p><ul><li><p>通过hasOwnProperty方法</p><ul><li><code>hasOwnProperty()</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</li></ul></li><li><p>输入name，返回true，表示这个属性是teacher本身的属性或方法</p></li><li><p>输入teach，返回false，表示这个属性不是teacher对象本身的属性或方法，是原型上的属性和方法</p></li></ul></li><li><p>拓展</p><ul><li>object.prototype也是个对象，它的隐式原型是null，到它这里就到头了<img src="https://api2.mubu.com/v3/document_image/17609103-ec3e-49ba-b6a5-190ac6e527a5-2637220.jpg" alt="img"></li></ul></li></ul><h2 id="使用instanceof作类型判断"><a href="#使用instanceof作类型判断" class="headerlink" title="使用instanceof作类型判断"></a>使用instanceof作类型判断</h2><ul><li><p>不包含在原型链上就会false<img src="https://api2.mubu.com/v3/document_image/0dd8a5ea-2d3d-4acf-9327-e23f2128bbed-2637220.jpg" alt="img"></p></li><li><p>什么情况下，当拿一个变量instanceof一个类的时候，返回值什么时候为true？</p><ul><li>能在对象的原型上找到这个类的prototype，返回值为true。反之为false</li></ul></li></ul><blockquote><p>感谢B站up哈默聊前端</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS面试——原型原型链&quot;&gt;&lt;a href=&quot;#JS面试——原型原型链&quot; class=&quot;headerlink&quot; title=&quot;JS面试——原型原型链&quot;&gt;&lt;/a&gt;JS面试——原型原型链&lt;/h1&gt;&lt;h2 id=&quot;使用class实现继承&quot;&gt;&lt;a href=&quot;#使用clas</summary>
      
    
    
    
    <category term="前端" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="javaScript" scheme="https://a1561532803.github.io/yueguang.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学Unity——基本操作（2）</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/31551.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/31551.html</id>
    <published>2021-07-31T16:19:00.000Z</published>
    <updated>2021-08-01T11:48:29.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始学Unity（2）"><a href="#从零开始学Unity（2）" class="headerlink" title="从零开始学Unity（2）"></a>从零开始学Unity（2）</h1><h2 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h2><h3 id="1、游戏对象的基本操作"><a href="#1、游戏对象的基本操作" class="headerlink" title="1、游戏对象的基本操作"></a>1、游戏对象的基本操作</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801185247995.png" alt="image-20210801185247995"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801185339420.png" alt="image-20210801185339420"></p><h2 id="对象的显示顺序"><a href="#对象的显示顺序" class="headerlink" title="对象的显示顺序"></a>对象的显示顺序</h2><h3 id="1、控制对象的显示顺序"><a href="#1、控制对象的显示顺序" class="headerlink" title="1、控制对象的显示顺序"></a>1、控制对象的显示顺序</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801185551445.png" alt="image-20210801185551445"></p><p>示例：在Hierarchy中点选要修改的层级对象，然后在inspector中通过修改Order In Layer属性的值，控制显示顺序（<font color="green">值越大显示优先级越高</font>）</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801185748797.png" alt="image-20210801185748797"></p><p>示例2：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190234775.png" alt="image-20210801190234775"></p><h3 id="2、要点与细节"><a href="#2、要点与细节" class="headerlink" title="2、要点与细节"></a>2、要点与细节</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190316991.png" alt="image-20210801190316991"></p><h2 id="对象的轴心"><a href="#对象的轴心" class="headerlink" title="对象的轴心"></a>对象的轴心</h2><h3 id="1、轴心的作用"><a href="#1、轴心的作用" class="headerlink" title="1、轴心的作用"></a>1、轴心的作用</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190352632.png" alt="image-20210801190352632"></p><p>示例：</p><p>如，修改成90度时，小猪佩奇也绕着轴心转了90度。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190517903.png" alt="image-20210801190517903"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190456007.png" alt="image-20210801190456007"></p><h3 id="2、怎样修改轴心"><a href="#2、怎样修改轴心" class="headerlink" title="2、怎样修改轴心"></a>2、怎样修改轴心</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801190954826.png" alt="image-20210801190954826"></p><p>注意，要找到Sprite Editor界面，要点选<font color="blue">Project</font>界面中对应的图层，才能看到。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801191239770.png" alt="image-20210801191239770"></p><p>点开后就打开了一个编辑器，可以自己拖动轴心进行位置修改，也可以通过修改Pivot属性直接定位到不同的位置，点击右上角的Apply即可生效。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801191425739.png" alt="image-20210801191425739"></p><h2 id="对象的父子关系"><a href="#对象的父子关系" class="headerlink" title="对象的父子关系"></a>对象的父子关系</h2><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801191829892.png" alt="image-20210801191829892"></p><p>这里很简单，类似于PS的图层组，都在一个组里后，控制他们的父组就可以控制里面所有的子对象。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801192021350.png" alt="image-20210801192021350"></p><h3 id="2、注意"><a href="#2、注意" class="headerlink" title="2、注意"></a>2、注意</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801192117840.png" alt="image-20210801192117840"></p><p>父对象移动时，里面的子对象坐标不会发生变化。（相对坐标系）</p><p>父对象好比地球，地球移动，不代表里面的子对象也进行了移动。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801192340005.png" alt="image-20210801192340005"></p><h2 id="图片——图片的切割"><a href="#图片——图片的切割" class="headerlink" title="图片——图片的切割"></a>图片——图片的切割</h2><h3 id="1、图片素材从那里来？"><a href="#1、图片素材从那里来？" class="headerlink" title="1、图片素材从那里来？"></a>1、图片素材从那里来？</h3><p>在学习阶段，可以百度或者从一些资源网站获取</p><p>在正式工作时，会有专门的美术人员提供</p><h3 id="2、2D图片的要求"><a href="#2、2D图片的要求" class="headerlink" title="2、2D图片的要求"></a>2、2D图片的要求</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801192754062.png" alt="image-20210801192754062"></p><h3 id="3、为什么要切割图片？"><a href="#3、为什么要切割图片？" class="headerlink" title="3、为什么要切割图片？"></a>3、为什么要切割图片？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193030301.png" alt="image-20210801193030301"></p><h3 id="4、图片切割的方法"><a href="#4、图片切割的方法" class="headerlink" title="4、图片切割的方法"></a>4、图片切割的方法</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193119344.png" alt="image-20210801193119344"></p><p>点击slice会自动帮忙裁出对象<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193218081.png" alt="image-20210801193218081"></p><p>保存后返回应用，回到<font color="blue">Project</font>界面，点击箭头图标，会发现裁好的图片</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193323517.png" alt="image-20210801193323517"></p><h3 id="5、要点与细节"><a href="#5、要点与细节" class="headerlink" title="5、要点与细节"></a>5、要点与细节</h3><p>一个图片未经切割时，则只包含一个Sprite素材</p><h2 id="图片与渲染器"><a href="#图片与渲染器" class="headerlink" title="图片与渲染器"></a>图片与渲染器</h2><h3 id="1、两个术语"><a href="#1、两个术语" class="headerlink" title="1、两个术语"></a>1、两个术语</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193553870.png" alt="image-20210801193553870"></p><p>示例：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193744234.png" alt="image-20210801193744234"></p><p>这样图片一就修改成了图片二。</p><h3 id="2、操作详解"><a href="#2、操作详解" class="headerlink" title="2、操作详解"></a>2、操作详解</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193830545.png" alt="image-20210801193830545"></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="1、组件是什么？"><a href="#1、组件是什么？" class="headerlink" title="1、组件是什么？"></a>1、组件是什么？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801193941628.png" alt="image-20210801193941628"></p><h3 id="2、组件和对象的关系"><a href="#2、组件和对象的关系" class="headerlink" title="2、组件和对象的关系"></a>2、组件和对象的关系</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801194010872.png" alt="image-20210801194010872"></p><p>第一步在Hierarchy窗口进行，第二步是在inspector窗口进行</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801194204707.png" alt="image-20210801194204707"></p><h3 id="3、注意"><a href="#3、注意" class="headerlink" title="3、注意"></a>3、注意</h3><p>组件是可选的，可以添加，可以删除</p><h2 id="Transform组件"><a href="#Transform组件" class="headerlink" title="Transform组件"></a>Transform组件</h2><p>1、基本介绍</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801194524760.png" alt="image-20210801194524760"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801194553073.png" alt="image-20210801194553073"></p><p>每一个对象都有一个transform组件</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210801194707747.png" alt="image-20210801194707747"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从零开始学Unity（2）&quot;&gt;&lt;a href=&quot;#从零开始学Unity（2）&quot; class=&quot;headerlink&quot; title=&quot;从零开始学Unity（2）&quot;&gt;&lt;/a&gt;从零开始学Unity（2）&lt;/h1&gt;&lt;h2 id=&quot;游戏对象&quot;&gt;&lt;a href=&quot;#游戏对象&quot;</summary>
      
    
    
    
    <category term="Unity" scheme="https://a1561532803.github.io/yueguang.github.io/categories/Unity/"/>
    
    
    <category term="游戏" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="U3D" scheme="https://a1561532803.github.io/yueguang.github.io/tags/U3D/"/>
    
  </entry>
  
  <entry>
    <title>SVG图（1）</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/9321.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/9321.html</id>
    <published>2021-07-30T16:04:00.000Z</published>
    <updated>2021-07-31T18:54:54.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG图（1）"><a href="#SVG图（1）" class="headerlink" title="SVG图（1）"></a>SVG图（1）</h1><h2 id="SVG矢量图是什么"><a href="#SVG矢量图是什么" class="headerlink" title="SVG矢量图是什么"></a>SVG矢量图是什么</h2><p>是一个xml格式构成的图片，可以自己用path d代码画出来（AI软件设计出来），也可以直接引入。（img引入的是不能操作该矢量图形变化的）</p><p>iframe也可以加载svg图片，示例：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210728020451499.png" alt="image-20210728020451499"></p><p>object/embed也都可以加载svg图片，示例：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210728020615156.png" alt="image-20210728020615156"></p><p>能够拿到document就可以对这个图片进行操作。</p><h2 id="SVG语法"><a href="#SVG语法" class="headerlink" title="SVG语法"></a>SVG语法</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210728021132896.png" alt="image-20210728021132896"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SVG图（1）&quot;&gt;&lt;a href=&quot;#SVG图（1）&quot; class=&quot;headerlink&quot; title=&quot;SVG图（1）&quot;&gt;&lt;/a&gt;SVG图（1）&lt;/h1&gt;&lt;h2 id=&quot;SVG矢量图是什么&quot;&gt;&lt;a href=&quot;#SVG矢量图是什么&quot; class=&quot;header</summary>
      
    
    
    
    <category term="前端" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="待更" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E5%89%8D%E7%AB%AF/%E5%BE%85%E6%9B%B4/"/>
    
    
    <category term="svg" scheme="https://a1561532803.github.io/yueguang.github.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Vue-if实现tab标签更替</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/21173.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/21173.html</id>
    <published>2021-07-30T09:00:00.000Z</published>
    <updated>2021-07-31T18:11:45.975Z</updated>
    
    <content type="html"><![CDATA[<p>#Vue-if实现tab标签更替</p><h2 id="vue-if实现思路"><a href="#vue-if实现思路" class="headerlink" title="vue-if实现思路"></a>vue-if实现思路</h2><p>点击不同的导航切换不同页面的html代码，导航栏的样式没有放上来（这里我的class一些类名用的bootstrap的框架，i标签是我导航栏的图标）（to_active是写的选中时的导航栏样式），想要做到的效果是<strong>点击不同的导航栏即可将里面嵌入的内容更换为相对应的页面。</strong></p><p>设置一个变量，利用iframe嵌入界面，用v-if控制显示，然后点击相应标签时即可改变变量的值，变量的值对应控制显示不同的iframe标签。</p><p>html代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile-menu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible-lg visible-md mobile-nav visible-xs visible-sm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 1}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-my_icon iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 2}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(2)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-walletY iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>我的钱包<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 3}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(3)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-shimingrenzheng iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>实名认证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 4}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(4)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-zuji iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>我的足迹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 5}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(5)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-dingdan iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>我的订单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabPer<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{to_active:isShow === 6}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleTab(6)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-shangchuan2 iconfont<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>我要上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../personal/personal.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../wallet/wallet.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../personal/personal.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../history/history.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../personal/personal.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow === 6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../uploade/upload.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue代码"><a href="#Vue代码" class="headerlink" title="Vue代码"></a>Vue代码</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">var vm = new Vue({    el:'.main',        data(){            return{                isShow:1,            };        },        methods: {            handleTab(val){                this.isShow = val;            },                        },})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Vue-if实现tab标签更替&lt;/p&gt;
&lt;h2 id=&quot;vue-if实现思路&quot;&gt;&lt;a href=&quot;#vue-if实现思路&quot; class=&quot;headerlink&quot; title=&quot;vue-if实现思路&quot;&gt;&lt;/a&gt;vue-if实现思路&lt;/h2&gt;&lt;p&gt;点击不同的导航切换不同页面的</summary>
      
    
    
    
    <category term="web开发" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://a1561532803.github.io/yueguang.github.io/tags/Vue/"/>
    
    <category term="html" scheme="https://a1561532803.github.io/yueguang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>JS入门教程——DOM基础速成</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/12489.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/12489.html</id>
    <published>2021-07-25T16:04:00.000Z</published>
    <updated>2021-07-25T17:35:03.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS入门教程——DOM基础速成"><a href="#JS入门教程——DOM基础速成" class="headerlink" title="JS入门教程——DOM基础速成"></a>JS入门教程——DOM基础速成</h1><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>DOM即Document Object Model，也叫文档对象模型，是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="1、getElementsByTagName"><a href="#1、getElementsByTagName" class="headerlink" title="1、getElementsByTagName"></a>1、getElementsByTagName</h3><p>可以取到html的标签名，如、</p><li>等等<p></p><h3 id="2、getElementsByClassName"><a href="#2、getElementsByClassName" class="headerlink" title="2、getElementsByClassName"></a>2、getElementsByClassName</h3><p>示例html代码，这里给了li一个背景色的Css样式（图上没写）<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725203014894.png" alt="image-20210725203014894"></p><p>执行命令，效果，取到list的class</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725203154740.png" alt="image-20210725203154740"></p><p><code>getElementById</code>同理，只是取的类型变成了id类型。</p><h3 id="3、querySelector"><a href="#3、querySelector" class="headerlink" title="3、querySelector"></a><strong>3、querySelector</strong></h3><p>该命令使用较多，可以更准确的进行选择，<code>querySelector</code>为从上至下，取第一个需要的内容。</p><p>要取到所有的内容得输入<code>querySelectorAll</code>，示例1的html是第2条的html代码。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725203633282.png" alt="image-20210725203633282"></p><p>示例2，获取指定标签下的指定内容</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725204040053.png" alt="image-20210725204040053"></p><h3 id="4、控制命令做一些效果吧！"><a href="#4、控制命令做一些效果吧！" class="headerlink" title="4、控制命令做一些效果吧！"></a>4、控制命令做一些效果吧！</h3><p>示例：修改CSS颜色</p><p>先取到要控制的对象，然后再其后添加<code>.style.color=""</code></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725204504034.png" alt="image-20210725204504034"></p><p>在.style里面，几乎可以修改所有的样式。</p><p>可以去w3c的网站查看.style的所有属性。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210725204809455.png" alt="image-20210725204809455"></p><p>给按钮添加点击变色事件</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210726004713474.png" alt="image-20210726004713474"></p><p>addEventListener(事件名，当这个事件被触发时执行什么内容)</p></li>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS入门教程——DOM基础速成&quot;&gt;&lt;a href=&quot;#JS入门教程——DOM基础速成&quot; class=&quot;headerlink&quot; title=&quot;JS入门教程——DOM基础速成&quot;&gt;&lt;/a&gt;JS入门教程——DOM基础速成&lt;/h1&gt;&lt;h2 id=&quot;什么是DOM&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javaScript" scheme="https://a1561532803.github.io/yueguang.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学Unity——基本操作（1）</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/16191.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/16191.html</id>
    <published>2021-07-17T16:04:00.000Z</published>
    <updated>2021-07-17T20:29:19.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始学Unity（1）"><a href="#从零开始学Unity（1）" class="headerlink" title="从零开始学Unity（1）"></a>从零开始学Unity（1）</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>打开unity hub，项目栏里，右上角选择新建，创建一个2D项目，名字随便起。之后单机创建，创建过程会比较慢。<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717165420908.png" alt="image-20210717165420908"></p><p><strong>拓展：打开别人的项目</strong></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717165858226.png" alt="image-20210717165858226"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170024809.png" alt="image-20210717170024809"></p><p>选中要导入的项目即可，然后在项目列表里面双击该项目即可打开。</p><p><strong>移除项目：</strong></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170137422.png" alt="image-20210717170137422"></p><p>注：移除后项目还在，只是不显示在这个列表里。</p><p><em>批注：屏幕越大，cpu越快，效果越好。</em></p><h2 id="编辑器界面"><a href="#编辑器界面" class="headerlink" title="编辑器界面"></a>编辑器界面</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170409916.png" alt="image-20210717170409916"></p><p>注：我的界面自己做了修改，一般的位置不是这样。</p><p>想要恢复默认布局，可以单机顶部的window选项，选择layouts→Default</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170739604.png" alt="image-20210717170739604"></p><p>main Camera主摄像机，就是Scene界面的摄像机。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170550951.png" alt="image-20210717170550951"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>场景 <font color="cornflowerblue">Scene</font>，就是一个游戏里的场景/关卡</p><p>例子：小猪佩奇</p><p>场景1：家中</p><p>场景2：户外</p><p>显然，该游戏/动画中，至少有两个场景</p><h3 id="2、创建场景"><a href="#2、创建场景" class="headerlink" title="2、创建场景"></a>2、创建场景</h3><p>当创建项目时，默认地会创建一个场景<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171334133.png" alt="image-20210717171334133"></p><p>Assets 资产/资源，项目里的所有资源都放在Assets目录下面，在Scenes里面已经默认创建了一个场景。</p><p><strong>添加新场景：</strong></p><p>在project栏，Scenes目录下，单机右键，选择Create→Scene<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171657344.png" alt="image-20210717171657344"></p><p>如何删除？</p><p>右键要删除的场景，选择delete即可删除。</p><h2 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171912215.png" alt="image-20210717171912215"></p><p>演示：将准备好的图片文件添加到项目中</p><p>方法一：直接将图片拖到Assets目录下</p><p>方法二：</p><p>右键<font color="cornflowerblue">Show in Explorer</font>，观察素材文件（能直接打开素材锁在文件）</p><p>-素材文件会拷贝到<font color="cornflowerblue">Assets</font>目录下</p><p>-每一条素材/目录，对应一个<font color="cornflowerblue">*.meta</font>文件</p><p>注意：<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717173006415.png" alt="image-20210717173006415"></p><h2 id="场景视图"><a href="#场景视图" class="headerlink" title="场景视图"></a>场景视图</h2><h3 id="1、场景中的几个操作"><a href="#1、场景中的几个操作" class="headerlink" title="1、场景中的几个操作"></a>1、场景中的几个操作</h3><p>鼠标中键（滚轮）：放大/缩小视图</p><p>鼠标右键拖拽：平移视图</p><h3 id="2、一个网格对应多大？"><a href="#2、一个网格对应多大？" class="headerlink" title="2、一个网格对应多大？"></a>2、一个网格对应多大？</h3><p>（一般是由团队规定的），对应屏幕的话一般是100像素</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035056472.png" alt="image-20210718035056472"></p><p>只有白框里的才是玩家可见的范围（也就是Game窗口）</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035224243.png" alt="image-20210718035224243"></p><h2 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h2><h3 id="1、游戏对象是什么？"><a href="#1、游戏对象是什么？" class="headerlink" title="1、游戏对象是什么？"></a>1、游戏对象是什么？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035305748.png" alt="image-20210718035305748"></p><h3 id="2、移动视图与一些简单操作"><a href="#2、移动视图与一些简单操作" class="headerlink" title="2、移动视图与一些简单操作"></a>2、移动视图与一些简单操作</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040359253.png" alt="image-20210718040359253"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040427919.png" alt="image-20210718040427919"></p><p>拖动这个小方块可以随意移动元素位置。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040517593.png" alt="image-20210718040517593"></p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><h3 id="1、坐标单位"><a href="#1、坐标单位" class="headerlink" title="1、坐标单位"></a>1、坐标单位</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040756785.png" alt="image-20210718040756785"></p><h3 id="2、Z坐标"><a href="#2、Z坐标" class="headerlink" title="2、Z坐标"></a>2、Z坐标</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040837358.png" alt="image-20210718040837358"></p><p>单机此处，2D和3D是可以自由切换的。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040951516.png" alt="image-20210718040951516"></p><p>2D所有的对象都在一个平面进行，Z坐标也都是0。</p><p>3D视图导航器<font color="cornflowerblue">Gizmo</font>，较难操作，暂不介绍。</p><h2 id="游戏对象的操作"><a href="#游戏对象的操作" class="headerlink" title="游戏对象的操作"></a>游戏对象的操作</h2><h3 id="1、旋转效果"><a href="#1、旋转效果" class="headerlink" title="1、旋转效果"></a>1、旋转效果</h3><p>顶部导航的第三个工具键，修改该选项意为逆时针旋转90°。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041249150.png" alt="image-20210718041249150"></p><p>可以自己调，也可以在inspector自己设置（其他效果也可以这样设置）。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041436910.png" alt="image-20210718041436910"></p><h3 id="2、缩放效果"><a href="#2、缩放效果" class="headerlink" title="2、缩放效果"></a>2、缩放效果</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041510920.png" alt="image-20210718041510920"></p><h3 id="3、矩形工具"><a href="#3、矩形工具" class="headerlink" title="3、矩形工具"></a>3、矩形工具</h3><p>顶部导航的第五个工具。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041526857.png" alt="image-20210718041526857"></p><h3 id="4、要点与细节"><a href="#4、要点与细节" class="headerlink" title="4、要点与细节"></a>4、要点与细节</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041644409.png" alt="image-20210718041644409"></p><h2 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h2><h3 id="1、摄像机的参数"><a href="#1、摄像机的参数" class="headerlink" title="1、摄像机的参数"></a>1、摄像机的参数</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041948003.png" alt="image-20210718041948003"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042142690.png" alt="image-20210718042142690"></p><p>宽度是由具体的显示窗口决定的，常见的窗体比例为16:9。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042248909.png" alt="image-20210718042248909"></p><h3 id="2、要点与细节"><a href="#2、要点与细节" class="headerlink" title="2、要点与细节"></a>2、要点与细节</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042339409.png" alt="image-20210718042339409"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从零开始学Unity（1）&quot;&gt;&lt;a href=&quot;#从零开始学Unity（1）&quot; class=&quot;headerlink&quot; title=&quot;从零开始学Unity（1）&quot;&gt;&lt;/a&gt;从零开始学Unity（1）&lt;/h1&gt;&lt;h2 id=&quot;新建项目&quot;&gt;&lt;a href=&quot;#新建项目&quot;</summary>
      
    
    
    
    <category term="Unity" scheme="https://a1561532803.github.io/yueguang.github.io/categories/Unity/"/>
    
    
    <category term="游戏" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="U3D" scheme="https://a1561532803.github.io/yueguang.github.io/tags/U3D/"/>
    
  </entry>
  
  <entry>
    <title>游戏行业报告解析</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/21128.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/21128.html</id>
    <published>2021-07-13T13:00:05.000Z</published>
    <updated>2021-07-17T20:25:53.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏行业报告解析——U3D方向"><a href="#游戏行业报告解析——U3D方向" class="headerlink" title="游戏行业报告解析——U3D方向"></a>游戏行业报告解析——U3D方向</h1><blockquote><p>课程来自：vipskill</p></blockquote><h2 id="行业报告总结"><a href="#行业报告总结" class="headerlink" title="行业报告总结"></a>行业报告总结</h2><p>1、中国游戏全球化、工业化进程开始，未来几年会保持高速增长</p><p>2、自创IP越来越重要，同质化玩法单一的问题越来越明显，独立游戏会成为创意游戏很大的补充</p><p>3、RPG类可以在求职时加分</p><p>拓展：</p><p>VR可能是未来的大趋势，但现在受限严重。</p><h2 id="U3D工程师职业发展四象限"><a href="#U3D工程师职业发展四象限" class="headerlink" title="U3D工程师职业发展四象限"></a>U3D工程师职业发展四象限</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713205424056.png" alt="image-20210713205424056"></p><p>如：程序向转的TA就是高级开发阶段</p><p>主程往往对应其他项目岗位开发的部门经理，有些公司主程就是总监</p><h2 id="U3D工程师职级体系"><a href="#U3D工程师职级体系" class="headerlink" title="U3D工程师职级体系"></a>U3D工程师职级体系</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713205713924.png" alt="image-20210713205713924"></p><p><strong>实习阶段：</strong></p><p>实习经验可以提高毕业后的求职成功率。</p><p>游戏公司实习经历分享：看主程的UI框架文档，看了两个星期，之后独立完成一个功能模块。</p><p><strong>高级阶段：</strong></p><p>知道原理就够了，不要重复造轮子。</p><p>有些高级工程师的能力是高于主程的。</p><p><strong>主程：</strong></p><p>参与过很多项目的全流程开发。</p><p>有很强的管理能力。</p><p><strong>技术总监：</strong></p><p>一般懂游戏，但不</p><p>参与游戏开发，不需要写代码。</p><p>需要在技术、管理能力上都非常出众。</p><h2 id="U3D行业工资表（2018年-2019年）"><a href="#U3D行业工资表（2018年-2019年）" class="headerlink" title="U3D行业工资表（2018年-2019年）"></a>U3D行业工资表（2018年-2019年）</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713210812458.png" alt="image-20210713210812458"></p><p>除了初级和实习，其余阶段平均上涨30%。</p><p>游戏公司内的功能一般不是指单一功能，而是一整个体系。</p><p>不要抱着掌握所有东西的想法，至少在概念上面熟知即可。</p><p>对于U3D工程师来说，shader只是加分项目，不是必学的。</p><h2 id="U3D学习阶段"><a href="#U3D学习阶段" class="headerlink" title="U3D学习阶段"></a>U3D学习阶段</h2><p>p1阶段</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713211515174.png" alt="image-20210713211515174"></p><p>数学决定天花板 : (，计算机基础大厂考，中小厂不会问。</p><p>开发语言的Lua很重要，稍微有点规模的游戏公司都是用Lua。</p><p><strong>热更新</strong>：不停机更新（意为设备是烫的，没关机），在游戏里面指不需要去商店下载客户端。</p><p>一般是游戏资源更新（非代码以外的东西都叫游戏资源），本质上没有很难，不需要lua就能实现，技术点在于资源管理，难点在于逻辑更新。</p><p>C#和lua可以互相通信（互相调用对方的函数，主要是通过C#来调用）用C#当壳，去读Lua的string内容，市场上目前使用该方式解决热更新问题。</p><p>技能掌握（部分图）</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713213423873.png" alt="image-20210713213423873"></p><h2 id="实习、校招、社招"><a href="#实习、校招、社招" class="headerlink" title="实习、校招、社招"></a>实习、校招、社招</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713213515178.png" alt="image-20210713213515178"></p><p>校招：</p><p>算法熟练特指基础算法、尤其是排序部分。</p><p>其他方向的算法能听懂就行，如果让你手写二叉树，可能是不打算招你了。</p><p>如果作品选型是单机游戏，推荐选ARPG（动作角色扮演游戏），网络部分推荐选MMORPG（大型多人在线角色扮演游戏）</p><p>热更新部分在会写Lua就够了。</p><p>游戏行业的招聘门槛在上升，校招的价格会比较便宜。</p><p>竞争对手是和自己一样经验的人。</p><p>有没有商业项目在面试官眼里天壤之别。</p><p>实在没项目经验，可以去卡牌类的游戏公司过渡。</p><p>刚入行推荐先从UI开始。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;游戏行业报告解析——U3D方向&quot;&gt;&lt;a href=&quot;#游戏行业报告解析——U3D方向&quot; class=&quot;headerlink&quot; title=&quot;游戏行业报告解析——U3D方向&quot;&gt;&lt;/a&gt;游戏行业报告解析——U3D方向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;课程来自：</summary>
      
    
    
    
    <category term="行业分析" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%A1%8C%E4%B8%9A%E5%88%86%E6%9E%90/"/>
    
    <category term="Unity" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%A1%8C%E4%B8%9A%E5%88%86%E6%9E%90/Unity/"/>
    
    
    <category term="游戏" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="U3D" scheme="https://a1561532803.github.io/yueguang.github.io/tags/U3D/"/>
    
  </entry>
  
  <entry>
    <title>typora辅助工具——快捷标注颜色</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/7249.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/7249.html</id>
    <published>2021-07-10T09:30:05.000Z</published>
    <updated>2021-07-10T10:02:01.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typora辅助工具——快捷标注颜色，添加标签"><a href="#typora辅助工具——快捷标注颜色，添加标签" class="headerlink" title="typora辅助工具——快捷标注颜色，添加标签"></a>typora辅助工具——快捷标注颜色，添加标签</h1><blockquote><p>本文参考自leqaq</p><p>原文地址：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1447470&amp;ctid=2336">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1447470&amp;ctid=2336</a></p></blockquote><h2 id="安装AutoHotkey"><a href="#安装AutoHotkey" class="headerlink" title="安装AutoHotkey"></a>安装AutoHotkey</h2><p>Typora 是一款支持实时预览的 Markdown 文本编辑器，功能强大，页面美观，但在Typora中，想要加颜色或者加大某个字体很不方便，只能使用 HTML 标签去包裹内容再去写入css属性，这样就显得很麻烦。</p><p>比如我给一个字体增加颜色，得这样加上font标签才会生效</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210710174425002.png" alt="image-20210710174425002"></p><p><font color="red" font-size="30px">这是一个测试</font></p><p>↑这是刚才代码的效果</p><p>使用 font 标签要写没这么长一串，也太麻烦了，所以找了个简便办法，就是——<strong>AutoHotkey</strong></p><p>AutoHotkey是一款界面简洁的功能强大的热键脚本语言，可以将所有的键盘操作和鼠标操作自动化。</p><p>首先得去官网安装一下，安装包很小。</p><p>官网：<a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210710174624451.png" alt="image-20210710174624451"></p><p>下载好后进行安装，安装成功后就可以开始编写脚本了！</p><h2 id="编写ahk脚本"><a href="#编写ahk脚本" class="headerlink" title="编写ahk脚本"></a>编写ahk脚本</h2><p>新建一个 txt 文本文件，添加以下内容，之后将后缀修改为.ahk</p><pre class="line-numbers language-none"><code class="language-none">;热键标记; !感叹号代表Alt键; # 井号代表 Windows 键; ^ 上三角号代表 Ctrl键; + 加号代表 Shift 键; 执行; ::代表按下前面快捷键后会执行后面的命令。; Typora; 快捷增加字体颜色; SendInput {Text} 解决中文输入法问题#IfWinActive ahk_exe Typora.exe{    ; alt+0 红色    !0::addFontColor("black")    ; alt+1 红色    !1::addFontColor("red")    ; alt+1 橙色    !2::addFontColor("orange")      ; alt+3 浅蓝色    !3::addFontColor("cornflowerblue")     ; alt+4 绿色    !4::addFontColor("green")     ; alt+5 青色    !5::addFontColor("cyan")     ; alt+6 紫色    !6::addFontColor("purple")     ; alt+7 黄色    !7::addFontColor("yellow")    ; 增加 字体框    !f::addFont()    ;增加 div 标签    !d::addDiv()    ;增加 ` 号    !`::addPunctuation()}; 快捷增加字体颜色addFontColor(color){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;font color='%color%'&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        ; Typora 在这不会自动补充        SendInput {TEXT}&lt;/font&gt;         ; 清空剪切板        clipboard := ""     }else{        ; Typora中自动补全标签        SendInput {TEXT}&lt;/     }}; 添加 font 标签addFont(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;font style="color:;font-size:"&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        SendInput {TEXT}&lt;/font&gt; ; Typora 在这不会自动补充          clipboard := "" ; 清空剪切板    }else{        SendInput {TEXT}&lt;/ ; Typora中自动补全标签    } }    ; 添加 Div 标签addDiv(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;div style=""&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        SendInput {TEXT}&lt;/div&gt; ; Typora 在这不会自动补充          clipboard := "" ; 清空剪切板    }else{        SendInput {TEXT}&lt;/ ; Typora中自动补全标签    }}addPunctuation(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}``    SendInput {ctrl down}v{ctrl up} ; 粘贴    SendInput {TEXT}``}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述内容复制进去，可以自己进行修改，注释也很清除，有编程基础的可以自己进行修改。</p><p>保存之后可以直接选择.ahk文件，右键点击 <code>run script</code>，也可以使用 AutoHotkey 的 convert .ahk to .exe 将文件转为 exe 程序方便使用。</p><p>之后当typora运行时，右键选中需要标注颜色的内容</p><ul><li>按下 alt+数字键 0 - 7 可以添加颜色，具体颜色看注释</li><li><code>alt + d</code> 添加 div 标签，方便做内容居中 <div style=""></div></li><li><code>alt + f </code>添加 font 标签，方便自定义颜色和字体大小 <font style="color:;font-size:"></font></li><li><code>alt + </code> `给内容加上标记，也是加上一种颜色（对应格式→代码）</li></ul><p>使用快捷键的时候会有时有卡住输入不了内容的情况，可以使用 <code>alt + tab</code>切换一下界面就好了。</p><p>效果图：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/152835oj88ubunzv8jjubn.gif" alt="img"></p><h2 id="批注"><a href="#批注" class="headerlink" title="批注"></a>批注</h2><blockquote><p>AutoHotkey 是一个自由、开源的宏生成器和自动化软件工具，它让用户能够自动执行重复性任务。AutoHotkey 可以修改任何应用程序的用户界面（例如，把默认的 Windows 按键控制命令替换为 Emacs 风格）。它是由定制的脚本语言驱动，旨在提供键盘快捷键或热键。——wikipedia</p></blockquote><p>简单理解为一种自动化脚本语言，它可以帮助我们完成大量重复性的工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;typora辅助工具——快捷标注颜色，添加标签&quot;&gt;&lt;a href=&quot;#typora辅助工具——快捷标注颜色，添加标签&quot; class=&quot;headerlink&quot; title=&quot;typora辅助工具——快捷标注颜色，添加标签&quot;&gt;&lt;/a&gt;typora辅助工具——快捷标注颜</summary>
      
    
    
    
    <category term="Markdown" scheme="https://a1561532803.github.io/yueguang.github.io/categories/Markdown/"/>
    
    
    <category term="typora" scheme="https://a1561532803.github.io/yueguang.github.io/tags/typora/"/>
    
    <category term="AutoHotkey" scheme="https://a1561532803.github.io/yueguang.github.io/tags/AutoHotkey/"/>
    
  </entry>
  
  <entry>
    <title>爬虫——基础篇</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/13804.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/13804.html</id>
    <published>2021-07-10T09:20:05.000Z</published>
    <updated>2021-07-10T09:22:36.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：ZY.Zhang</p><p>本文档基于<a href="https://www.bilibili.com/video/BV1Yh411o7Sz?p=1">B站视频教程</a></p></blockquote><h1 id="一、爬虫基础简介"><a href="#一、爬虫基础简介" class="headerlink" title="一、爬虫基础简介"></a>一、爬虫基础简介</h1><h2 id="1-爬虫简介"><a href="#1-爬虫简介" class="headerlink" title="1. 爬虫简介"></a>1. 爬虫简介</h2><p><strong>什么是爬虫：</strong>通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。</p><h2 id="2-爬虫合法性探究"><a href="#2-爬虫合法性探究" class="headerlink" title="2. 爬虫合法性探究"></a>2. 爬虫合法性探究</h2><p><strong>爬虫究竟是合法还是违法的？</strong></p><ul><li>在法律中是不被禁止的</li><li>具有违法风险</li><li>善意爬虫 &amp; 恶意爬虫</li></ul><p><strong>爬虫带来的风险可以体现在如下两个方面：</strong></p><ol><li>爬虫干扰了被访问网站的正常运营</li><li>爬虫抓取了受到法律保护的特定类型的数据或信息</li></ol><p><strong>如何在编写使用的过程中避免进入局子的厄运？</strong></p><ul><li>时常优化自己的程序，避免干扰被访问网站的正常运行</li><li>在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私或者商业机密等敏感内容，需要及时停止爬取或者传播。</li></ul><h2 id="3-爬虫初试深入"><a href="#3-爬虫初试深入" class="headerlink" title="3. 爬虫初试深入"></a>3. 爬虫初试深入</h2><p><strong>爬虫在使用场景中的分类：</strong></p><ul><li><p><strong>通用爬虫：</strong>抓取系统的重要组成部分。抓取的是一整张页面数据。</p></li><li><p><strong>聚焦爬虫：</strong>是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p></li><li><p><strong>增量式爬虫：</strong>监测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</p></li></ul><p><strong>爬虫的矛与盾：</strong></p><ul><li><p><strong>反爬机制：</strong>门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p></li><li><p><strong>反反爬策略：</strong>爬虫程序，可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p></li></ul><p><strong>robots.txt协议：</strong>君子协议。规定了网站中那些数据可以被爬虫爬取，那些数据不允许被爬取。</p><p>例如：<a href="https://www.tabao.com/robots.txt">www.tabao.com/robots.txt</a></p><h2 id="4-http-amp-https协议"><a href="#4-http-amp-https协议" class="headerlink" title="4. http&amp;https协议"></a>4. http&amp;https协议</h2><h3 id="（1）http协议"><a href="#（1）http协议" class="headerlink" title="（1）http协议"></a>（1）http协议</h3><p><strong>概念：</strong>就是服务器和客户端进行数据交互的一种形式。</p><p><strong>常用请求头信息：</strong></p><ul><li><strong>User-Agent：</strong>请求载体的身份标识</li><li><strong>Connection：</strong>请求完毕后，是断开连接还是保持连接</li></ul><p><strong>常用响应头信息：</strong></p><ul><li><strong>Content-Type：</strong>服务器响应回客户端的数据类型</li></ul><h3 id="（2）https协议"><a href="#（2）https协议" class="headerlink" title="（2）https协议"></a>（2）https协议</h3><p><strong>概念：</strong>安全的超文本传输协议</p><h3 id="（3）加密方式"><a href="#（3）加密方式" class="headerlink" title="（3）加密方式"></a>（3）加密方式</h3><ul><li><p><strong>对称秘钥加密</strong></p><p>  <img src="../PythonProjects/Typora_image/image-20210224142616421.png" alt="image-20210224142616421"></p></li><li><p><strong>非对称秘钥加密</strong></p><p>  存在缺点：第一个是如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持，只要是发送秘钥，就有可能有被挟持的风险；第二个是非对称秘钥加密方式效率比较低，处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度。</p><p>  <img src="../PythonProjects/Typora_image/image-20210224142728145.png" alt="image-20210224142728145"></p></li><li><p><strong>证书秘钥加密：</strong></p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起；</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li></ul><p>  <img src="../PythonProjects/Typora_image/image-20210224143442798.png" alt="image-20210224143442798"></p></li></ul><hr><h1 id="二、requests模块基础"><a href="#二、requests模块基础" class="headerlink" title="二、requests模块基础"></a>二、requests模块基础</h1><h2 id="1-requests第一血"><a href="#1-requests第一血" class="headerlink" title="1. requests第一血"></a>1. requests第一血</h2><p><strong>requests模块：</strong>Python中原生的一款基于网络请求的模块，功能非常强大，简单便捷，效率极高。</p><p><strong>作用：</strong>模拟浏览器发请求。</p><p><strong>如何使用：（requests模块的编码流程）</strong></p><ul><li>指定 url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><p><strong>环境的安装：</strong><code>pip install requests</code></p><p><strong>实战编码：</strong></p><ul><li>需求：爬取搜狗首页的数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#step1 指定url</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/'</span>    <span class="token comment">#step2 发起请求</span>    <span class="token comment">#get方法会返回一个响应对象</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span>    <span class="token comment">#step3 获取响应数据，text返回的是字符串形式的响应数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token comment">#step4 持久化存储</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./sogou.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'爬取数据结束！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-requests巩固深入案例介绍"><a href="#2-requests巩固深入案例介绍" class="headerlink" title="2. requests巩固深入案例介绍"></a>2. requests巩固深入案例介绍</h2><h3 id="（1）简易网页采集器"><a href="#（1）简易网页采集器" class="headerlink" title="（1）简易网页采集器"></a>（1）简易网页采集器</h3><ul><li>UA检测</li><li>UA伪装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#UA：User-Agent请求载体的身份标识</span><span class="token triple-quoted-string string">'''UA检测：门户网站的服务器会监测对应请求的载体身份标识，如果检测到请求载体身份标识是某一款浏览器,说明该请求时一个正常的请求；但是，如果检测到请求的载体身份不是基于某一款浏览器的，则表示该请求为不正常请求（爬虫）,则服务器很有可能拒绝该次请求'''</span><span class="token comment">#UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器，躲过UA检测</span><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#UA伪装：将对应的User-Agent封装到一个字典中</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment">#step1 指定url query</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/web'</span>    <span class="token comment">#处理url携带的参数 封装到字典中</span>    kw <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Enter a word:'</span><span class="token punctuation">)</span>    param <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'query'</span><span class="token punctuation">:</span>kw    <span class="token punctuation">}</span>    <span class="token comment">#step2 对指定的url发起请求，对应的url是携带参数的，并且处理过程中处理了参数</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>params <span class="token operator">=</span> param<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    <span class="token comment">#step3</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment">#step4</span>    fileName <span class="token operator">=</span> kw <span class="token operator">+</span> <span class="token string">'.html'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'保存成功！！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）破解百度翻译"><a href="#（2）破解百度翻译" class="headerlink" title="（2）破解百度翻译"></a>（2）破解百度翻译</h3><ul><li>post请求（携带了参数）</li><li>响应数据是一组json数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#step1 指定URL</span>    post_url <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/sug'</span>        <span class="token comment">#step2 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>        <span class="token comment">#step3 post请求参数处理（同get请求类似）</span>    word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Enter a word:\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'kw'</span><span class="token punctuation">:</span>word    <span class="token punctuation">}</span>        <span class="token comment">#step4 请求发送</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> post_url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        <span class="token comment">#step5 获取响应数据:json()方法返回的是obj  (如果确认响应数据是json类型--&gt;通过Content-Type分辨，才可以直接用json方法)</span>    dict_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dict_obj<span class="token punctuation">)</span>        <span class="token comment">#step6 持久化存储</span>    fileName <span class="token operator">=</span> word <span class="token operator">+</span> <span class="token string">'.json'</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dict_obj<span class="token punctuation">,</span>fp <span class="token operator">=</span> fp<span class="token punctuation">,</span>ensure_ascii <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）豆瓣电影"><a href="#（3）豆瓣电影" class="headerlink" title="（3）豆瓣电影"></a>（3）豆瓣电影</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list'</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'24'</span><span class="token punctuation">,</span>        <span class="token string">'interval_id'</span><span class="token punctuation">:</span><span class="token string">'100:90'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'start'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment">#从库中的第几部电影去取</span>        <span class="token string">'limit'</span><span class="token punctuation">:</span><span class="token string">'20'</span><span class="token comment">#一次取出的个数</span>    <span class="token punctuation">}</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>params <span class="token operator">=</span> param<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    list_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./douban.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list_data<span class="token punctuation">,</span>fp <span class="token operator">=</span> fp<span class="token punctuation">,</span>ensure_ascii <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-作业—肯德基餐厅查询"><a href="#3-作业—肯德基餐厅查询" class="headerlink" title="3. 作业—肯德基餐厅查询"></a>3. 作业—肯德基餐厅查询</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    post_url <span class="token operator">=</span> <span class="token string">'https://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'</span>    keyword <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要查询的城市：'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'cname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'pid'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'keyword'</span><span class="token punctuation">:</span> keyword<span class="token punctuation">,</span>        <span class="token string">'pageindex'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'10'</span>    <span class="token punctuation">}</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> post_url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    <span class="token comment"># page_text = response.text</span>    <span class="token comment"># fileName = keyword + '.html'</span>    <span class="token comment"># with open(fileName, 'w', encoding= 'utf-8') as fp:</span>    <span class="token comment">#     fp.write(page_text)</span>    <span class="token comment"># print(fileName, 'Over!')</span>    <span class="token comment"># 直接打印出来</span>    page <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">dict</span> <span class="token keyword">in</span> page<span class="token punctuation">[</span><span class="token string">'Table1'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        StoreName <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'storeName'</span><span class="token punctuation">]</span>        address <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'addressDetail'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'StoreName:'</span> <span class="token operator">+</span> StoreName<span class="token punctuation">,</span> <span class="token string">'address:'</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-综合练习—药监总局"><a href="#4-综合练习—药监总局" class="headerlink" title="4. 综合练习—药监总局"></a>4. 综合练习—药监总局</h2><ul><li><p>爬取国家药品监督管理总局中<strong>基于中华人民共和国化妆品生产许可证相关数据</strong>（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89">http://scxk.nmpa.gov.cn:81/xk/）</a></p></li><li><p><strong>动态加载数据：</strong>首页中对应的企业信息是通过 <code>ajax</code> 动态请求到的</p></li><li><p>通过对详情页url的观察发现：</p><ul><li>url的域名都是一样的，只有携带的参数（id）不一样</li><li>id值可以从首页对应的 <code>ajax</code> 请求到的 <code>json</code> 串中获取</li><li>域名和id值拼接出一个完整的企业对应的详情页的url</li></ul></li><li><p><strong>详情页的企业详情数据也是动态加载出来的！！！</strong></p><ul><li>观察后发现，所有 <code>post</code> 请求的url都是一样的，只有参数id值不同</li><li>如果我们可以批量获取多家企业的id后，就可以就id和url形成一个完整的详情页对应详情数据的 <code>ajax</code> 请求的url</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储企业的id</span>    all_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储企业所有的详情数据</span>    <span class="token comment"># 批量获取不同企业的id值</span>    url <span class="token operator">=</span> <span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'</span>    <span class="token comment"># 参数的封装</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>            <span class="token string">'page'</span><span class="token punctuation">:</span> page<span class="token punctuation">,</span>            <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'15'</span><span class="token punctuation">,</span>            <span class="token string">'productName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'conditionType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            <span class="token string">'applyname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'applysn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    json_ids <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 从 json_ids 字典中拿到 list 对应的 value 值，对 value 值列表进行遍历</span>    <span class="token keyword">for</span> dic <span class="token keyword">in</span> json_ids<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># print(id_list,'\n')</span>    <span class="token comment"># 获取企业详情数据,也是动态加载出来的，携带一个参数 id，其值可以通过前一步生成的 id列表提取</span>    post_url <span class="token operator">=</span> <span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span>        <span class="token punctuation">}</span>        json_detail <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#print(json_detail, '-------------END----------')</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>json_detail <span class="token punctuation">)</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'---------------------------------------------------------'</span><span class="token punctuation">)</span>    <span class="token comment"># 持久化存储all_data_list</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./allData.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>all_data_list<span class="token punctuation">,</span> fp<span class="token operator">=</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># indent 自动排版</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="三、数据解析"><a href="#三、数据解析" class="headerlink" title="三、数据解析"></a>三、数据解析</h1><h2 id="1-数据解析概述"><a href="#1-数据解析概述" class="headerlink" title="1. 数据解析概述"></a>1. 数据解析概述</h2><ul><li><strong>聚焦爬虫：</strong>爬取页面中指定的页面内容。<ul><li>编码流程：1. 指定URL → 2. 发起请求 → 3. 获取响应数据 → 4. 数据解析 → 5. 持久化存储</li></ul></li><li><strong>数据解析分类：</strong><ul><li>正则表达式</li><li><code>bs4</code> 解析</li><li><code>xpath</code> 解析（重点）</li></ul></li><li><strong>数据解析原理概述：</strong>解析的局部的文本内容都会在标签对应的属性中进行存储。<ul><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据值进行提取（解析）</li></ul></li></ul><h2 id="2-图片数据爬取—正则表达式"><a href="#2-图片数据爬取—正则表达式" class="headerlink" title="2. 图片数据爬取—正则表达式"></a>2. 图片数据爬取—正则表达式</h2><table><thead><tr><th align="center"><strong>操作符</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>实例</strong></th></tr></thead><tbody><tr><td align="center"><strong>.</strong></td><td align="center">表示任意单个字符</td><td align="center"></td></tr><tr><td align="center"><strong>[ ]</strong></td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a,b,c,[a-z]表示a-z的</td></tr><tr><td align="center"><strong>[^ ]</strong></td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*****</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc* 表示ab、abc、abcc、abccc等</td></tr><tr><td align="center"><strong>+</strong></td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+ 表示abc、abcc、abccc等</td></tr><tr><td align="center"><strong>?</strong></td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc？ 表示ab、abc</td></tr><tr><td align="center"><strong>|</strong></td><td align="center">左右表达式任意一个</td><td align="center">abc|def 表示abc、def</td></tr></tbody></table><table><thead><tr><th align="center"><strong>{m}</strong></th><th align="center">扩展前一个字符m次</th><th align="center">ab{2}c表示abbc</th></tr></thead><tbody><tr><td align="center"><strong>{m,n}</strong></td><td align="center">扩展前一个字符m至n次（含n）</td><td align="center">ab{1，2}c表示abc、abbc</td></tr><tr><td align="center"><strong>^</strong></td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center"><strong>$</strong></td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center"><strong>( )</strong></td><td align="center">分组标记，内部只能使用|操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center"><strong>\d</strong></td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center"><strong>\w</strong></td><td align="center">单词字符，等价于[A-Za-z0-9_]</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>re.search()</strong></td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，<strong>返回match对象</strong></td></tr><tr><td align="center"><strong>re.match()</strong></td><td align="center">从字符串的开始位置起匹配正则表达式，<strong>返回match对象</strong></td></tr><tr><td align="center"><strong>re.findall()</strong></td><td align="center">搜搜字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center"><strong>re.split()</strong></td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，<strong>返回列表类型</strong></td></tr><tr><td align="center"><strong>re.finditer()</strong></td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，<strong>每个迭代元素是match对象</strong></td></tr><tr><td align="center"><strong>re.sub()</strong></td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><table><thead><tr><th align="center">修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">re.I</td><td align="center">使匹配对大小写不敏感</td></tr><tr><td align="center">re.L</td><td align="center">做本地化识别匹配</td></tr><tr><td align="center">re.M</td><td align="center">多行匹配，影响^和$</td></tr><tr><td align="center">re.S</td><td align="center">使.匹配包括换行在内的所有字符</td></tr><tr><td align="center">re.U</td><td align="center">根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</td></tr><tr><td align="center">re.X</td><td align="center">该标志通过给予你跟灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">常用的正则表达式单字符：.:除换行以外所有字符<span class="token code keyword">[ ]: [aoe]  [a-w] 匹配集合中任意一个字符</span><span class="token code keyword">\d:数字 [0-9]</span><span class="token code keyword">\D:非数字</span><span class="token code keyword">\w:数字、字母、下划线、中文</span><span class="token code keyword">\W:非\w</span><span class="token code keyword">\s :所有的空白字符包，包括空格、制表符、换页符等等，等价于[ \f \n \r \t \v ]</span><span class="token code keyword">\S:非空白</span>数量修饰： \*:任意多次&gt;=0<span class="token code keyword">\+:至少一次&gt;=1</span><span class="token code keyword">?:可有可无0次或者1次</span><span class="token code keyword">{m}:固定m次hello{3,}</span><span class="token code keyword">{m,}:至少m次</span><span class="token code keyword">{m,n}:m-n次</span>边界：\$:以某某结尾<span class="token code keyword">^:以某某开头</span>分组：(ab)贪婪模式：.\*非贪婪（惰性）模式：.\*?re.I:忽略大小写re.M:多行匹配re.S:单行匹配re.sub:正则表达式，替换内容，字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''正则练习'''</span><span class="token keyword">import</span> re<span class="token comment">#提取出python</span>key <span class="token operator">=</span> <span class="token string">"javapythonc++php"</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#提取出hello world</span>key <span class="token operator">=</span> <span class="token string">"&lt;html&gt;&lt;h1&gt;&lt;hello world&gt;&lt;h1&gt;&lt;/html&gt;"</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;h1&gt;(.*)&lt;h1&gt;'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#提取170</span>string <span class="token operator">=</span> '我喜欢身高为<span class="token number">170</span>的女孩’re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\d+'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token comment">#提取出http://和https://</span>key <span class="token operator">=</span> <span class="token string">'http://www.baidu.com and https://boob.com'</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'https?://'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#提取出hello</span>key <span class="token operator">=</span> <span class="token string">'lalala&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;hahah'</span> <span class="token comment">#输出&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;[Hh][Tt][mM][lL]&gt;(.*)&lt;/[Hh][Tt][mM][lL]&gt;'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#提取出hit.</span>key <span class="token operator">=</span> <span class="token string">'bobo@hit.edu.com'</span><span class="token comment">#想要匹配到hit</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'h.*?\.'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#匹配sas和saas</span>key <span class="token operator">=</span> <span class="token string">'sasa and sas and saaas'</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'sa{1,2}s'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#如何爬取图片</span>    url <span class="token operator">=</span> <span class="token string">'https://pic.qiushibaike.com/system/pictures/12409/124098453/medium/YNPHJQC101MS31E1.jpg'</span>    <span class="token comment">#content返回的是二进制形式的图片数据</span>    <span class="token comment">#text(字符串)  content(二进制)json(队形)</span>    img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiutu.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-正则解析案例"><a href="#3-正则解析案例" class="headerlink" title="3. 正则解析案例"></a>3. 正则解析案例</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需求：爬取糗事百科中糗图板块下所有的糗图图片</span><span class="token triple-quoted-string string">'''&lt;div class="thumb"&gt;&lt;a href="/article/124098472" target="_blank"&gt;&lt;img src="//pic.qiushibaike.com/system/pictures/12409/124098472/medium/HSN2WWN0TP1VUPNG.jpg" alt="糗事#124098472" class="illustration" width="100%" height="auto"&gt;&lt;/a&gt;&lt;/div&gt;'''</span><span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个文件夹，保存所有的图片</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://www.qiushibaike.com/imgrank/ '</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment">#print(page_text)</span>    <span class="token comment">#使用聚焦爬虫将页面中所有的糗图进行解析提取</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt=.*?&lt;/div&gt;'</span>    img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>img_src_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>        <span class="token comment">#拼接出完整的图片url</span>        src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src        img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token comment">#生成图片名称</span>        img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        imgPath <span class="token operator">=</span> <span class="token string">'./qiutuLibs/'</span> <span class="token operator">+</span> img_name        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'下载成功!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对上述代码进行进一步处理，使得能够分页爬取图片</span><span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个文件夹，保存所有的图片</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span>    <span class="token comment"># 设置一个通用的url模板</span>    url <span class="token operator">=</span> <span class="token string">'https://www.qiushibaike.com/imgrank/page/%d/'</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 对应页码的 url</span>        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pageNum<span class="token punctuation">)</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>        <span class="token punctuation">}</span>        <span class="token comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment">#print(page_text)</span>        <span class="token comment">#使用聚焦爬虫将页面中所有的糗图进行解析提取</span>        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt=.*?&lt;/div&gt;'</span>        img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_src_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>            <span class="token comment">#拼接出完整的图片url</span>            src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment">#生成图片名称</span>            img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            imgPath <span class="token operator">=</span> <span class="token string">'./qiutuLibs/'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'下载成功!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-bs4解析概述"><a href="#4-bs4解析概述" class="headerlink" title="4. bs4解析概述"></a>4. bs4解析概述</h2><ul><li><strong>数据解析的原理：</strong><ul><li><ol><li>标签定位</li><li>提取标签、标签属性中存储的数据值</li></ol></li></ul></li><li><strong>bs4数据解析的原理：</strong><ul><li><ol><li>实例化一个<code>BeautifulSoup</code>对象，并且将页面源码数据加载到该对象中</li><li>通过调用<code>BeautifulSoup</code>对象中相关的属性或者方法进行标签定位和数据提取</li></ol></li></ul></li><li><strong>环境安装：</strong><code>pip install bs4</code>         <code>pip  install  lxml</code></li></ul><h2 id="5-bs4-解析具体讲解"><a href="#5-bs4-解析具体讲解" class="headerlink" title="5. bs4 解析具体讲解"></a>5. bs4 解析具体讲解</h2><ul><li><strong>如何实例化 BeautifulSoup 对象：</strong></li><li>导包，<code>from bs4 import BeautifulSoup</code><ul><li>对象的实例化：<ul><li>（1）将本地的 html 文档中的数据加载到该对象中；</li><li>（2）将互联网上获取的页面源码加载到该对象中。</li></ul></li><li>提供的用于数据解析的方法和属性：<ul><li><code>soup.tagName</code>：返回的是文档中第一次出现的 <code>tagName</code> 标签；</li><li> <code>soup.find(tagName)</code>：可以等同于<code>soup.tagName</code>；也可以进行属性定位；</li><li><code>soup.find_all( )</code>：返回符合要求的所有标签；</li><li><code>select('某种选择器(id,class,标签...选择器)')</code>返回的是一个列表；层级选择器</li></ul></li><li>获取标签之间的文本数据：<code>soup.a.text/string/get_text( )</code><ul><li><code>text/get_text( )</code>：可以获取某一个标签中所有的文本内容</li><li><code>string</code>：只可以获取该标签下面直系的文本内容</li></ul></li><li><strong>获取标签中的属性值：</strong><code>soup.a['href']</code></li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>测试bs4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>百里守约<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>song<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>李清照<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>王安石<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>苏轼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>柳宗元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.song.com/<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>赵匡胤<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>this is span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>du<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>总为浮云能蔽日,长安不见使人愁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com/meinv.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tang<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qing<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>清明时节雨纷纷,路上行人欲断魂,借问酒家何处有,牧童遥指杏花村<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.163.com<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>秦时明月汉时关,万里长征人未还,但使龙城飞将在,不教胡马度阴山<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.126.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qi<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>岐王宅里寻常见,崔九堂前几度闻,正是江南好风景,落花时节又逢君<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.sina.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>du<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>杜甫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.dudu.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>du<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>杜牧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>杜小月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>度蜜月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.haha.com<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>feng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>凤凰台上凤凰游,凤去台空江自流,吴宫花草埋幽径,晋代衣冠成古丘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 将本地的html文档中的数据加载到该对象中</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./test.html'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># print(soup)</span>    <span class="token comment"># page_text = response.text</span>    <span class="token comment"># soup = BeautifulSoup(page_text,'lxml')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment"># soup.tagName 返回的是html中第一次出现的tagName标签</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># find(tagName) 等同于 soup.div</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'song'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 属性定位</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回符合要求的所有标签（列表）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回的是一个列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul &gt; li &gt; a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 层级选择器   &gt; 表示一个层级</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul  a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 空格表示多个层级</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul  a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul  a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul  a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang &gt; ul  a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-bs4-解析案例实战"><a href="#6-bs4-解析案例实战" class="headerlink" title="6. bs4 解析案例实战"></a>6. bs4 解析案例实战</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需求：爬取三国演义小说所有的章节标题和章节内容</span><span class="token comment"># https://www.shicimingju.com/book/sanguoyanyi.html</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#对首页的页面数据进行爬取</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://www.shicimingju.com/book/sanguoyanyi.html'</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment">#在首页中解析出章节的标题和详情页的url</span>    <span class="token comment">#实例化BeautifulSoup对象，需要将页面源码数据加载到该对象中</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># 解析章节标题和详情页的url</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.book-mulu &gt; ul &gt; li'</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./sanguo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        detail_url <span class="token operator">=</span><span class="token string">'http://www.shicimingju.com'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment">#对详情页发起请求，解析出章节内容</span>        detail_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> detail_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        detail_response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        detail_page_text <span class="token operator">=</span> detail_response<span class="token punctuation">.</span>text        <span class="token comment">#解析出详情页中相关的章节内容</span>        detail_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        div_tag <span class="token operator">=</span> detail_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">'chapter_content'</span><span class="token punctuation">)</span>        <span class="token comment">#解析到了章节的内容</span>        content <span class="token operator">=</span> div_tag<span class="token punctuation">.</span>text        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">'爬取成功！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-xpath解析基础"><a href="#7-xpath解析基础" class="headerlink" title="7. xpath解析基础"></a>7. xpath解析基础</h2><ul><li><strong>xpath解析：</strong>最常用且最便捷高效的一种解析方式。通用性。</li><li><strong>xpath解析原理：</strong><ul><li>（1）实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中；</li><li>（2）调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li></ul></li><li><strong>环境的安装：</strong><code>pip install lxml</code>       (lxml解析器)</li><li><strong>如何实例化一个etree对象：</strong><code>from lxml import etree</code><ul><li>（1）将本地的html文档中的源码数据加载到etree对象中：<code>etree.parse(filePath)</code></li><li>（2）可以将从互联网上获取的源码数据加载到该对象中：<code>etree.HTML('page_text')</code></li></ul></li><li><strong>xpath(‘xpath表达式’)：</strong><ul><li>其中 / 表示从根节点定位或者表示一个层级； </li><li>// 表示多个层级或者从任意位置开始定位；</li><li>属性定位：<code>tag[@attrName="attrValue"]</code>；</li><li>索引定位：<code>tag[@attrName="attrValue"]/p[3]</code>，注意索引从1开始</li><li>取文本：<code>/text( )</code>  ：获取的是标签中直系的文本内容；<code>//text( )</code>  ：标签中非直系的文本内容（所有的文本内容）</li><li>取属性：<code>/@attrName   ==&gt;  img/@src</code>   </li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment">#实例化好了一个etree对象，且将被解析的源码加载到了该对象中</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span>    <span class="token comment"># r = tree.xpath('/html/body/div')</span>    <span class="token comment"># r = tree.xpath('/html//div')</span>    <span class="token comment"># r = tree.xpath('//div')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]')</span>    <span class="token comment"># r = tree.xpath('//div[@class="tang"]//li[5]/a/text()')[0]</span>    <span class="token comment"># r = tree.xpath('//li[7]//text()')</span>    <span class="token comment"># r = tree.xpath('//div[@class="tang"]//text()')</span>    r <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="song"]/img/@src'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-xpath实战-58二手房"><a href="#8-xpath实战-58二手房" class="headerlink" title="8. xpath实战-58二手房"></a>8. xpath实战-58二手房</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#需求：爬取58二手房中的房源信息</span><span class="token comment">#作者提醒：此处代码与视频课中有差别，原因是视频课拍摄时的网页源码和作者实际学习时网页源码有变化，作者代码于2021/02/26运行正常。</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment">#爬取页面源码数据</span>    url <span class="token operator">=</span> <span class="token string">'https://bj.58.com/ershoufang/'</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment">#数据解析</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token comment">#存储的是标签对象</span>    div_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//section[@class="list"]/div'</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'58.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>        <span class="token comment">#页面数据的局部解析</span>        title <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/div[2]//h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------------Over!------------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-xpath解析案例"><a href="#9-xpath解析案例" class="headerlink" title="9. xpath解析案例"></a>9. xpath解析案例</h2><h3 id="（1）4k图片解析下载"><a href="#（1）4k图片解析下载" class="headerlink" title="（1）4k图片解析下载"></a>（1）4k图片解析下载</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#需求：解析下载图片数据 http://pic.netbian.com/4kmeinv/</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://pic.netbian.com/4kmeinv/'</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment"># 手动设定响应数据的编码格式</span>    <span class="token comment"># response.encoding = 'utf-8'</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment">#数据解析：src的属性值  alt属性</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="slist"]/ul/li'</span><span class="token punctuation">)</span>    <span class="token comment">#创建一个文件夹</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./picLibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./picLibs'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        img_src <span class="token operator">=</span> <span class="token string">'http://pic.netbian.com'</span><span class="token operator">+</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.jpg'</span>        <span class="token comment">#通用处理中文乱码的解决方案</span>        img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>        <span class="token comment"># print(img_name,img_src)</span>        <span class="token comment"># 请求图片进行持久化存储</span>        img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        img_path <span class="token operator">=</span> <span class="token string">'picLibs/'</span><span class="token operator">+</span>img_name        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'下载成功！！！'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------------OVER!---------------------------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）全国城市名称爬取"><a href="#（2）全国城市名称爬取" class="headerlink" title="（2）全国城市名称爬取"></a>（2）全国城市名称爬取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需求：解析出所有城市名称  https://www.aqistudy.cn/historydata/</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''headers = {    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'    }    url = 'https://www.aqistudy.cn/historydata/'    page_text = requests.get(url=url,headers=headers).text    tree = etree.HTML(page_text)    #数据解析    hot_li_list = tree.xpath('//div[@class="bottom"]/ul/li')    all_city_names = []    #解析热门城市名字    for li in hot_li_list:        hot_city_names = li.xpath('./a/text()')[0]        all_city_names.append(hot_city_names)    #解析全部城市名字：    city_names_list = tree.xpath('.//div[@class="bottom"]/ul/div[2]/li')    for li in city_names_list:        city_name = li.xpath('./a/text()')[0]        all_city_names.append(city_name)    print(all_city_names,len(all_city_names))'''</span>    <span class="token comment"># 第二种方法，一起解析</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://www.aqistudy.cn/historydata/'</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token comment"># 数据解析  解析到热门城市和全部城市对应的a标签</span>    <span class="token comment"># 热门城市标签层级div/ul/li/a</span>    <span class="token comment"># 全部城市标签层级div/ul/div[2]/li/a</span>    a_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="bottom"]/ul/li/a | //div[@class="bottom"]/ul/div[2]/li/a '</span><span class="token punctuation">)</span>    all_city_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>        a_name <span class="token operator">=</span> a<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        all_city_names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_names<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_city_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-xpath作业—爬取站长素材中免费简历模板"><a href="#10-xpath作业—爬取站长素材中免费简历模板" class="headerlink" title="10. xpath作业—爬取站长素材中免费简历模板"></a>10. xpath作业—爬取站长素材中免费简历模板</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取站长素材中免费的简历模板  https://sc.chinaz.com/jianli/free.html</span><span class="token comment"># 代码参考：https://blog.csdn.net/nanke_nk/article/details/108966854</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./jianli'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./jianli'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://sc.chinaz.com/jianli/free_%d.html'</span>    page <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'您一共想要爬取多少页：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pageNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">'https://sc.chinaz.com/jianli/free.html'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token operator">%</span>pageNum<span class="token punctuation">)</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> new_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        url_div_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="container"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> detail_url <span class="token keyword">in</span> url_div_list<span class="token punctuation">:</span>            detail_url <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> detail_url<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            detail_page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> detail_url<span class="token punctuation">,</span> headers <span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text            tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">)</span>            name <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            download_url <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="down"]/div[2]/ul/li[1]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            file_path <span class="token operator">=</span> <span class="token string">'jianli/'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'.rar'</span>            download_content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> download_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>download_content<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'下载完成'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------------------OVER!---------------------------------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="四、验证码"><a href="#四、验证码" class="headerlink" title="四、验证码"></a>四、验证码</h1><h2 id="1-验证码识别简介"><a href="#1-验证码识别简介" class="headerlink" title="1. 验证码识别简介"></a>1. 验证码识别简介</h2><p><strong>验证码和爬虫之间的爱恨情仇：</strong></p><ul><li>反爬机制：验证码。识别验证码图片中的数据，用于模拟登录操作。</li></ul><p><strong>识别验证码的操作：</strong></p><ul><li>人工肉眼识别（不推荐）</li><li>第三方自动识别（推荐）</li></ul><h2 id="2-云打码使用流程"><a href="#2-云打码使用流程" class="headerlink" title="2. 云打码使用流程"></a>2. 云打码使用流程</h2><!--作者学习期间，该平台已经挂掉，故而使用超级鹰进行代替。同类打码平台可以自行百度选择--><ul><li>注册：用户中心身份</li><li>登录：用户中心身份<ul><li>查询余额，题分是否足够（第一次使用，绑定微信即可免费获赠1000题分；非首次使用，建议小额充值，1元即可）</li><li>创建软件ID——用户中心左下角</li><li>下载示例代码 ——开发文档</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requests<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">class</span> <span class="token class-name">Chaojiying_Client</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> soft_id<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>username <span class="token operator">=</span> usernamepassword <span class="token operator">=</span>  password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>password <span class="token operator">=</span> md5<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>soft_id <span class="token operator">=</span> soft_idself<span class="token punctuation">.</span>base_params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span><span class="token string">'pass2'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>password<span class="token punctuation">,</span><span class="token string">'softid'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>soft_id<span class="token punctuation">,</span><span class="token punctuation">}</span>self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'Keep-Alive'</span><span class="token punctuation">,</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">PostPic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im<span class="token punctuation">,</span> codetype<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""im: 图片字节codetype: 题目类型 参考 http://www.chaojiying.com/price.html"""</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'codetype'</span><span class="token punctuation">:</span> codetype<span class="token punctuation">,</span><span class="token punctuation">}</span>params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'userfile'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'ccc.jpg'</span><span class="token punctuation">,</span> im<span class="token punctuation">)</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/Processing.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ReportError</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im_id<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""im_id:报错题目的图片ID"""</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> im_id<span class="token punctuation">,</span><span class="token punctuation">}</span>params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/ReportError.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tranformImgCode</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span>imgType<span class="token punctuation">)</span><span class="token punctuation">:</span>chaojiying <span class="token operator">=</span> Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'此处是账户'</span><span class="token punctuation">,</span> <span class="token string">'此处是密码'</span><span class="token punctuation">,</span> <span class="token string">'此处是软件ID'</span><span class="token punctuation">)</span><span class="token comment">#用户中心&gt;&gt;软件ID 生成一个替换 </span>im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span>imgType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span><span class="token comment">#1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 </span><span class="token keyword">print</span><span class="token punctuation">(</span>tranformImgCode<span class="token punctuation">(</span><span class="token string">'./a.jpg'</span><span class="token punctuation">,</span><span class="token number">1902</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-古诗文网验证码识别"><a href="#3-古诗文网验证码识别" class="headerlink" title="3. 古诗文网验证码识别"></a>3. 古诗文网验证码识别</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">####将本部分代码复制到上一节代码之后，因为要调用上述封装的tranformImgCode方法</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 识别验证码图下载</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'</span>page_text <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token comment"># 解析验证码图片的地址</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>img_src <span class="token operator">=</span> <span class="token string">'https://so.gushiwen.org'</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="imgCode"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 将验证码图片保存本地</span>img_data <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span><span class="token comment"># 识别验证码</span>code_text <span class="token operator">=</span> tranformImgCode<span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token number">1902</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>code_text<span class="token punctuation">)</span>login_url <span class="token operator">=</span> <span class="token string">'https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollect.aspx'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'__VIEWSTATE'</span><span class="token punctuation">:</span> <span class="token string">'f1ECt6+6MPtdTZMJtYOYS/7ww2d/DPy9t8JQcIt1QuOneLTbNQuYqPcCjZNbDAbfb9vj3k6f0M7EKTf0YqElM1k1A5ELwyTvUzBii+9LDRBbIMmc/jb0DJPsYfI='</span><span class="token punctuation">,</span><span class="token string">'__VIEWSTATEGENERATOR'</span><span class="token punctuation">:</span> <span class="token string">'C93BE1AE'</span><span class="token punctuation">,</span><span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'http://so.gushiwen.cn/user/collect.aspx'</span><span class="token punctuation">,</span><span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">'账号'</span><span class="token punctuation">,</span><span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">'密码'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">:</span> code_text<span class="token punctuation">,</span>  <span class="token comment"># 动态变化</span><span class="token string">'denglu'</span><span class="token punctuation">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># 对点击登录按钮发起请求</span>page_text_login <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./gushiwen.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text_login<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在请求参数中如果看到了一组乱序的请求参数，最好去验证这组请求参数是否为动态变化</p><ul><li>处理：<ul><li>方式1：常规来讲一般动态变化的请求参数会被隐藏在前台页面中，那么我们就要去前台页面源码中寻找；</li><li>方式2：如果前台页面没有的话，我们就可以基于抓包工具进行全局搜索。</li></ul></li></ul></li><li><p><strong>基于百度AI实现的爬虫给功能：</strong></p><ul><li>图像识别</li><li>语音识别&amp;合成</li><li>自然语言处理</li></ul></li><li><p><strong>使用流程：</strong></p><ul><li><p>点击控制台进行登录</p></li><li><p>选择想要实现的功能</p></li><li><p>实现功能下创建一个app</p></li><li><p>选择对应的 pythonSDK 文档进行代码实现</p><blockquote><p>需求：<a href="https://duanziwang.com/">https://duanziwang.com/</a></p><p>讲段子王中的段子内容爬取到本地，然后基于语音合成为mp3的音频文件，然后自己搭建一个web服务器，线上实时播放音频文件。</p></blockquote></li></ul></li></ul><hr><h1 id="五、requests模块高级"><a href="#五、requests模块高级" class="headerlink" title="五、requests模块高级"></a>五、requests模块高级</h1><h2 id="1-模拟登录实现流程梳理"><a href="#1-模拟登录实现流程梳理" class="headerlink" title="1. 模拟登录实现流程梳理"></a>1. 模拟登录实现流程梳理</h2><p><strong>模拟登录：</strong>爬取基于某些用户的用户信息。</p><p><strong>需求：</strong>对人人网进行模拟登录</p><ul><li>点击登录按钮后会发起一个post请求</li><li>post请求中会携带登陆之前录入的相关的登录信息（用户名、密码、验证码…….）</li><li>验证码：每次请求都会动态变化</li></ul><h2 id="2-人人网模拟登录"><a href="#2-人人网模拟登录" class="headerlink" title="2. 人人网模拟登录"></a>2. 人人网模拟登录</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1. 验证码的识别,获取验证码图片的文字数据</span><span class="token comment">#2. 对post请求进行发送</span><span class="token comment">#3. 对响应数据进行持久化存储</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreeheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/SysHome.do'</span>page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>texttree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>code_img_src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="verifyPic_login"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>code_img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> code_img_src<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>code_img_data<span class="token punctuation">)</span>    <span class="token comment">#下面需要使用打码平台提供的示例代码进行识别，云打码平台已挂</span><span class="token comment">######了解视频代码使用思路即可，可自行使用其他打码平台实现操作，</span><span class="token comment">#post请求发送</span>login_url <span class="token operator">=</span> <span class="token string">' '</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> login_url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>satus_code<span class="token punctuation">)</span><span class="token comment">#login_page_text = response.text</span><span class="token comment">#with open('renren.html','w',encoding = 'utf-8') #as fp:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>login_page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''视频UP主的源代码'''</span><span class="token comment">#编码流程：</span><span class="token comment">#1.验证码的识别，获取验证码图片的文字数据</span><span class="token comment">#2.对post请求进行发送（处理请求参数）</span><span class="token comment">#3.对响应数据进行持久化存储</span><span class="token keyword">from</span> CodeClass <span class="token keyword">import</span> YDMHttp<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment">#封装识别验证码图片的函数</span><span class="token keyword">def</span> <span class="token function">getCodeText</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span>codeType<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 普通用户用户名</span>    username <span class="token operator">=</span> <span class="token string">'bobo328410948'</span>    <span class="token comment"># 普通用户密码</span>    password <span class="token operator">=</span> <span class="token string">'bobo328410948'</span>    <span class="token comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span>    appid <span class="token operator">=</span> <span class="token number">6003</span>    <span class="token comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span>    appkey <span class="token operator">=</span> <span class="token string">'1f4b564483ae5c907a1d34f8e2f2776c'</span>    <span class="token comment"># 图片文件：即将被识别的验证码图片的路径</span>    filename <span class="token operator">=</span> imgPath    <span class="token comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span>    codetype <span class="token operator">=</span> codeType    <span class="token comment"># 超时时间，秒</span>    timeout <span class="token operator">=</span> <span class="token number">20</span>    result <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 检查</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请设置好相关参数再测试'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化</span>        yundama <span class="token operator">=</span> YDMHttp<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> appid<span class="token punctuation">,</span> appkey<span class="token punctuation">)</span>        <span class="token comment"># 登陆云打码</span>        uid <span class="token operator">=</span> yundama<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'uid: %s'</span> <span class="token operator">%</span> uid<span class="token punctuation">)</span>        <span class="token comment"># 查询余额</span>        balance <span class="token operator">=</span> yundama<span class="token punctuation">.</span>balance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'balance: %s'</span> <span class="token operator">%</span> balance<span class="token punctuation">)</span>        <span class="token comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span>        cid<span class="token punctuation">,</span> result <span class="token operator">=</span> yundama<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> codetype<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cid: %s, result: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cid<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment">#1.对验证码图片进行捕获和识别</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/SysHome.do'</span>page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>texttree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>code_img_src <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="verifyPic_login"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>code_img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>code_img_src<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>code_img_data<span class="token punctuation">)</span><span class="token comment">#使用云打码提供的示例代码对验证码图片进行识别</span>result <span class="token operator">=</span> getCodeText<span class="token punctuation">(</span><span class="token string">'code.jpg'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#post请求的发送（模拟登录）</span>login_url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=2019431046983'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">'www.zhangbowudi@qq.com'</span><span class="token punctuation">,</span>    <span class="token string">'icode'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span>    <span class="token string">'origURL'</span><span class="token punctuation">:</span> <span class="token string">'http://www.renren.com/home'</span><span class="token punctuation">,</span>    <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'renren.com'</span><span class="token punctuation">,</span>    <span class="token string">'key_id'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'captcha_type'</span><span class="token punctuation">:</span> <span class="token string">'web_login'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'06768edabba49f5f6b762240b311ae5bfa4bcce70627231dd1f08b9c7c6f4375'</span><span class="token punctuation">,</span>    <span class="token string">'rkey'</span><span class="token punctuation">:</span> <span class="token string">'1028219f2897941c98abdc0839a729df'</span><span class="token punctuation">,</span>    <span class="token string">'f'</span><span class="token punctuation">:</span><span class="token string">'https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3Dgds6TUs9Q1ojOatGda5mVsLKC34AYwc5XiN8OuImHRK%26wd%3D%26eqid%3D8e38ba9300429d7d000000035cedf53a'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># login_page_text = response.text</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># with open('renren.html','w',encoding='utf-8') as fp:</span><span class="token comment">#     fp.write(login_page_text)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-模拟登录cookie操作"><a href="#3-模拟登录cookie操作" class="headerlink" title="3. 模拟登录cookie操作"></a>3. 模拟登录cookie操作</h2><ul><li><p><strong>需求：</strong>爬取当前用户的相关用户信息（个人主页中显示的用户信息）</p></li><li><p><strong>http/https协议：</strong>无状态。</p><p>  没有请求到对应页面数据的原因：发起的第二次基于个人主页页面请求的时候，服务器并不知道该次请求是基于登录状态下的请求。</p></li><li><p><strong>cookie：</strong>用来让服务器端记录客户端的相关状态</p><ul><li><p>手动处理：抓包工具获取 <code>Cookie</code> 值，将值封装到 <code>headers</code> 中（不推荐）</p></li><li><p>自动处理：</p><p>  <code>Cookie</code> 值的来源是哪里？模拟登录 <code>post</code> 请求后，由服务器端创建的。</p><p>  <code>session</code>会话对象：1. 可以进行请求的发送；2. 如果请求过程中产生了Cookie，则该Cookie会被自动存储/携带在该session对象中。</p><p>  创建一个<strong>session</strong>对象：<code>session = requests.Session( )</code></p><p>  使用<strong>session</strong>对象进行模拟登录<code>post</code>请求的发送（Cookie会被存储在session中）</p><p>  <strong>session</strong>对象对个人主页对应的get请求进行发送（携带了Cookie）</p></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#####基于前一节代码之上####</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#爬取当前用户的相关用户信息</span><span class="token triple-quoted-string string">'''手动获取Cookie（不推荐） headers = {   ‘'Cookie':'xxxx'    }'''</span>detail_url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/976279344/profile'</span>detail_page_test <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> detail_url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bobo.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>detail_page_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-代理理论讲解"><a href="#4-代理理论讲解" class="headerlink" title="4. 代理理论讲解"></a>4. 代理理论讲解</h2><ul><li><strong>代理：</strong>破解封 IP 这种反爬机制。</li><li><strong>什么是代理？</strong>代理服务器。</li><li><strong>代理的作用：</strong><ul><li>突破自身 IP 被访问的限制</li><li>可以隐藏自身真实的 IP，免受攻击</li></ul></li><li><strong>相关网站：</strong><ul><li><a href="https://www.kuaidaili.com/">快代理</a></li><li>西祠代理</li><li><a href="http://www.goubanjia.com/">www.goubanjia.com</a></li></ul></li><li><strong>代理 ip 的类型：</strong><ul><li>http：只能应用到 http 协议对应的 url 中</li><li>https：只能应用到 https 协议对应的 url 中</li></ul></li><li><strong>代理ip的匿名度：</strong><ul><li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实 ip</li><li>匿名：知道使用了代理，不知道真实 ip</li><li>高匿：不知道使用了代理，也不知道真实 ip</li></ul></li></ul><h2 id="5-代理在爬虫中的应用"><a href="#5-代理在爬虫中的应用" class="headerlink" title="5. 代理在爬虫中的应用"></a>5. 代理在爬虫中的应用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd=ip'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">,</span> proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://124.205.155.153:9090"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ip.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="六、高性能异步爬虫"><a href="#六、高性能异步爬虫" class="headerlink" title="六、高性能异步爬虫"></a>六、高性能异步爬虫</h1><h2 id="1-异步爬虫概述"><a href="#1-异步爬虫概述" class="headerlink" title="1. 异步爬虫概述"></a>1. 异步爬虫概述</h2><ul><li><p><strong>同步：</strong>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。 例如购物系统中更新商品库存，需要用 “行锁” 作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。 简言之，同步意味着有序。</p></li><li><p><strong>异步：</strong>为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。 例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。 简言之，异步意味着无序。</p></li><li><p><strong>目的：</strong>在爬虫中使用异步实现高性能的数据爬取操作。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14667.rar'</span><span class="token punctuation">,</span>    <span class="token string">'https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14665.rar'</span><span class="token punctuation">,</span>    <span class="token string">'https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14648.rar'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在爬取：'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token comment"># get方法是一个阻塞的方法</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>content<span class="token keyword">def</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应数据的长度为：'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    content <span class="token operator">=</span> get_content<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    parse_content<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-多线程and多线程"><a href="#2-多线程and多线程" class="headerlink" title="2. 多线程and多线程"></a>2. 多线程and多线程</h2><p><strong>异步爬虫的方式：</strong></p><ul><li><strong>多线程，多进程：（不建议）</strong><ul><li>好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行</li><li>弊端：无法无限制的开启多线程或者多进程</li></ul></li></ul><h2 id="3-线程池and进程池"><a href="#3-线程池and进程池" class="headerlink" title="3. 线程池and进程池"></a>3. 线程池and进程池</h2><ul><li><strong>线程池、进程池：（适当使用）</strong><ul><li>好处：可以降低系统对进程或者线程创建和销毁的一个频率，从而很好地降低系统地开销。</li><li>弊端：池中线程或进程地数量是有上限的。</li></ul></li></ul><h2 id="4-线程池的基本使用"><a href="#4-线程池的基本使用" class="headerlink" title="4. 线程池的基本使用"></a>4. 线程池的基本使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment">#使用单线程串行方式执行</span><span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载：'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载成功：'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>    name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaozi'</span><span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    get_page<span class="token punctuation">(</span>name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d second'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>end_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入线程池模块对应的类</span><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token comment">#使用线程池方式执行</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载：'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载成功：'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaozi'</span><span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token comment">#实例化一个线程池对象</span>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment">#线程池开辟4个线程</span><span class="token comment">#将列表中每一个列表元素传递给get_page进行处理</span>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_page<span class="token punctuation">,</span> name_list<span class="token punctuation">)</span>end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-线程池案例应用"><a href="#5-线程池案例应用" class="headerlink" title="5. 线程池案例应用"></a>5. 线程池案例应用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需求：爬取梨视频视频数据</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> randomheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment"># 原则：线程池处理的是阻塞且耗时的操作</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 生成一个存放视频的文件夹</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./video'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./video'</span><span class="token punctuation">)</span>        <span class="token comment"># 对下述url发起请求解析出视频详情页的url和视频的名称</span>    url <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/category_5'</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储所有视频的链接和文字</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    detail_url <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.mp4'</span>    <span class="token comment"># print(detail_url,name)</span>    <span class="token comment"># 对详情页的url发起请求</span>    detail_page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 从详情页中解析出视频的地址</span>    <span class="token comment">#### 视频的方法在2021/02/27 不可使用，梨视频又更改了页面源码，mp4是动态加载出来的，mp4文件经ajax请求得到，需要抓包ajax</span>    <span class="token comment">#### 参考 https://www.cnblogs.com/qianhu/p/14027192.html的操作</span>    detail_tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">)</span>    name <span class="token operator">=</span> detail_tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="detailsbd"]/div[1]/div[2]/div/div[1]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    str_ <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ajax_url <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/videoStatus.jsp?'</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'contId'</span><span class="token punctuation">:</span> str_<span class="token punctuation">,</span>        <span class="token string">'mrd'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ajax_headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.pearvideo.com/video_'</span> <span class="token operator">+</span> str_    <span class="token punctuation">}</span>    dic_obj <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>ajax_url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>ajax_headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    video_url <span class="token operator">=</span> dic_obj<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>    video_true_url <span class="token operator">=</span> <span class="token string">''</span>    s_list <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>video_url<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            video_true_url <span class="token operator">+=</span> s_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'/'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ss_list <span class="token operator">=</span> s_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ss_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    video_true_url <span class="token operator">+=</span> <span class="token string">'cont-'</span> <span class="token operator">+</span> str_ <span class="token operator">+</span> <span class="token string">'-'</span>                <span class="token keyword">elif</span> j <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ss_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                    video_true_url <span class="token operator">+=</span> ss_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    video_true_url <span class="token operator">+=</span> ss_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'-'</span>    dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>        <span class="token string">'url'</span><span class="token punctuation">:</span> video_true_url    <span class="token punctuation">}</span>    urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_video_data</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>    urll <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>urll<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    path <span class="token operator">=</span> <span class="token string">'./video/'</span> <span class="token operator">+</span> dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.mp4'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'正在下载.......'</span><span class="token punctuation">)</span>    <span class="token comment"># 持久化存储操作</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">'.mp4'</span><span class="token punctuation">,</span> <span class="token string">'下载成功！'</span><span class="token punctuation">)</span><span class="token comment"># 使用线程池对视频数据进行请求（较为耗时的阻塞操作）</span>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_video_data<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-协程相关概念回顾"><a href="#6-协程相关概念回顾" class="headerlink" title="6. 协程相关概念回顾"></a>6. 协程相关概念回顾</h2><ul><li><p><strong>协程：</strong>英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程。 协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。 协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。 我们可以使用协程来实现异步操作，比如在网络爬虫场景下，我们发出一个请求之后，需要等待一定的时间才能得到响应，但其实在这个等待过程中，程序可以干许多其他的事情，等到响应得到之后才切换回来继续处理，这样可以充分利用 CPU 和其他资源，这就是异步协程的优势。</p></li><li><p><strong>单线程+异步协程：（推荐）</strong></p><ul><li><code>event_loop：</code>事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。</li><li><code>coroutine：</code>协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用，我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即执行，而是返回一个协程对象。</li><li><code>task：</code>任务，他是对协程对象的进一步封装，包含了任务的各个状态。</li><li><code>future：</code>代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</li><li><code>async：</code>定义一个协程。</li><li><code>await：</code>用来挂起阻塞方法的执行。</li></ul></li></ul><h2 id="7-协程相关操作回顾"><a href="#7-协程相关操作回顾" class="headerlink" title="7. 协程相关操作回顾"></a>7. 协程相关操作回顾</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在请求的url是'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求成功,'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token comment">#asyncio修饰的函数，调用之后返回的一个协程对象</span>c <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># #创建一个事件循环对象</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment">#</span><span class="token comment"># #将协程对象注册到loop中，然后启动loop</span><span class="token comment"># loop.run_until_complete(c)</span><span class="token comment"># #task的使用</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># #基于loop创建一个task任务对象</span><span class="token comment"># task = loop.create_task(c)</span><span class="token comment"># print(task)</span><span class="token comment">#</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token comment"># #future的使用</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># task = asyncio.ensure_future(c)</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token keyword">def</span> <span class="token function">callback_func</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#result返回的就是任务对象中封装的协程对象对应函数的返回值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#绑定回调</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">#将回调函数绑定到任务对象中</span>task<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback_func<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-多任务异步协程实现"><a href="#8-多任务异步协程实现" class="headerlink" title="8. 多任务异步协程实现"></a>8. 多任务异步协程实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment">#在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步</span>    <span class="token comment">#time.sleep(2)</span>    <span class="token comment">#当asyncio中遇到阻塞操作，必须手动挂起</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完毕'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>urls <span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.sougou.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.goubanjia.com'</span><span class="token punctuation">]</span><span class="token comment">#任务列表：存放多个任务对象</span>stasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    stasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#需要将任务列表封装到wait中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>stasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-aiohttp-模块引出"><a href="#9-aiohttp-模块引出" class="headerlink" title="9. aiohttp 模块引出"></a>9. aiohttp 模块引出</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">######未能实现异步进程，还是同步操作</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://127.0.0.1:1080/bobo'</span><span class="token punctuation">,</span>    <span class="token string">'http://127.0.0.1:1080/jay'</span><span class="token punctuation">,</span>    <span class="token string">'http://127.0.0.1:1080/tom'</span><span class="token punctuation">]</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token comment">#requests模块发起的请求是基于同步的，不能在异步模块中使用，否则会中断异步操作，必须使用基于异步的网络请求模块进行url的请求发送</span>    <span class="token comment">#aiphttp模块引入</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完毕'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> get_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总耗时：'</span><span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-aiohttp-多任务异步协程实现异步爬虫"><a href="#10-aiohttp-多任务异步协程实现异步爬虫" class="headerlink" title="10. aiohttp + 多任务异步协程实现异步爬虫"></a>10. aiohttp + 多任务异步协程实现异步爬虫</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#环境的安装    pip install aiohttp</span><span class="token comment">#使用aiohttp模块中的ClientSession</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">import</span> aiohttpstart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.sougou.com'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.taobao.com'</span><span class="token punctuation">]</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token comment">#get()、post():</span>        <span class="token comment">#headers,params/data,proxy='http://ip:port'</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            <span class="token comment">#text()返回的是字符串形式的响应数据</span>            <span class="token comment">#read()返回的是二进制形式的响应数据</span>            <span class="token comment">#json()返回的是json对象</span>            <span class="token comment">#注意：在获取响应数据操作之前，一定要使用await手动挂起</span>            page_text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#print(page_text)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> get_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总耗时：'</span><span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="七、动态加载数据处理"><a href="#七、动态加载数据处理" class="headerlink" title="七、动态加载数据处理"></a>七、动态加载数据处理</h1><h2 id="1-selenium简介"><a href="#1-selenium简介" class="headerlink" title="1. selenium简介"></a>1. selenium简介</h2><ul><li><p><strong>问题：</strong><code>selenium</code>模块和爬虫之间具有怎样的关联？</p><ul><li>便捷地获取网站中动态加载的数据</li></ul></li><li><p>便捷实现模拟登录</p></li><li><p><strong>什么是<code>selenium</code>模块？</strong></p><p>  基于浏览器自动化的一个模块。</p></li></ul><h2 id="2-selenium初试"><a href="#2-selenium初试" class="headerlink" title="2. selenium初试"></a>2. selenium初试</h2><p><strong>selenium使用流程：</strong></p><ul><li>环境安装：<code>pip install selenium</code></li><li>下载一个对应浏览器的驱动程序（以谷歌浏览器为例）<ul><li>下载路径：<a href="http://npm.taobao.org/mirrors/chromedriver/%E6%88%96%E8%80%85http://chromedriver.storage.googleapis.com/index.html">http://npm.taobao.org/mirrors/chromedriver/或者http://chromedriver.storage.googleapis.com/index.html</a></li><li>驱动程序和浏览器的映射关系：<a href="http://blog.csdn.net/huilan_same/article/details/51896672">http://blog.csdn.net/huilan_same/article/details/51896672</a></li><li>实例化一个浏览器对象</li><li>编写基于浏览器自动化的操作代码<ul><li>发起请求：<code>get(url)</code></li><li>标签定位：<code>find系列方法</code></li><li>标签交互：<code>send_keys('xxxxxx')</code></li><li>执行js程序：<code>excute_script('jsCode')</code></li><li>前进、后退：<code>forward( )、back( )</code></li><li>关闭浏览器：<code>quit( )</code></li></ul></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># selenium操纵浏览器</span><span class="token comment">#### Tip：作者Chrome是88版本，直接下载88的chromedriver成功运行</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化一个浏览器对象（传入浏览器的驱动程序）</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">)</span><span class="token comment"># 让浏览器发起一个指定的url对应请求</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/'</span><span class="token punctuation">)</span>     <span class="token comment"># 获取浏览器当前页面的页面源码数据</span>page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source<span class="token comment"># 解析企业名称</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="gzlist"]/li'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./dl/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-selenium其他自动化操作"><a href="#3-selenium其他自动化操作" class="headerlink" title="3. selenium其他自动化操作"></a>3. selenium其他自动化操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span><span class="token comment"># 标签定位</span>search_input <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token comment"># 标签的交互</span>search_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iphone'</span><span class="token punctuation">)</span><span class="token comment"># 执行一组js程序   相当于F12--Console执行js代码</span>bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 点击搜索按钮</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'.btn-search'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com/'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 回退</span>bro<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 前进</span>bro<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-iframe-处理-动作链"><a href="#4-iframe-处理-动作链" class="headerlink" title="4. iframe 处理+动作链"></a>4. iframe 处理+动作链</h2><p><code>**selenium</code>处理<code>iframe</code>：**</p><ul><li>如果定位的标签存在于iframe标签之中，则必须使用<code>switch_to.frame(id)</code></li><li>动作链（拖动）：<code>from selenium.webdriver import ActionChains</code><ul><li>实例化一个动作链对象：<code>action = ActionChains(bro)</code></li><li><code>click_and_hold(div)</code>：长按且点击</li><li><code>move_by_offset(x,y)</code></li><li><code>perform( )</code>：让动作链立即执行</li><li><code>action.release( )</code>：释放动作链对象</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 导入动作链对应的类</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/try.php?filename=jqueryui-example-droppable'</span><span class="token punctuation">)</span><span class="token comment"># 如果定位的标签是存在与iframe标签之中的，直接通过find方式会报错，则必须通过另外的操作来进行标签定位</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span>     <span class="token comment">#切换浏览器标签定位的作用域</span>div <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'draggable'</span><span class="token punctuation">)</span><span class="token comment"># 动作链</span>action <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span>      <span class="token comment">#实例化动作链对象</span><span class="token comment"># 点击并且长按指定的标签</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#perform 表示立即执行动作链操作</span>    <span class="token comment">#move_by_offset(x,y)   x表示水平方向，y表示竖直方向</span>    action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># 释放动作链</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-selenium模拟登录QQ空间"><a href="#5-selenium模拟登录QQ空间" class="headerlink" title="5. selenium模拟登录QQ空间"></a>5. selenium模拟登录QQ空间</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#模拟登录QQ空间，运行前需要将代码中“QQ号码”和“QQ密码”改写</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://qzone.qq.com/'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'login_frame'</span><span class="token punctuation">)</span>a_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'switcher_plogin'</span><span class="token punctuation">)</span>a_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>userName_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">)</span>password_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>userName_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'QQ号码'</span><span class="token punctuation">)</span>password_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'QQ密码'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'login_button'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-无头浏览器-规避操作"><a href="#6-无头浏览器-规避操作" class="headerlink" title="6. 无头浏览器+规避操作"></a>6. 无头浏览器+规避操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment">#实现无可视化界面</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token comment">#实现规避检测</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token comment">#实现无可视化界面的操作</span>chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span><span class="token comment">#实现规避检测</span>option <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#如何实现让selenium规避被检测到的风险</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">,</span> chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">,</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span><span class="token comment">#无可视化界面（无头浏览器） phantomJs</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-超级鹰的基本使用"><a href="#7-超级鹰的基本使用" class="headerlink" title="7. 超级鹰的基本使用"></a>7. 超级鹰的基本使用</h2><p><strong>超级鹰：</strong><a href="https://www.chaojiying.com/about.html">https://www.chaojiying.com/about.html</a></p><ul><li>注册：普通用户</li><li>登录：普通用户</li><li>题分查询：充值</li><li>软件ID——创建一个软件ID</li><li>下载示例代码</li></ul><h2 id="8-12306模拟登录"><a href="#8-12306模拟登录" class="headerlink" title="8. 12306模拟登录"></a>8. 12306模拟登录</h2><p><strong>编码流程：</strong></p><ul><li>使用<code>selenium</code>打开登录界面</li><li>对当前<code>selenium</code>打开的这张界面进行截图</li><li>对截取的图片进行局部区域（验证码图片）的裁剪<ul><li>好处：将验证码图片和模拟登录进行一一对应</li></ul></li><li>使用超级鹰识别验证码图片（坐标）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token comment">########下述为超级鹰示例代码</span><span class="token keyword">class</span> <span class="token class-name">Chaojiying_Client</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> soft_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        password <span class="token operator">=</span>  password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> md5<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>soft_id <span class="token operator">=</span> soft_id        self<span class="token punctuation">.</span>base_params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'user'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>            <span class="token string">'pass2'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>password<span class="token punctuation">,</span>            <span class="token string">'softid'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>soft_id<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'Keep-Alive'</span><span class="token punctuation">,</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">PostPic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im<span class="token punctuation">,</span> codetype<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        im: 图片字节        codetype: 题目类型 参考 http://www.chaojiying.com/price.html        """</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'codetype'</span><span class="token punctuation">:</span> codetype<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'userfile'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'ccc.jpg'</span><span class="token punctuation">,</span> im<span class="token punctuation">)</span><span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/Processing.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">ReportError</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        im_id:报错题目的图片ID        """</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> im_id<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/ReportError.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">############上述为超级鹰的示例代码</span><span class="token comment"># 使用selenium打开登录页面</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver.exe'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">"Page.addScriptToEvaluateOnNewDocument"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">"source"</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""    Object.defineProperty(navigator, 'webdriver', {      get: () =&gt; undefined    })  """</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># bro.execute_script(script)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://kyfw.12306.cn/otn/resources/login.html'</span><span class="token punctuation">)</span><span class="token comment">#最大化浏览器窗口</span>bro<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 先点击选择  账号登录</span>zhanghao_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'login-hd-account'</span><span class="token punctuation">)</span>zhanghao_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># save_screenshot就是将当前页面进行截图且保存</span>bro<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'aa.png'</span><span class="token punctuation">)</span><span class="token comment">#确定验证码图片对应的左上角和右下角的坐标（裁剪的区域就确定）</span>code_img_ele <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'touclick-wrapper'</span><span class="token punctuation">)</span>location <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>location  <span class="token comment"># 验证码图片左上角的坐标 x,y</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'location:'</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>size <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>size  <span class="token comment">#验证码标签对应的长和宽</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token comment"># 左上角和右下角坐标  #此处 *1.25 原因是作者window电脑默认显示布局为125%（电脑设置--显示--缩放与布局），不乘1.25取不到图片正确位置</span>rangle <span class="token operator">=</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token operator">+</span>size<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token operator">+</span>size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token comment"># 至此验证码图片区域就确定下来了</span>i <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./aa.png'</span><span class="token punctuation">)</span>code_img_name <span class="token operator">=</span> <span class="token string">'./code.png'</span><span class="token comment"># crop根据指定区域进行图片裁剪</span>frame <span class="token operator">=</span> i<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>frame<span class="token punctuation">.</span>save<span class="token punctuation">(</span>code_img_name<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 将验证码图片提交给超级鹰进行识别</span>chaojiying <span class="token operator">=</span> Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'超级🦅账号'</span><span class="token punctuation">,</span> <span class="token string">'超级🦅密码'</span><span class="token punctuation">,</span> <span class="token string">'软件ID'</span><span class="token punctuation">)</span>im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">9004</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">9004</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span>all_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment">#要存储即将被点击的点的坐标  [[x1,y1],[x2,y2]]</span><span class="token keyword">if</span> <span class="token string">'|'</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>    list_1 <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    count_1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count_1<span class="token punctuation">)</span><span class="token punctuation">:</span>        xy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        all_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    xy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    xy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    all_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xy_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_list<span class="token punctuation">)</span><span class="token comment"># 遍历列表，使用动作链对每一个列表元素对应的x,y指定的位置进行点击操作</span><span class="token keyword">for</span> l <span class="token keyword">in</span> all_list<span class="token punctuation">:</span>    x <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    y <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment">#这里的/1.25，是因为，电脑设置125%，而网页是100%的，所以，要确定网页中对应位置，除以1.25即可</span>    ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element_with_offset<span class="token punctuation">(</span>code_img_ele<span class="token punctuation">,</span> x<span class="token operator">/</span><span class="token number">1.25</span><span class="token punctuation">,</span> y<span class="token operator">/</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-userName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'12306账号'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'12306密码'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J-login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># # 滑块操作，12306检测selenium,,,,滑块总是刷新重试，</span><span class="token comment"># action = ActionChains(bro)</span><span class="token comment"># try:</span><span class="token comment">#     slider = bro.find_element_by_css_selector('#nc_1_n1z')</span><span class="token comment">#     action.click_and_hold(slider)</span><span class="token comment">#     action.move_by_offset(300, 0).perform()</span><span class="token comment">#     time.sleep(15)</span><span class="token comment">#     action.release()</span><span class="token comment"># except Exception as e:</span><span class="token comment">#     print(e)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="八、scrapy框架"><a href="#八、scrapy框架" class="headerlink" title="八、scrapy框架"></a>八、scrapy框架</h1><h2 id="1-scrapy框架初识"><a href="#1-scrapy框架初识" class="headerlink" title="1. scrapy框架初识"></a>1. scrapy框架初识</h2><ul><li><p><strong>什么是框架？</strong></p><p>  就是一个集成了很多功能并且具有很强通用性的一个项目模板。</p></li><li><p><strong>如何学习框架？</strong></p><p>  专门学习框架封装的各种功能的详细用法。</p></li><li><p><strong>什么是<code>scrapy</code>？</strong></p><p>  爬虫中封装好的一个明星框架。</p><p>  <strong>功能：</strong>高性能的持久化存储，异步的数据下载，高性能的数据解析，分布式</p></li></ul><h2 id="2-scrapy基本使用"><a href="#2-scrapy基本使用" class="headerlink" title="2. scrapy基本使用"></a>2. scrapy基本使用</h2><p><strong>scrapy框架的基本使用：</strong></p><ul><li>环境的安装：<ul><li>mac or linux：<code>pip install scrapy</code></li><li>windows:<ul><li><code>pip install wheel</code></li><li>下载twisted，下载地址：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a></li><li>安装twisted：<code>pip install Twisted-20.3.0-cp39-cp39-win_amd64.whl</code></li><li><code>pip install pywin32</code></li><li><code>pip install scrapy</code></li><li>测试：在终端里录入scrapy指令，没有报错即表示安装成功！</li></ul></li></ul></li><li>创建一个工程：<code>scrapy startproject xxxPro</code></li><li><code>cd xxxPro</code></li><li>在spiders子目录中创建一个爬虫文件<ul><li><code>scrapy genspider spiderName www.xxx.com</code></li></ul></li><li>执行工程：<ul><li><code>scrapy crawl spiderName</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">###firstBlood__first</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">FirstSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#爬虫文件的名称：就是爬虫源文件的一个唯一标识</span>    name <span class="token operator">=</span> <span class="token string">'first'</span>    <span class="token comment">#允许的域名：用来限定start_urls列表中哪些url可以进行请求发送</span>    <span class="token comment"># allowed_domains = ['www.baidu.com']</span>    <span class="token comment">#起始的url列表：该列表中存放的url会被scrapy自动进行请求的发送</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span> <span class="token string">'https://www.sogou.com/'</span><span class="token punctuation">]</span>    <span class="token comment">#用作于数据解析：response参数表示的就是请求成功后对应的响应对象</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-scrapy数据解析操作"><a href="#3-scrapy数据解析操作" class="headerlink" title="3. scrapy数据解析操作"></a>3. scrapy数据解析操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiubaiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'qiubai'</span>    <span class="token comment">#allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#解析作者的名称+段子的内容</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="col1 old-style-col1"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment">#xpath返回的是列表，当时列表元素一定是Selector类型的对象</span>            <span class="token comment">#extract可以将Selector对象中data参数存储的字符串提取出来</span>            author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#列表调用了extract之后。则表示将列表中每一个Selector对象中data对应的字符串提取了出来</span>            content <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span>content<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-基于终端指令的持久化存储"><a href="#4-基于终端指令的持久化存储" class="headerlink" title="4. 基于终端指令的持久化存储"></a>4. 基于终端指令的持久化存储</h2><p><strong>scrapy持久化存储：</strong></p><ul><li>基于终端指令：<ul><li>要求：只可以将parse方法的返回值存储到本地的文本文件中</li><li>注意：持久化存储对应的文本文件类型只可以为：json、jsonlines、jl、csv、xml、marshal、pickle</li><li>指令：<code>scrapy crawl xxx -o filePath</code></li><li>好处：简洁高效便捷</li><li>缺点：局限性比较强（数据只可以存储到指定后缀的文本文件中）</li></ul></li></ul><h2 id="5-基于管道持久化存储操作"><a href="#5-基于管道持久化存储操作" class="headerlink" title="5. 基于管道持久化存储操作"></a>5. 基于管道持久化存储操作</h2><p>基于管道：</p><ul><li>编码流程：<ul><li>数据解析</li><li>在item类中定义相关的属性</li><li>将解析的数据封装到item类型的对象</li><li>将item类型的对象提交给管道进行持久化存储的操作</li><li>在管道类的process_item中要将其接收到的item对象中存储的数据进行持久化存储操作</li><li>在配置文件中开启管道</li></ul></li><li>好处：<ul><li>通用性强。</li></ul></li></ul><p><strong>面试题：将爬取到的数据一份存储到本地，一份存储到数据库，如何实现？</strong></p><ul><li>管道文件中一个管道类对应的是将数据存储到一种平台</li><li>爬虫文件提交的item只会给管道文件中第一个被执行的管道类接收</li><li><code>process_item</code>中的<code>return item</code>表示将item传递给下一个即将被执行的管道类</li></ul><h2 id="6-全站数据爬取"><a href="#6-全站数据爬取" class="headerlink" title="6. 全站数据爬取"></a>6. 全站数据爬取</h2><p><strong>基于spider的全站数据爬取：</strong>就是将网站中某板块下的全部页码对应的页面数据进行爬取。</p><ul><li>爬取：校花网明星写真的名称</li><li>实现方式：<ul><li>将所有页面的<code>url</code>添加到<code>start_urls</code>列表（不推荐）</li><li>自行手动进行请求发送（推荐）</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''------------校花网xiaohua.py----------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">XiaohuaSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'xiaohua'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.521609.com/tuku/mxxz/'</span><span class="token punctuation">]</span>    <span class="token comment">#生成一个通用的url模板(不可变)</span>    url <span class="token operator">=</span> <span class="token string">'http://www.521609.com/tuku/mxxz/index_%d.html'</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[4]/div[3]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">28</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token operator">%</span>self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment">#手动请求发送:callback回调函数是专门用作于数据解析</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>            <span class="token triple-quoted-string string">'''---------------校花网pipelines.py--------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">class</span> <span class="token class-name">XiaohuaproPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item    <span class="token triple-quoted-string string">'''----------------校花网settings.py部分代码---------------------------'''</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>LOG_LEVEL <span class="token operator">=</span> <span class="token string">'ERROR'</span>USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-五大核心组件"><a href="#7-五大核心组件" class="headerlink" title="7. 五大核心组件"></a>7. 五大核心组件</h2><p><strong>五大核心组件：</strong></p><p><img src="../PythonProjects/Typora_image/image-20210302092358486.png" alt="image-20210302092358486"></p><ul><li><strong>Spiders：</strong><ul><li>产生URL，对URL进行手动发送</li><li>进行数据解析</li></ul></li><li><strong>引擎（Scrapy Engine）：</strong><ul><li>数据流处理</li><li>触发事务</li></ul></li><li><strong>调度器（Scheduler）：</strong><ul><li><strong>过滤器</strong>去重</li><li>去重后的请求对象压到<strong>队列</strong>中</li></ul></li><li><strong>下载器（Downloader）：</strong><ul><li>负责获取页面数据并提供给引擎，而后提供给Spider</li></ul></li><li><strong>项目管道（Item Pipeline）：</strong><ul><li>负责处理爬虫从网页中抽取的实体，页面被爬虫解析所需的数据存入item后，将被发送到管道，经过特定的次序处理数据，最后存入本地文件或者数据库。</li></ul></li></ul><h2 id="8-请求传参"><a href="#8-请求传参" class="headerlink" title="8. 请求传参"></a>8. 请求传参</h2><ul><li><strong>使用场景：</strong>如果爬取解析的数据不在同一张页面中。（深度爬取）</li><li><strong>需求：</strong>爬取boss的岗位名称和岗位描述</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#### 我尝试着并未有啥结果.......等大佬</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bossPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> BossproItem<span class="token keyword">class</span> <span class="token class-name">BossSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'boss'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.zhipin.com/c100010000/?page=1&amp;ka=page-1'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">'https://www.zhipin.com/c100010000/?page=%d'</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment">#回调函数接收item</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        job_desc <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/div/div[2]/div[2]/div[1]/div//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        job_desc <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'job_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_desc        <span class="token keyword">yield</span> item    <span class="token comment">#解析首页中的岗位名称</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div/div[2]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> BossproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/div[1]/div[1]/div/div[1]/span[1]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_name            <span class="token keyword">print</span><span class="token punctuation">(</span>job_name<span class="token punctuation">)</span>            detail_url <span class="token operator">=</span> <span class="token string">'https://www.zhipin.com'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/div[1]/div[1]/div/div[1]/span[1]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#对详情页发请求获取详情页的页面源码数据</span>            <span class="token comment">#手动请求的发送</span>            <span class="token comment">#请求传参：meta={}，可以将meta字典传递给请求对应的回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'item'</span><span class="token punctuation">:</span>item<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">#分页操作</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token operator">%</span>self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>new_url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-scrapy图片爬取"><a href="#9-scrapy图片爬取" class="headerlink" title="9. scrapy图片爬取"></a>9. scrapy图片爬取</h2><p><strong>图片数据爬取之ImagesPipline：</strong></p><ul><li><p>基于scrapy爬取字符串类型的数据和爬取图片类型的数据区别？</p><ul><li>字符串：只需要基于xpath进行解析且提交管道进行持久化存储</li><li>图片：xpath解析出图片的src属性值，单独的对图片地址发起请求获取二进制类型的数据</li></ul></li><li><p><strong>ImagesPipeline：</strong></p><ul><li>只需要将img的src的属性值进行解析，提交到管道，管道就会对图片的src进行请求发送获取图片的二进制类型的数据，且还会帮我们进行持久化存储。</li></ul></li><li><p><strong>需求：</strong>爬取站长素材的高清图片</p></li><li><p><strong>使用流程：</strong></p><ul><li>数据解析（图片的地址）</li><li>将存储图片地址的item提交到指定的管道类</li><li>在管道文件中自己定制一个基于ImagesPipeLine的一个管道类<ul><li><code>get_media_request( )</code></li><li><code>file_path</code></li><li><code>item_completed</code></li></ul></li><li>在配置文件中操作<ul><li>指定图片存储目录：<code>IMAGES_STORE = './imgs_ZYZhang'</code></li><li>指定开启的管道：自定制的管道类</li></ul></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''----------------爬取站长素材高清图片  img.py-----------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> imgsPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> ImgsproItem<span class="token keyword">class</span> <span class="token class-name">ImgSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'img'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://sc.chinaz.com/tupian/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="container"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment">#注意：使用伪属性 src2</span>            src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/img/@src2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> ImgsproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span> <span class="token operator">=</span> src            <span class="token keyword">yield</span> item<span class="token triple-quoted-string string">'''----------------------爬取站长素材高清图片  pipelines.py---------------------------'''</span>            <span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token comment"># class ImgsproPipeline(object):</span><span class="token comment">#     def process_item(self, item, spider):</span><span class="token comment">#         return item</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">imgsPileLine</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#可以根据图片地址进行图片数据的请求</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#指定图片存储的路径</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imgName <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> imgName    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item <span class="token comment">#返回给下一个即将被执行的管道类</span><span class="token triple-quoted-string string">'''---------------------------------爬取站长素材高清图片  items.py-----------------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://doc.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ImgsproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># pass</span><span class="token triple-quoted-string string">'''------------------------------爬取站长素材高清图片 setting.py部分代码-------------------'''</span><span class="token comment">#指定图片存储的目录</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'./imgs_ZYZhang'</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'imgsPro.pipelines.imgsPileLine'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span>LOG_LEVEL <span class="token operator">=</span> <span class="token string">'ERROR'</span><span class="token comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span>USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-中间件"><a href="#10-中间件" class="headerlink" title="10. 中间件"></a>10. 中间件</h2><ul><li><strong>下载中间件：</strong><ul><li>位置：引擎和下载器之间</li><li>作用：批量拦截到整个工程中所有的请求和响应</li><li>拦截请求：<ul><li>UA伪装：<code>process_request</code></li><li>代理IP：<code>process_exception:return request</code></li></ul></li><li>拦截响应：<ul><li>篡改响应数据，响应对象</li><li>网易新闻爬取</li></ul></li></ul></li></ul><h2 id="11-网易新闻"><a href="#11-网易新闻" class="headerlink" title="11. 网易新闻"></a>11. 网易新闻</h2><p><strong>需求：</strong>爬取网易新闻的新闻数据（标题和内容）</p><ul><li>通过网易新闻的首页解析出几大板块对应的详情页的url（经验证，无动态加载）</li><li>每个板块点击后，其中的新闻标题都是动态加载出来的（动态加载）</li><li>通过解析出每一条新闻详情页的url，获取详情页的页面源码，解析出新闻内容</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''-------------------------------网易新闻  wangyi.py------------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> wangyiPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> WangyiproItem<span class="token keyword">class</span> <span class="token class-name">WangyiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wangyi'</span>    <span class="token comment"># allowed_domains = ['www.cccom']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://news.163.com/'</span><span class="token punctuation">]</span>    models_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">#存储五个板块对应详情页的url</span>    <span class="token comment">#解析五大板块对应详情页的url</span>    <span class="token comment">#实例化一个浏览器对象</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'F:\PythonProjects\爬虫\动态加载数据处理\chromedriver.exe'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="index2016_wrap"]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li'</span><span class="token punctuation">)</span>        alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> alist<span class="token punctuation">:</span>            model_url <span class="token operator">=</span> li_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>models_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model_url<span class="token punctuation">)</span>        <span class="token comment">#依次对每一个板块对应的页面进行请求</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>      <span class="token comment">#对每一个板块的url进行请求发送</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_model<span class="token punctuation">)</span>    <span class="token comment">#每一个板块对应的新闻标题相关的内容都是动态加载</span>    <span class="token keyword">def</span> <span class="token function">parse_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#解析每一个板块页面中对应新闻的标题和新闻详情页的url</span>        <span class="token comment"># response.xpath()</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/div[3]/div[4]/div[1]/div/div/ul/li/div/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_detail_url <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> WangyiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            <span class="token comment">#对新闻详情页的url发起请求</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 解析新闻内容</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="content"]/div[2]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item    <span class="token keyword">def</span> <span class="token function">closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-------------------------------网易新闻  pipelines.py-----------------------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">class</span> <span class="token class-name">WangyiproPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token triple-quoted-string string">'''-------------------------------网易新闻  middlewares.py-------------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define here the models for your spider middleware</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponse<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">class</span> <span class="token class-name">WangyiproDownloaderMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Not all methods need to be defined. If a method is not defined,</span>    <span class="token comment"># scrapy框架 acts as if the downloader middleware does not modify the</span>    <span class="token comment"># passed objects.</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Called for each request that goes through the downloader</span>        <span class="token comment"># middleware.</span>        <span class="token comment"># Must either:</span>        <span class="token comment"># - return None: continue processing this request</span>        <span class="token comment"># - or return a Response object</span>        <span class="token comment"># - or return a Request object</span>        <span class="token comment"># - or raise IgnoreRequest: process_exception() methods of</span>        <span class="token comment">#   installed downloader middleware will be called</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token comment"># 通过该方法拦截五大板块对应的响应对象，进行篡改，使其满足需求</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#spider爬虫对象</span>        bro <span class="token operator">=</span> spider<span class="token punctuation">.</span>bro  <span class="token comment">#获取了在爬虫类中定义的浏览器对象</span>        <span class="token comment">#挑选出指定的响应对象进行篡改</span>        <span class="token comment">#    通过url指定request</span>        <span class="token comment">#    通过request指定response</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> spider<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>            bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>   <span class="token comment">#五个板块对应的url进行请求</span>            sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source  <span class="token comment">#包含了动态加载的新闻数据</span>            <span class="token comment">#response #五大板块对应的响应对象</span>            <span class="token comment">#针对定位到的这些response进行篡改</span>            <span class="token comment">#实例化一个新的响应对象（符合需求：包含动态加载出的新闻数据），替代原来旧的响应对象</span>            <span class="token comment">#如何获取动态加载出的新闻数据？</span>                <span class="token comment">#基于selenium便捷的获取动态加载数据</span>            new_response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body<span class="token operator">=</span>page_text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>            <span class="token keyword">return</span> new_response        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment">#response #其他请求对应的响应对象</span>            <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Called when a download handler or a process_request()</span>        <span class="token comment"># (from other downloader middleware) raises an exception.</span>        <span class="token comment"># Must either:</span>        <span class="token comment"># - return None: continue processing this exception</span>        <span class="token comment"># - return a Response object: stops process_exception() chain</span>        <span class="token comment"># - return a Request object: stops process_exception() chain</span>        <span class="token keyword">pass</span><span class="token triple-quoted-string string">'''-----------------------------网易新闻 setting.py部分代码---------------------------------'''</span><span class="token comment">#USER_AGENT = 'wangyiPro (+http://www.yourdomain.com)'</span>USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># Enable or disable downloader middlewares</span><span class="token comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'wangyiPro.middlewares.WangyiproDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">}</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'wangyiPro.pipelines.WangyiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span>LOG_LEVEL <span class="token operator">=</span> <span class="token string">'ERROR'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-CrawlSpider的全站数据爬取"><a href="#12-CrawlSpider的全站数据爬取" class="headerlink" title="12. CrawlSpider的全站数据爬取"></a>12. CrawlSpider的全站数据爬取</h2><p><strong>CrawlSpider：</strong>基于Spider的一个子类</p><ul><li>全站数据爬取的方式<ul><li>基于Spider：手动请求发送</li><li>基于CrawlSpider</li></ul></li><li>CrawlSpider的使用：<ul><li>创建一个工程</li><li>cd  XXX</li><li>创建爬虫文件（CrawlSpider）<ul><li><code>scrapy  genspider  -t  crawl  xxx   www.xxxx.com</code></li><li><strong>链接提取器（LinkExtractor）：</strong>根据指定规则（allow=”正则”）进行指定链接的提取</li><li><strong>规则解析器（Rule）：</strong>将链接提取器提取到的链接进行指定规则（callback）的解析操作</li></ul></li></ul></li><li><strong>需求：</strong>爬取阳光热线网站中的编号，新闻标题，新闻内容，标号<ul><li>分析：爬取的数据没有在同一张页面中</li><li><ol><li>可以使用链接提取器提取所有的页码链接</li><li>让链接提取器提取所有的问政详情页链接</li></ol></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''---------------------阳光问政    sun.py---------------------------'''</span><span class="token triple-quoted-string string">'''网站页面源码跟视频课有改动，建议follow先改False爬一下，不然容易被封IP，有兴趣的可以改改，搞个代理啥的再爬'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> sunPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> SunproItem<span class="token punctuation">,</span> DetailItem<span class="token comment"># 需求：爬取阳光热线网站中的编号，新闻标题，新闻内容，标号</span><span class="token keyword">class</span> <span class="token class-name">SunSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'sun'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://wz.sun0769.com/political/index/politicsNewest?id=1&amp;page='</span><span class="token punctuation">]</span>    <span class="token comment">#链接提取器：根据指定规则（allow="正则"）进行指定链接的提取</span>    link <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=1&amp;page=\d+'</span><span class="token punctuation">)</span>    link_detail <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'index\?id=\d+'</span><span class="token punctuation">)</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment">#规则解析器：将链接提取器提取到的链接进行指定规则（callback）的解析操作</span>        Rule<span class="token punctuation">(</span>link<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">#follow=True：可以将链接提取器 继续作用到 链接提取器提取到的链接 所对应的页面中</span>        Rule<span class="token punctuation">(</span>link_detail<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_detail'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment">#http://wz.sun0769.com/political/politics/index?id=490505</span>    <span class="token comment">#http://wz.sun0769.com/political/politics/index?id=490504</span>    <span class="token comment"># 解析新闻编号和新闻的标题</span>    <span class="token comment"># 如下两个解析方法中是不可以实现请求传参！</span>    <span class="token comment"># 无法将两个解析方法解析的数据存储到同一个item中，可以依次存储到两个item中</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#注意：xpath表达式中不可以出现tbody标签</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html//div[2]/div[3]/ul[2]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            new_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> SunproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_title            item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_num            <span class="token keyword">yield</span> item    <span class="token comment">#解析新闻内容和新闻编号</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_id <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html//div[3]/div[2]/div[2]/div[1]/span[4]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html//div[3]/div[2]/div[2]/div[2]/pre/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>        <span class="token comment"># print(new_id,new_content)</span>        item <span class="token operator">=</span> DetailItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_content        item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_id        <span class="token keyword">yield</span> item        <span class="token triple-quoted-string string">'''-------------------------------pipelines.py------------------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define your item pipelines here</span><span class="token comment">#</span><span class="token comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="token comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="token keyword">class</span> <span class="token class-name">SunproPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#如何判定item的类型</span>        <span class="token comment">#将数据写入数据库时，如何保证数据的一致性</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'DetailItem'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token triple-quoted-string string">'''---------------------------items.py----------------------'''</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Define here the models for your scraped items</span><span class="token comment">#</span><span class="token comment"># See documentation in:</span><span class="token comment"># https://doc.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SunproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DetailItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_id <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-分布式概述及搭建"><a href="#13-分布式概述及搭建" class="headerlink" title="13. 分布式概述及搭建"></a>13. 分布式概述及搭建</h2><p><strong>分布式爬虫：</strong></p><ul><li>概念：我们需要搭建一个分布式的机群，让其对一组资源进行分布联合爬取。</li><li>作用：提升爬取数据的效率</li></ul><p><strong>如何实现分布式？</strong></p><ul><li>安装一个scrapy-redis的组件</li><li>原生的scrapy是不可以实现分布式爬虫的，必须要让scrapy-redis组件一起实现分布式爬虫。</li></ul><p><strong>为什么原生的scrapy不可以实现分布式？</strong></p><ul><li>调度器不可以被分布式机群共享</li><li>管道不可以被分布式机群共享</li></ul><p><strong>scrapy-redis组件作用：</strong></p><ul><li>可以给原生的scrapy框架提供可以被共享的<em>管道</em>和<em>调度器</em>。</li></ul><p><strong>scrapy-redis实现流程：</strong></p><ul><li><p>创建一个工程</p></li><li><p>创建一个基于CrawlSpider的爬虫文件</p></li><li><p>修改当前的爬虫文件：</p><ul><li>导包：<code>from scrapy_redis.spiders  import  RedisCrawlSpider</code></li><li>将start_urls和allowed_domains进行注释</li><li>添加一个新属性：redis_key = ‘   ‘ 可以被共享的调度器队列的名称</li><li>编写数据解析相关的操作</li><li>将当前爬虫类的父类修改成 RedisCrawlSpider</li></ul></li><li><p>修改配置文件settings</p><ul><li><p>指定使用可以被共享的管道：</p></li><li><p>`ITEM_PIPELINES = {</p><pre><code>  'scrapy_redis.pipelines.RedisPipeline': 400 }`</code></pre></li><li><p>指定调度器：</p></li><li><p>增加了一个去重容器类的配置，作用是用Redis的set集合来存储请求的指纹数据，从而实现请求去重的持久化</p><p>  <code>DUPEFILTER_CLASS = "scrapy_redis.dupefilter.RFPDupeFilter"</code></p><p>  使用scrapy-redis组件自己的调度器</p><p>  <code>SCHEDULER = "scrapy_redis.scheduler.Scheduler"</code></p><p>  配置调度器是否要持久化，也就是当爬虫结束了，要不要清空Redis中请求队列和去重指纹的set。如果是True，就表示要持久化存储，就不清数据，否则清空数据</p><p>  <code>SCHEDULER_PERSIST = True</code></p></li><li><p>指定redis服务器</p></li></ul></li><li><p>redis相关操作配置：</p><ul><li>配置redis的配置文件：<ul><li>linux或者mac：<code>redis.conf</code></li><li>windows：<code>redis.windows.conf</code></li><li>打开配置文件修改：<ul><li>将<code>bind 127.0.0.1</code>进行注释或删除</li><li>关闭保护模式：<code>protected-mode yes</code>改为no</li></ul></li></ul></li><li>结合着配置文件开启redis服务<ul><li>redis-server 配置文件</li><li>启动客户端：redis-cli</li></ul></li></ul></li><li><p>执行工程：</p><ul><li><code>scrapy  runspider  xxx.py</code></li></ul></li><li><p>向调度器的队列中放入一个起始的url：</p><ul><li>调度器的队列在redis的客户端中</li><li><code>lpush  xxx  www.xxx.com</code></li></ul></li><li><p>爬取到的数据存储在了 redis 的 <code>proName:items</code> 这个数据结构中</p></li></ul><h2 id="14-增量式爬虫"><a href="#14-增量式爬虫" class="headerlink" title="14. 增量式爬虫"></a>14. 增量式爬虫</h2><ul><li><strong>概念：</strong>监测网站数据更新的情况，只会爬取网站最新更新出来的数据。</li><li><strong>分析：</strong><ul><li>指定一个起始url</li><li>基于CrawlSpider获取其他页码链接</li><li>基于Rule将其他页码链接进行请求</li><li>从每一个页码对应的页面源码中解析出每一个电影详情页的URL</li><li>核心：检测电影详情页的url之前有没有请求过<ul><li>将爬取过的电影详情页的url存储</li><li>存储到redis的set数据结构</li></ul></li><li>对详情页的url发起请求，然后解析出电影的名称和简介</li><li>进行持久化存储</li></ul></li></ul><hr><h1 id="九、补充——异步编程"><a href="#九、补充——异步编程" class="headerlink" title="九、补充——异步编程"></a>九、补充——异步编程</h1><p><strong>为什么要讲？</strong></p><ul><li>这一部分的知识点不太容易学习（异步非阳塞、 asyncio）</li><li>异步相关话题和框架越来越多，例如：tornado、fastapi、django 3.x asgi、aiohttp都在异步→提升性能</li></ul><p><strong>如何讲解？</strong></p><ul><li>第一部分：协程</li><li>第二部分：asyncio模块进行异步编程</li><li>第三部分：实战案例</li></ul><h2 id="1-协程"><a href="#1-协程" class="headerlink" title="1. 协程"></a>1. 协程</h2><p>协程不是计算机提供，程序员人为创造。</p><p>协程（ Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现协程的集中方法：</strong></p><ul><li>greelet，早期模块</li><li>yield关键字</li><li>asyncio装饰器（py3.4及以后版本）</li><li>async、await关键字（py3.5及以后版本）</li></ul><h3 id="（1）greenlet实现协程"><a href="#（1）greenlet实现协程" class="headerlink" title="（1）greenlet实现协程"></a>（1）greenlet实现协程</h3><p><code>pip install greenlet</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> greenlet <span class="token keyword">import</span> greenlet<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#切换到func2函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#切换到func2函数，从上一次执行的位置继续向后执行</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    gr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#切换到func1函数，从上一次执行的位置继续向后执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>gr1 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func1<span class="token punctuation">)</span>gr2 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func2<span class="token punctuation">)</span>gr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#去执行func1函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）yield关键字"><a href="#（2）yield关键字" class="headerlink" title="（2）yield关键字"></a>（2）yield关键字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">3</span>    <span class="token keyword">yield</span> <span class="token number">4</span>f1 <span class="token operator">=</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> f1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）asyncio装饰器"><a href="#（3）asyncio装饰器" class="headerlink" title="（3）asyncio装饰器"></a>（3）asyncio装饰器</h3><p>==遇到IO阻塞自动切换==</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#遇到IO耗时操作，自动化切换到tasks中的其他任务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#遇到IO耗时操作，自动化切换到tasks中的其他任务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）async、await关键字（推荐）"><a href="#（4）async、await关键字（推荐）" class="headerlink" title="（4）async、await关键字（推荐）"></a>（4）async、await关键字（推荐）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#遇到IO耗时操作，自动化切换到tasks中的其他任务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#遇到IO耗时操作，自动化切换到tasks中的其他任务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-协程的意义"><a href="#2-协程的意义" class="headerlink" title="2. 协程的意义"></a>2. 协程的意义</h2><p>在一个线程中，如果遇到IO等待的时间，线程不会等待，利用空闲的时间去做其他的事情。</p><p>需求：下载三张图片（网络IO）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''普通的request方式'''</span><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载：'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成'</span><span class="token punctuation">)</span>    file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>        file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg'</span><span class="token punctuation">,</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/210228/010301-1614445381005c.jpg'</span><span class="token punctuation">,</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg'</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        download_image<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''使用aiohttp模块下载    协程方式'''</span><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'发送请求：'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify_ssl <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        content <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>            file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        url_list <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg'</span><span class="token punctuation">,</span>            <span class="token string">'https://pic.netbian.com/uploads/allimg/210228/010301-1614445381005c.jpg'</span><span class="token punctuation">,</span>            <span class="token string">'https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg'</span>        <span class="token punctuation">]</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#asyncio.run(main())     #正常运行但是会报错,换成loop方式就ok</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><h3 id="（1）事件循环"><a href="#（1）事件循环" class="headerlink" title="（1）事件循环"></a>（1）事件循环</h3><p><strong>概念：</strong>理解为一个死循环，去检测并执行某些代码。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 伪代码</span>任务列表 = [任务1 , 任务2 , 任务3 ....]while True:可执行的任务列表，已完成的任务列表--&gt;去任务列表中检测所有的任务，将“可执行”和“已完成”的任务返回for 就绪任务 in 可执行的任务列表:执行已就绪的任务    for 已完成的任务 in 已完成的任务列表:    在任务列表中移除 已完成的任务    如果 任务列表 中的任务都已经完成，则终止循环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token comment"># 去生成或获取一个事件循环</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将任务task放到 任务列表</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）快速上手"><a href="#（2）快速上手" class="headerlink" title="（2）快速上手"></a>（2）快速上手</h3><p><strong>协程函数：</strong>定义函数时 <code>async def 函数名</code></p><p><strong>协程对象：</strong>执行 协程函数 得到的对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span>result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!--注意：执行协程函数创建协程对象，函数内部代码不会执行！--><!--如果想要运行协程函数内部代码，必须要将协程代码交给事件循环来处理。--><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'快来打我吧！'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#asyncio.run(result)#python3.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）await关键字"><a href="#（3）await关键字" class="headerlink" title="（3）await关键字"></a>（3）await关键字</h3><p><code>await 可等待的对象(协程对象、Future对象、Task对象)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例一'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'来玩呀'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例二'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'返回值'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码'</span><span class="token punctuation">)</span>    <span class="token comment">#遇到IO操作挂起当前协程（任务），等IO操作完成以后再继续往下执行，当前协程挂起时，事件循环可以去执行其他区协程（任务</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO请求结束，结果为：'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例三'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'返回值'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码'</span><span class="token punctuation">)</span>    <span class="token comment">#一个协程函数中可以有多个await关键字</span>    response1 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO请求结束，结果为：'</span><span class="token punctuation">,</span> response1<span class="token punctuation">)</span>    response2 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO请求结束，结果为：'</span><span class="token punctuation">,</span> response2<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--await就是等待对象的值得到结果之后再继续向下走。--><h3 id="（4）Task对象"><a href="#（4）Task对象" class="headerlink" title="（4）Task对象"></a>（4）Task对象</h3><p><a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html?highlight=task#asyncio.Task">Task对象官方文档</a></p><p><strong>主要就是在事件循环中添加多个任务。</strong></p><p>Task 用于并发调度协程，<code>通过asyncio.create_task(协程对象)</code> 的方式创建 Task 对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数之外，还可以使用低层级的 <code>loop.create_task()</code> 或者 <code>ensure_future()</code> 函数，不建议手动实例化 Task 对象</p><!--注意：asyncio.create_task() 函数在 Python 3.7 中被加入，在Python 3.7之前，可以改用低层级的 asyncio.ensure_future() 函数。--><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例1'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'返回值'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main开始'</span><span class="token punctuation">)</span>    <span class="token comment"># 创建Task对象，将当前执行func函数任务添加到事件循环</span>    task1 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 创建Task对象，将当前执行func函数任务添加到事件循环</span>    task2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main结束'</span><span class="token punctuation">)</span>    <span class="token comment"># 当执行某协程遇到IO操作时，会自动华切换执行其他任务</span>    <span class="token comment"># 此处的 await 是等待相对应的协程全部执行完毕并获取结果</span>    ret1 <span class="token operator">=</span> <span class="token keyword">await</span> task1    ret2 <span class="token operator">=</span> <span class="token keyword">await</span> task2    <span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">,</span>ret2<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例2'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'返回值'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main开始'</span><span class="token punctuation">)</span>        task_list <span class="token operator">=</span> <span class="token punctuation">[</span>        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'n1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'n2'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token comment">#多个任务，更常使用列表形式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main结束'</span><span class="token punctuation">)</span>            done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#loop事件循环首先创建，然后列表才创建进去</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例3'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'返回值'</span><span class="token comment">#使用这段代码会报错，因为列表里的代码会立即加到事件循环中去，但是此时事件循环还没有创建</span><span class="token comment"># task_list = [</span><span class="token comment">#     asyncio.create_task(func(), name='n1'),</span><span class="token comment">#     asyncio.create_task(func(), name='n2')</span><span class="token comment"># ]</span>task_list <span class="token operator">=</span> <span class="token punctuation">[</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>done<span class="token punctuation">,</span> pending <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（5）asyncio-Future对象"><a href="#（5）asyncio-Future对象" class="headerlink" title="（5）asyncio.Future对象"></a>（5）asyncio.Future对象</h3><p><a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html?highlight=future#asyncio.Future">asyncio.Future官方文档</a></p><p><strong>Task 对象继承 Future，Task 对象内部 await 结果的处理是基于 Future 对象来的。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例1'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取当前事件循环</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建一个任务（Future对象），这个任务什么都不干</span>    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#  等待任务最终的结果（Future对象）,没有结果则会一直等下去。</span>    <span class="token keyword">await</span> futasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例2'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#的获取当前事件循环</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值</span>    <span class="token comment"># 即手动设置future任务的最终结果，那么fut就可以结束了</span>    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>set_after<span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 等待 future 对象获取最终结果，否则会一直等下去</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> fut    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（6）concurrent-futures-Future对象"><a href="#（6）concurrent-futures-Future对象" class="headerlink" title="（6）concurrent.futures.Future对象"></a>（6）concurrent.futures.Future对象</h3><p><a href="https://docs.python.org/zh-cn/3/library/concurrent.futures.html?highlight=future#module-concurrent.futures">concurrent.futures官方文档</a></p><p><strong>使用进程池或者线程池实现异步操作时用到的对象。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> Future<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>process <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment"># 创建线程池</span>pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#创建进程池</span><span class="token comment">#  pool = ProcessPoolExecutor(max_workers = 5)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fut <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>func<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后写代码或许还有交叉使用。例如：crm项目80%都是属于基于协程异步编程 + MySQL（不支持）【线程或者进程做异步编程】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 某个耗时操作</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"SB"</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 1.Run is the default loop's executor(默认ThreadPoolExecutor)</span>    <span class="token comment"># step1 ：内部调用ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行 func1 函数，并返回一个 concurrent.futures.Future 对象</span>    <span class="token comment"># step2 ：调用asyncio.wrap_future 将 concurrent.futures.Future 对象包装为 asyncio.Future 对象</span>    <span class="token comment"># 因为 concurrent.futures.Future 对象不支持 await 语法，所以需要包装为 asyncio.Future 对象，才可以使用</span>    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> fut    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'default thread pool'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token comment"># 2.Run in a custom thread pool:</span>    <span class="token comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span>    <span class="token comment"># result = await loop.run_in_executor(pool,func1)</span>    <span class="token comment"># print('custom thread pool',result)</span>    <span class="token comment"># 3.Run in a custom process pool:</span>    <span class="token comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span>    <span class="token comment"># result = await loop.run_in_executor(pool,func1)</span>    <span class="token comment"># print('custom process pool',result)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（7）案例：asyncio-不支持异步的模块"><a href="#（7）案例：asyncio-不支持异步的模块" class="headerlink" title="（7）案例：asyncio + 不支持异步的模块"></a>（7）案例：asyncio + 不支持异步的模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 跟前一节代码一样的效果，但是更耗费资源</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># requests模块默认不支持异步操作，所以就使用线程池来配合实现了</span>    future <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> future    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成'</span><span class="token punctuation">)</span>    <span class="token comment"># 图片保存到本地文件</span>    file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>        file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg'</span><span class="token punctuation">,</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/200910/200207-1599739327e5a8.jpg'</span><span class="token punctuation">,</span>        <span class="token string">'https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg'</span>    <span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>download_image<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（8）异步迭代器"><a href="#（8）异步迭代器" class="headerlink" title="（8）异步迭代器"></a>（8）异步迭代器</h3><p><strong>什么是异步迭代器？</strong></p><p>实现了 <code>__aiter__()</code> 和 <code>__anext__()</code> 方法的对象。<code>__anext__() </code>必须返回一个 <code>awaitable</code> 对象。<code>async for</code> 会处理异步迭代器的 <code>__anext__() </code> 方法所返回的可等待对象，直到其引发一个 <code>StopAsyncIteration</code> 异常。由 <code>PEP 492</code> 引入。</p><p><strong>什么是异步可迭代对象？</strong><br>可在 <code>async for</code> 语句中被使用的对象。必须通过它的 <code>__aiter__()</code> 方法返回一个 <code>asynchronous iterator</code>。由 <code>PEP 492</code> 引入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">class</span> <span class="token class-name">Reader</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''自定义异步迭代器 （同时也是一部可迭代对象）'''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">readline</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># await asyncio.sleep(1)</span>        self<span class="token punctuation">.</span>count  <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>count    <span class="token keyword">def</span> <span class="token function">__aiter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__anext__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopAsyncIteration        <span class="token keyword">return</span> val<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> Reader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> obj<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（9）异步上下文管理器"><a href="#（9）异步上下文管理器" class="headerlink" title="（9）异步上下文管理器"></a>（9）异步上下文管理器</h3><p>此种对象通过定义 <code>__aenter__()</code> 和 <code>__aexit__()</code> 方法来对 <code>async with</code> 语句中的环境进行控制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">class</span> <span class="token class-name">AsyncContextManager</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> conn<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> conn    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">do_something</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 异步操作数据库</span>        <span class="token keyword">return</span> <span class="token number">666</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aenter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 异步链接数据库</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aexit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc<span class="token punctuation">,</span> tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 异步关闭数据库链接</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> AsyncContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> f<span class="token punctuation">.</span>do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-uvloop"><a href="#4-uvloop" class="headerlink" title="4. uvloop"></a>4. uvloop</h2><p><strong>uvloop 是 asyncio 的事件循环的替代方案。事件循环 &gt; 默认 asyncio 的事件循环。</strong></p><p><code>pip install uvloop</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> uvloopasyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>uvloop<span class="token punctuation">.</span>EventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 编写 asyncio 的代码，与之前写的代码一致</span><span class="token comment"># 内部的事件循环自动化会变为 uvloop</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--注意：一个 asgi ->uvicorn 内部默认使用的就是uvloop --><h3 id="5-实战案例"><a href="#5-实战案例" class="headerlink" title="5. 实战案例"></a>5. 实战案例</h3><h3 id="（1）异步-redis"><a href="#（1）异步-redis" class="headerlink" title="（1）异步 redis"></a>（1）异步 redis</h3><p>在使用 python 代码操作 redis 时，链接/操作/断开都是网络IO。</p><p><code>pip install aioredis</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#作者未设置 redis，故此代码未测试</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aioredis<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始执行'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：创建 redis 链接</span>    redis <span class="token operator">=</span> <span class="token keyword">await</span> aioredis<span class="token punctuation">.</span>create_redis<span class="token punctuation">(</span>address<span class="token punctuation">,</span> password <span class="token operator">=</span> password<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：在 redis 中设置哈希值 car，内部再设三个键值对，即：redis = {car:{key1:1,key2:2,key3:33}}</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> key3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 网络IO操作：去 redis 中获取值</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    redis<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：关闭 redis 链接</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>execute<span class="token punctuation">(</span><span class="token string">'redis://47.93.4.198:6379'</span><span class="token punctuation">,</span> <span class="token string">"root!2345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例2'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aioredis<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始执行'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：先去连接 47.93.4.197:6379 遇到IO自动切换任务，去连接 47.93.4.198:6379</span>    redis <span class="token operator">=</span> <span class="token keyword">await</span> aioredis<span class="token punctuation">.</span>create_pool<span class="token punctuation">(</span>address<span class="token punctuation">,</span> password <span class="token operator">=</span> password<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：遇到IO自动切换任务</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> key3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 网络IO操作：遇到IO自动切换任务</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    redis<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：遇到IO自动切换任务</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>    task_list <span class="token operator">=</span><span class="token punctuation">[</span>    execute<span class="token punctuation">(</span><span class="token string">'redis://47.93.4.197:6379'</span><span class="token punctuation">,</span><span class="token string">'root!2345'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    execute<span class="token punctuation">(</span><span class="token string">'redis://47.93.4.198:6379'</span><span class="token punctuation">,</span><span class="token string">'root!2345'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）异步MySQL"><a href="#（2）异步MySQL" class="headerlink" title="（2）异步MySQL"></a>（2）异步MySQL</h3><p><code>pip3 install aiomysql</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例1'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiomysql<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 网络IO操作：连接 MySQL</span>    conn <span class="token operator">=</span> <span class="token keyword">await</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">,</span>db<span class="token operator">=</span> <span class="token string">'mysql'</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：创建 CURSOR</span>    cur <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 网络IO操作：执行 SQL</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT Host,User FROM user'</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：获取SQL结果</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：关闭 链接</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例2'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiomysql<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始'</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：先连197，遇到IO自动切换，去连198</span>    conn <span class="token operator">=</span> <span class="token keyword">await</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host <span class="token operator">=</span> host<span class="token punctuation">,</span> port<span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password <span class="token operator">=</span> password<span class="token punctuation">,</span>db<span class="token operator">=</span> <span class="token string">'mysql'</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：遇到IO自动切换</span>    cur <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 网络IO操作：遇到IO自动切换</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT Host,User FROM user'</span><span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：遇到IO自动切换</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment"># 网络IO操作：遇到IO自动切换</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>task_list <span class="token operator">=</span><span class="token punctuation">[</span>    execute<span class="token punctuation">(</span><span class="token string">'47.93.4.197:6379'</span><span class="token punctuation">,</span><span class="token string">'root!2345'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    execute<span class="token punctuation">(</span><span class="token string">'47.93.4.198:6379'</span><span class="token punctuation">,</span><span class="token string">'root!2345'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）FastAPI框架"><a href="#（3）FastAPI框架" class="headerlink" title="（3）FastAPI框架"></a>（3）FastAPI框架</h3><p><code>pip3 install fastapi</code>       <code>pip3 install uvicorn</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例'''</span><span class="token keyword">import</span> uvicorn<span class="token keyword">import</span> asyncio<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''普通操作接口'''</span>    <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Hello World"</span><span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"luffy:app"</span><span class="token punctuation">,</span>host<span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">'info'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''示例2'''</span><span class="token keyword">from</span> aioredis <span class="token keyword">import</span> Redis<span class="token keyword">import</span> uvicorn<span class="token keyword">import</span> aioredis<span class="token keyword">import</span> asyncio<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个redis的连接池 实际运行时更换自己的redis</span>REDIS_POOL <span class="token operator">=</span> aioredis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span><span class="token string">'redis://47.193.14.198:6379'</span><span class="token punctuation">,</span> password<span class="token operator">=</span> <span class="token string">'root123'</span><span class="token punctuation">,</span> minsize <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> maxsize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''普通操作接口'''</span>    <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Hello World"</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/red'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 异步操作接口</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求来了'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment"># 连接池获取一个连接</span>    conn <span class="token operator">=</span> <span class="token keyword">await</span> REDIS_POOL<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>        <span class="token comment"># 设置值</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span>key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>key2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>key3 <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment"># 读取值</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment">#连接归还连接池</span>    REDIS_POOL<span class="token punctuation">.</span>release<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"脚本名:app"</span><span class="token punctuation">,</span>host<span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span> <span class="token string">'info'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）异步爬虫"><a href="#（4）异步爬虫" class="headerlink" title="（4）异步爬虫"></a>（4）异步爬虫</h3><p><code>pip3 install aiohttp</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''使用aiohttp模块下载    协程方式'''</span><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'发送请求：'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify_ssl <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'得到结果：'</span><span class="token punctuation">,</span> url <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        url_list <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'https://python.org'</span><span class="token punctuation">,</span>            <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>            <span class="token string">'https://www.pythonav.com'</span>        <span class="token punctuation">]</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>        done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：ZY.Zhang&lt;/p&gt;
&lt;p&gt;本文档基于&lt;a href=&quot;https://www.bilibili.com/video/BV1Yh411o7Sz?p=1&quot;&gt;B站视频教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、爬虫</summary>
      
    
    
    
    <category term="python" scheme="https://a1561532803.github.io/yueguang.github.io/categories/python/"/>
    
    
    <category term="爬虫" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>CSS——Multi-column Layout 布局</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/35894.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/35894.html</id>
    <published>2021-07-06T15:40:00.000Z</published>
    <updated>2021-07-06T15:42:44.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS——Multi-column-Layout-布局"><a href="#CSS——Multi-column-Layout-布局" class="headerlink" title="CSS——Multi-column Layout 布局"></a>CSS——Multi-column Layout 布局</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    CSS3引入新的Multi-column Layout模型，从底层支持多栏布局。</p><h2 id="标签解释"><a href="#标签解释" class="headerlink" title="标签解释"></a>标签解释</h2><ul><li><article> 标签- 定义外部的内容，外部内容可以是来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。（w3s）</article></li><li><p>CSS3中的article容器</p><ul><li><p>拓展：</p><ul><li>section：当然既然可以用section,那这部分内容就一定也可以使用section,section中文就是：节，部分的意思，文章的目录，大纲最适合使用。section里一般都会有一个标题。</li></ul></li><li><p>article：是一个特殊的 section 标签，它比 section 具有更明确的语义, 它代表一个独立的、完整的相关内容块。一段内容已具备section中的标题时，如果这段内容可以独立存在表达一个意思，讲一个故事，说清楚一件事，那么这段内容就可以用article。article里面一般可以包括header,section,footer标签。</p></li></ul></li></ul><h2 id="示例1：新闻分栏"><a href="#示例1：新闻分栏" class="headerlink" title="示例1：新闻分栏"></a>示例1：新闻分栏</h2><ul><li><p>准备</p><ul><li>最初样式<img src="https://api2.mubu.com/v3/document_image/32587cf7-b94e-432e-a123-de2a954ccd7c-2637220.jpg" alt="img"></li></ul></li><li><p>开始布局</p><ul><li><p>给article容器设置一个<code>column-count</code>属性，表示显示多少列<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210706233243049.png" alt="image-20210706233243049"></p><ul><li><p>或者使用<code>column-width</code>来设置每列固定的宽度，让浏览器根据空间显示多少列（根据浏览器宽度自动控制显示多少列）<img src="https://api2.mubu.com/v3/document_image/71fd24ae-e477-4b10-a42c-6d8a468079ab-2637220.jpg" alt="img"></p></li><li><p>也可以使用<code>columns</code>这个简写形式，它可以同时指定列数和列宽，但是只有列数是起作用的，如以下这个属性，最后还是只能显示三列，和columns的结果一样</p></li><li><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/79299e7b-cc5f-4c54-a754-fee99b4cbce8-2637220.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/e1736872-fefd-4027-9075-3d588403d0ee-2637220.jpg" alt="img"></p></li></ul></li><li><p>使用<code>column-gap</code>设置列边距，这样每列之间的间隔就会变大<img src="https://api2.mubu.com/v3/document_image/2544f37e-d291-4472-8467-20042d863a29-2637220.jpg" alt="img"></p></li><li><p>使用<code>column-rule</code>设置分隔线，这里代码是</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">column-rule</span><span class="token punctuation">:</span>2px solid <span class="token function">hsl</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210706233350725.png" alt="image-20210706233350725"></p><ul><li><p><code>column-rule</code> 属性规定了列与列之间的直线，也称“规则”</p></li><li><p>注：hsl()函数表示色相、饱和度、亮度</p><ul><li><p>色相（H）是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。</p></li><li><p>饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0-100% 的数值。</p></li><li><p>亮度（L），取 0-100%，增加亮度，颜色会向白色变化；减少亮度，颜色会向黑色变化</p></li></ul></li></ul></li><li><p>设置一个高度与<code>column-fill</code>属性，这样当第一列填满之后才开始填第二列<img src="https://api2.mubu.com/v3/document_image/1cd4b700-fb56-496f-9a41-1531a84548b2-2637220.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/34359d7d-0ddd-4ede-a6da-07ff6ef9522d-2637220.jpg" alt="img"></p></li><li><p>文本中有h2标题，可以设置一个跨列显示（设置背景色是为了显眼）<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210706233447429.png" alt="image-20210706233447429"></p><ul><li><p>column-span 属性规定元素应横跨多少列。</p></li><li><p><code>column-span:all</code> 横跨所有列。</p></li></ul></li></ul></li></ul><h2 id="示例2：古书排版"><a href="#示例2：古书排版" class="headerlink" title="示例2：古书排版"></a>示例2：古书排版</h2><ul><li><p>演示诗词：李白–古朗月行</p><ul><li><p>小时不识月，呼作白玉盘。</p></li><li><p>又疑瑶台镜，飞在青云端。</p></li><li><p>仙人垂两足，桂树何团团。</p></li><li><p>白兔捣药成，问言与谁餐?</p></li><li><p>蟾蜍蚀圆影，大明夜已残。</p></li><li><p>羿昔落九乌，天人清且安。</p></li><li><p>阴精此沦惑，去去不足观。</p></li><li><p>忧来其如何？凄怆摧心肝。</p></li></ul></li><li><p>代码<img src="https://api2.mubu.com/v3/document_image/49f66715-d8ae-4b60-9c3a-cf9384991b84-2637220.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/7fce1f43-776d-47ea-9527-a4c712f23ff4-2637220.jpg" alt="img"></p></li><li><p>效果<img src="https://api2.mubu.com/v3/document_image/00598970-a834-4a41-8222-4a46ba0b3b65-2637220.jpg" alt="img"></p></li></ul><p>批注</p><ul><li><p>每一栏的宽度必须控制在一个字左右，所以这里对于容器的宽度有严格的要求（即column-rule，指定列之间的规则：宽度，样式和颜色）</p></li><li><p>通过<code>word-wrap: break-word</code>属性使中文的标点符号换行；</p></li><li><p><code>direction: rtl</code> 把文本方向设置为“从右向左”。</p><ul><li><p>direction 属性规定文本的方向 / 书写方向。</p></li><li><p>ltr：默认。文本方向从左到右。</p></li><li><p>rtl：文本方向从右到左。</p></li><li><p>inherit：规定应该从父元素继承 direction 属性的值。</p></li></ul></li></ul><p>示例1学习与代码来源：<a href="https://github.com/zxuqian/html-css-examples/blob/master/40-multi-column-layout/index.html">https://github.com/zxuqian/html-css-examples/blob/master/40-multi-column-layout/index.html</a></p><p>示例2学习自官方文档，css代码如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>        <span class="token property">columns</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>        <span class="token property">column-rule</span><span class="token punctuation">:</span> 1px dashed <span class="token function">rgb</span><span class="token punctuation">(</span>213<span class="token punctuation">,</span>213<span class="token punctuation">,</span>213<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">direction</span><span class="token punctuation">:</span> rtl<span class="token punctuation">;</span>        <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS——Multi-column-Layout-布局&quot;&gt;&lt;a href=&quot;#CSS——Multi-column-Layout-布局&quot; class=&quot;headerlink&quot; title=&quot;CSS——Multi-column Layout 布局&quot;&gt;&lt;/a&gt;CSS——</summary>
      
    
    
    
    <category term="web开发" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://a1561532803.github.io/yueguang.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>docker复习——实训篇</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/26626.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/26626.html</id>
    <published>2021-07-05T17:06:05.000Z</published>
    <updated>2021-07-05T17:47:04.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装："><a href="#Docker安装：" class="headerlink" title="Docker安装："></a>Docker安装：</h2><blockquote><p>此题必会(本地yum源法)：<strong>使用xserver1节点，自行配置YUM源，安装docker服务（(需要用到的包为xserver1节点/root目录下的Docker.tar.gz)。安装完服务后，将registry_latest.tar上传到xserver1节点中并配置为私有仓库。要求启动registry容器时，将内部保存文件的目录映射到外部的/opt)/registry目录，将内部的5000端口映射到外部5000端口。依次将启动registry容器的命令及返回结果、执行docker info命令的返回结果以文本形式提交到答题框。</strong></p></blockquote><p>答：</p><p>1、先配置yum源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment">#mv * /media/  #将目录底下的源全部移走</span><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment"># vi local.repo</span><span class="token punctuation">[</span>docker<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>docker<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///root/Docker<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入完成之后按键盘上的ESC键退出插入模式，最后一行没有出现– INSERT –就可以输入：<code>wq</code> （保存且退出）</p><p>2、回到家目录，解压家目录下的Docker.tar.gz包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd       #回到家目录</span><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># ll            #查看是否有Docker.tar.gz包</span>``<span class="token variable"><span class="token variable">`</span><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf Docker.tar.gz   #解压包</span><span class="token variable">`</span></span>``<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、下载docker包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install docker-ce</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、开启docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、上传registry_latest.tar包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># cd images/</span><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># ll       #查看该目录下有无registry_latest.tar包</span><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker load -i registry_latest.tar</span>d9ff549177a9: Loading layer  <span class="token number">4</span>.671MB/4.671MBf641ef7a37ad: Loading layer  <span class="token number">1</span>.587MB/1.587MBd5974ddb5a45: Loading layer  <span class="token number">20</span>.08MB/20.08MB5bbc5831d696: Loading layer  <span class="token number">3</span>.584kB/3.584kB73d61bf022fd: Loading layer  <span class="token number">2</span>.048kB/2.048kBLoaded image: registry:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、启动registry容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker run -itd -v /opt/registry:/var/lib/registry -p 5000:5000 --name registry registry:latest</span>2931309e69d0346e7a094362133f8fff588b90914e59350f9d861dbfe2e2c711<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7、编写daemon.json文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># vi /etc/docker/daemon.json    #添加以下内容</span><span class="token punctuation">{</span><span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"192.168.100.144:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入完成之后按键盘上的ESC键退出插入模式，最后一行没有出现– INSERT –就可以输入：<code>wq</code> （保存且退出）</p><p>8、重启docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、查看容器的相关信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker info</span>Containers: <span class="token number">1</span> Running: <span class="token number">0</span> Paused: <span class="token number">0</span> Stopped: <span class="token number">1</span>Images: <span class="token number">1</span>Server Version: <span class="token number">18.09</span>.6Storage Driver: devicemapper Pool Name: docker-253:0-67650867-pool Pool Blocksize: <span class="token number">65</span>.54kB Base Device Size: <span class="token number">10</span>.74GB Backing Filesystem: xfs Udev Sync Supported: <span class="token boolean">true</span> Data file: /dev/loop0 Metadata file: /dev/loop1 Data loop file: /var/lib/docker/devicemapper/devicemapper/data Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata Data Space Used: <span class="token number">59</span>.44MB Data Space Total: <span class="token number">107</span>.4GB Data Space Available: <span class="token number">27</span>.74GB Metadata Space Used: <span class="token number">692</span>.2kB Metadata Space Total: <span class="token number">2</span>.147GB Metadata Space Available: <span class="token number">2</span>.147GB Thin Pool Minimum Free Space: <span class="token number">10</span>.74GB Deferred Removal Enabled: <span class="token boolean">true</span> Deferred Deletion Enabled: <span class="token boolean">true</span> Deferred Deleted Device Count: <span class="token number">0</span> Library Version: <span class="token number">1.02</span>.107-RHEL7 <span class="token punctuation">(</span><span class="token number">2015</span>-10-14<span class="token punctuation">)</span>Logging Driver: json-fileCgroup Driver: cgroupfsPlugins: Volume: <span class="token builtin class-name">local</span> Network: bridge <span class="token function">host</span> macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> logentries splunk syslogSwarm: inactiveRuntimes: runcDefault Runtime: runcInit Binary: docker-initcontainerd version: b34a5c8af56e510852c35414db4c1f4fa6172339runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657init version: fec3683Security Options: seccomp Profile: defaultKernel Version: <span class="token number">3.10</span>.0-327.el7.x86_64Operating System: CentOS Linux <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>OSType: linuxArchitecture: x86_64CPUs: <span class="token number">2</span>Total Memory: <span class="token number">3</span>.688GiBName: xserver1ID: 42CR:4TGY:VUJ3:HR5L:3Z2J:ICYF:4MDN:NNT5:D5UE:K6R5:FIDR:3WJBDocker Root Dir: /var/lib/dockerDebug Mode <span class="token punctuation">(</span>client<span class="token punctuation">)</span>: <span class="token boolean">false</span>Debug Mode <span class="token punctuation">(</span>server<span class="token punctuation">)</span>: <span class="token boolean">false</span>Registry: https://index.docker.io/v1/Labels:Experimental: <span class="token boolean">false</span>Insecure Registries: <span class="token number">192.168</span>.100.144:5000 <span class="token number">127.0</span>.0.0/8Live Restore Enabled: <span class="token boolean">false</span>Product License: Community Engine <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker运维："><a href="#Docker运维：" class="headerlink" title="Docker运维："></a>Docker运维：</h2><blockquote><p><strong>使用xserver1节点，上传nginx_latest.tar到xserver1节点中，然后将该镜像打标签，上传至私有仓库。使用xserver2节点，自行安装docker服务，配置xserver2节点使用xserver1的私有仓库，配置完毕后，在xserver2节点拉取nginx_latest.tar镜像。最后将在xserver2上执行docker images命令返回的结果以文本形式提交到答题框。</strong></p><p>可在一个节点上完成</p></blockquote><p>1、先安装docker，同上一题的操作一样（之后不再解释这一步），配置yum源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment">#mv * /media/  #将目录底下的源全部移走</span><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment"># vi local.repo</span><span class="token punctuation">[</span>docker<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>docker<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///root/Docker<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入完成之后按键盘上的ESC键退出插入模式，最后一行没有出现– INSERT –后输入：<code>wq</code> （保存且退出）</p><p>2、回到家目录，解压家目录下的Docker.tar.gz包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd       #回到家目录</span><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># ll            #查看是否有Docker.tar.gz包</span><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf Docker.tar.gz   #解压包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、下载docker包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install docker-ce</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、开启docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>5、上传nginx_latest.tar包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker load -i nginx_latest.tar </span>b67d19e65ef6: Loading layer  <span class="token number">72</span>.5MB/72.5MB6eaad811af02: Loading layer  <span class="token number">57</span>.54MB/57.54MBa89b8f05da3a: Loading layer  <span class="token number">3</span>.584kB/3.584kBLoaded image: nginx:latest <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、打标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker tag nginx:latest 192.168.100.144:5000/nginx</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7、查看镜像信息（命令：docker images）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG         IMAGE ID       CREATED       SIZE<span class="token number">192.168</span>.100.144:5000/nginx  latest        540a289bab6c     <span class="token number">19</span> months ago    126MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署Swarm集群："><a href="#部署Swarm集群：" class="headerlink" title="部署Swarm集群："></a><em>部署Swarm集群：</em></h2><blockquote><p>使用xserver1、xserver2节点，自行配置好网络，安装好docker-ce。<strong>部署Swarm集群，并安装Portainer图形化管理工具，部署完成后，使用浏览器登录ip:9000界面，进入Swarm控制台。将curl swarm ip:9000返回的结果以文本形式提交到答题框。</strong></p></blockquote><p>1、用本地yum源下载docker（上述题有方法，不赘述）</p><p>2、下载docker包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install docker-ce</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 3、开启docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、安装portainer图形化管理工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker load -i portainer_portainer_latest.tar </span>dd4969f97241: Loading layer   278kB/278kB8b156c0136c9: Loading layer  <span class="token number">80</span>.32MB/80.32MBLoaded image ID: sha256:4cda95efb0e455c3044d727988c36c5947a4287f77db96e799199b349b3d523c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、启动容器：</p><p>先查看镜像id（docker images）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG         IMAGE ID       CREATED       SIZE<span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        4cda95efb0e4     <span class="token number">20</span> months ago    <span class="token number">80</span>.6MB <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker run -d -p 9000:9000 4cda95efb0e4</span>b7c9cb0f2576964c486d4dc6d47a4eba0d30c008c10a2889bfe1ffb5386421a7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看容器状态：   容器状态时create，就需要启动容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID     IMAGE        COMMAND          CREATED       STATUS            PORTS        NAMESb7c9cb0f2576     4cda95efb0e4     <span class="token string">"/portainer"</span>       <span class="token number">23</span> seconds ago    Created  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动容器（docker start 容器id）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker start b7c9cb0f2576</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <u>注意：如遇到这种启动失败的情况，请重启docker服务，命令（<code>systemctl restart docker</code>）:</u></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># docker start b7c9cb0f2576 </span>Error response from daemon: driver failed programming external connectivity on endpoint reverent_nobel <span class="token punctuation">(</span>47ffbf28f68d851c9488e4cd95c1f8a1b6949c705f5e082c1a4740e38760368d<span class="token punctuation">)</span>:  <span class="token punctuation">(</span>iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d <span class="token number">0</span>/0 --dport <span class="token number">9000</span> -j DNAT --to-destination <span class="token number">172.17</span>.0.2:9000 <span class="token operator">!</span> -i docker0: iptables: No chain/target/match by that name. <span class="token punctuation">(</span>exit status <span class="token number">1</span><span class="token punctuation">))</span>Error: failed to start containers: b7c9cb0f2576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、使用curl命令返回IP：9000的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment"># curl 192.168.100.144:9000</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span> ng-app<span class="token operator">=</span><span class="token string">"portainer"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Portainer<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"description"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"author"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"Portainer.io"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"row"</span> <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">&gt;</span>  Loading Portainer<span class="token punctuation">..</span>.  <span class="token operator">&lt;</span>i <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"fa fa-cog fa-spin"</span> <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"margin-left: 5px"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/i<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker管理："><a href="#Docker管理：" class="headerlink" title="Docker管理："></a>Docker管理：</h2><blockquote><p><em><strong>假设当前存在docker镜像mysqlatest，将该镜像上传至本地，然后将该镜像推送至本地仓库（假设仓库地址为192.168.100.100:5000)，从私有仓库中拉取mariadbv10.3.18镜像。运行mysql镜像，要求将内部3306端口映射到外部的13306端口，提供交互接口，后台运行，容器名为xmysql。最后将mysql镜像和创建的容器删除。依次提交操作命令。</strong></em></p></blockquote><p><code>docker load -i mysql:latest</code></p><p><code>docker push 192.168.100.100:5000/mysql:latest</code></p><p><code>docker pull mariadb:v10.3.18</code></p><p><code>docker run -itd –-name xmysql -p 13306:3306 mysql:latest /bin/bash</code></p><p><code>docker rmi mysql:latest</code></p><p><code>docker rm -f xmysql</code></p><h2 id="Docker管理2："><a href="#Docker管理2：" class="headerlink" title="Docker管理2："></a>Docker管理2：</h2><blockquote><p><em><strong>*假设当前存在docker镜像tomcatlatest，现在将tomcat镜像导出，导出名称为tomcat_images.tar，放在/media目录下,将以上操作命令填入答题框。*</strong></em></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 images<span class="token punctuation">]</span><span class="token comment">#docker save tomcat:latest &gt; /media/tomcat_images.tar</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Dockerfile编写："><a href="#Dockerfile编写：" class="headerlink" title="Dockerfile编写："></a>Dockerfile编写：</h2><blockquote><p><em><strong>*使用xserver1节点，新建httpd目录，然后编写Dockerfile文件，要求如下∶1)使用centos:latest镜像作为基础镜像;2)作者为xiandian ; 3)Dockerfile要求删除镜像的yum源，使用当前系统的local.repo源文件;4)安装http服务;5)暴露80端口。编写完毕后，构建的镜像名字叫httpd.v1.0的镜像。完成后将Dockerfile文件和镜像列表信息以文本形式提交到答题框。*</strong></em></p></blockquote><p>1、创建httpd目录,并进入目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># mkdir httpd</span><span class="token punctuation">[</span>root@xserver1 ~<span class="token punctuation">]</span><span class="token comment"># cd httpd/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、在目录中创建并编写Dockerfile文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># vi Dockerfile</span> FROM centos:latestMAINTAINER xiandianRUN <span class="token function">rm</span> -rf /etc/yum.repos.d/*ADD local.repo /etc/yum.repos.d/RUN yum -y <span class="token function">install</span> httpdEXPOSE <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入完成之后按键盘上的ESC键退出插入模式，最后一行没有出现– INSERT –就可以输入：<code>wq</code> （保存且退出）</p><p>3、先在当前目录httpd中创建一个名为local.repo文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># touch local.repo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1、 将RUN yum -y install httpd注释掉：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># vi Dockerfile </span> FROM centos:latestMAINTAINER xiandianRUN <span class="token function">rm</span> -rf /etc/yum.repos.d/*ADD local.repo /etc/yum.repos.d/<span class="token punctuation">\</span>#RUN yum -y <span class="token function">install</span> httpdEXPOSE <span class="token number">80</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#输入完成之后按键盘上的ESC键退出插入模式，最后一行没有出现– INSERT –就可以输入：<code>wq</code> （保存且退出）</p><p>因为centos:latest这个镜像是centos8最新版本，我们电脑的linux版本是centos7，可以用一下命令查看linux版本，如果版本是最新版本，就不需要注释掉RUN yum -y install httpd，直接进入构建镜像步骤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release </span>CentOS Linux release <span class="token number">7.2</span>.1511 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、构建镜像：</p><p>如遇到这种<strong>报错</strong>提示，启动docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># docker build -t httpd:v1.0 .</span>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现下面两行，就算构建镜像成功：</p><p><code>Successfully built 1a549714d06f</code></p><p><code>Successfully tagged httpd:v1.0</code></p><p>6、查看镜像列表信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xserver1 httpd<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG         IMAGE ID       CREATED        SIZEhttpd             v1.0         1a549714d06f     About a minute ago  209MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker安装：&quot;&gt;&lt;a href=&quot;#Docker安装：&quot; class=&quot;headerlink&quot; title=&quot;Docker安装：&quot;&gt;&lt;/a&gt;Docker安装：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;此题必会(本地yum源法)：&lt;strong&gt;使用xserv</summary>
      
    
    
    
    <category term="运维" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://a1561532803.github.io/yueguang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker复习——简答题篇</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/57113.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/57113.html</id>
    <published>2021-07-05T13:06:05.000Z</published>
    <updated>2021-07-10T09:59:29.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker复习——简答篇"><a href="#docker复习——简答篇" class="headerlink" title="docker复习——简答篇"></a>docker复习——简答篇</h1><p>注：（）内容为可替换内容/详细补充</p><h2 id="基础简答题"><a href="#基础简答题" class="headerlink" title="基础简答题"></a>基础简答题</h2><h3 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h3><p>答：docker是一个容器平台，可以将开发的项目连同环境一起打包，上线部署。</p><h3 id="Docker与虚拟机的不同点在哪里？"><a href="#Docker与虚拟机的不同点在哪里？" class="headerlink" title="Docker与虚拟机的不同点在哪里？"></a>Docker与虚拟机的不同点在哪里？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705184026311.png" alt="image-20210705184026311"></p><p>答：</p><p>介绍：</p><p>​    docker是一个容器平台，将应用打包进docker后，启动的容器使用沙箱机制，相互隔离，互不影响。</p><p>​    虚拟机是运行在操作系统中的一个虚拟系统。</p><p><strong>区别：</strong></p><p>​    1.启动时间：容器时秒级启动，虚拟机是分钟级启动。</p><p>​    2.轻量级：容器一般是m级别的大小，虚拟机时g级别的大小。</p><p>​    3.性能：容器内部的系统仅支持系统的正常运行，虚拟机则需要一套完整的系统。</p><h3 id="Docker容器有几种状态，分别是什么？"><a href="#Docker容器有几种状态，分别是什么？" class="headerlink" title="Docker容器有几种状态，分别是什么？"></a>Docker容器有几种状态，分别是什么？</h3><p><strong>答：四种状态；运行，已暂停，重新启动，退出</strong></p><p><em>拓展：docker容器的生命周期？</em></p><p>​    <em>答：一个docker容器从产生到运行部署大致分为如下三个状态：Dockerfile、Image、Contaniner。</em></p><p>​    <em>即一个镜像文件从产生、运行到停止的过程。</em></p><h3 id="写出Dockerfile中最常见四条指令，并指明含义？"><a href="#写出Dockerfile中最常见四条指令，并指明含义？" class="headerlink" title="写出Dockerfile中最常见四条指令，并指明含义？"></a>写出Dockerfile中最常见四条指令，并指明含义？</h3><p> 答：</p><p>​    From 指定基础镜像</p><p>​    RUN 运行指定命令</p><p>​    CMD 容器启动时运行的命令</p><p>​    COPY 拷贝文件到镜像</p><p>​    ADD 同copy，但多了解压缩的功能</p><p>​    VOLUME 指定挂载点，容器和宿主机的目录</p><p>​    EVN 设定容器内环境变量</p><h3 id="Docker镜像特点是什么？如何自定义镜像？"><a href="#Docker镜像特点是什么？如何自定义镜像？" class="headerlink" title="Docker镜像特点是什么？如何自定义镜像？"></a>Docker镜像特点是什么？如何自定义镜像？</h3><p>答：（1）Docker镜像就<strong>是一个只读的模板</strong>，容器<strong>在启动的时</strong>候<strong>创建一层可写层</strong>作为<strong>最上层</strong></p><p>（2）方法一：使用<strong>DockerFile直接创建自定义镜像</strong>，基本步骤分别为：编写Dockerfile文件、docker build 生成镜像、docker run 创建容器运行。</p><p>方法二：使用IDEA创建自定义镜像</p><p><em>拓展：启动后，可通过日志查询命令查看是否已启动完毕且成功。</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker logs -f 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Docker-数据卷有什么作用？创建数据卷的命令是？"><a href="#Docker-数据卷有什么作用？创建数据卷的命令是？" class="headerlink" title="Docker 数据卷有什么作用？创建数据卷的命令是？"></a>Docker 数据卷有什么作用？创建数据卷的命令是？</h3><p> <strong>答：容器的持久化、容器间继承与共享数据。</strong></p><p><strong>命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细补充：</p><p>​    Docker数据卷作用（特点）：</p><pre><code>1. 数据卷可在容器之间共享或重用数据2. 卷中的更改可以直接生效3. 数据卷中的更改不会包含在镜像的更新中4. 数据卷的生命周期一直持续到没有容器使用它为止</code></pre><p>创建数据卷的命令：</p><p>使用 -v 命令，也可以在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p><p>-v命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 带权限的-v命令： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>出于可移植和分享的考虑，<u>用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</u></p><p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p><p>使用file构建</p><p>重点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VOLUME<span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer"</span>,<span class="token string">"/dataVolumeContainer2"</span>,<span class="token string">"/dataVolumeContainer3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># volume test</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer1"</span>,<span class="token string">"/dataVolumeContainer2"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"finished,--------success1"</span>CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Docker仓库有哪些，它们的区别是什么？"><a href="#Docker仓库有哪些，它们的区别是什么？" class="headerlink" title="Docker仓库有哪些，它们的区别是什么？"></a>Docker仓库有哪些，它们的区别是什么？</h3><p> 答：分公有仓库与私有仓库</p><p>公有仓库：<strong>Docker Hub</strong>、时速云镜像仓库、网易云镜像服务、DaoCloud镜像市场、阿里云镜像库等</p><p> 私有仓库：用户自己在本地搭建私有Docker Register（最常用的就是registry、Harbor两种）</p><p>区别：公有仓库所有人都可以搜索和下载公共镜像，私有仓库只有私有用户才能查询和下载。</p><h3 id="什么是Docker-Swarm，其功能是什么？"><a href="#什么是Docker-Swarm，其功能是什么？" class="headerlink" title="什么是Docker Swarm，其功能是什么？"></a>什么是Docker Swarm，其功能是什么？</h3><p> 答：<strong>它是Docker的本机群集</strong>（Swarm 是docker公司原生的集群管理（编排）工具。）；<strong>它将Docker主机池转变为单个虚拟Docker主机</strong>（它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机）（把一组docker主机抽象为一个整体来管理。），Docker Swarm<strong>提供标准的Docker API</strong>，使得容器可以组成跨主机的子网网络。</p><p><em>拓展：Docker三剑客</em></p><p><em>Docker Machine、Docker Compose、Docker Swarm 并称 Docker 三剑客。</em></p><p><em>拓展：Do</em>cker swarm组成<br>    <em>Docker swarm节点类型两种：</em><br>      <em>1、manager 负责整个集群的管理，manager本身worker节点，但生产环境不推荐。manager节点一般奇数个，1、3、5</em><br>      2、worker 负责运行相应服务，即负责容器的创建。*</p><h3 id="什么是Docker-Compose，使用的步骤是什么"><a href="#什么是Docker-Compose，使用的步骤是什么" class="headerlink" title="什么是Docker Compose，使用的步骤是什么?"></a>什么是Docker Compose，使用的步骤是什么?</h3><p> 答：（1）<strong>Docker Compose是一个用来定义和运行复杂应用的Docker工具。</strong></p><p>使用Docker Compose不再需要使用shell脚本来启动容器，而使用服务编排的方式来管理容器。</p><p><strong>Docker Compose核心是通过一个YAML文件来管理多个Docker容器</strong>，接着就可以从配置中创建并启动所有服务。</p><p> （2）①定义要创建的应用，②创建容器的Dockerfile文件，③定义docker-compose脚本（创建docker-compose.yml文件，并在里面定义服务），④使用Compose构建并运行应用程序，⑤编辑compose文件以添加文件绑定挂载，⑥使用更新的compose文件重新构建和运行应用程序。</p><p> 脚本文件示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  web:    build: <span class="token punctuation">..</span>/    ports:     - <span class="token string">"5000:5000"</span>    volumes:     - <span class="token punctuation">..</span>/src:/opt/src  redis:    image: <span class="token string">"redis:3.0.7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个compose文件就定义了两个服务，即定义了web和redis两个容器。 </p><p>再通过volumes（卷）将主机上的项目目录（../src）挂载到容器中的/opt/src目录下，允许您即时修改代码，而无需重新构建映像。</p><p>web容器： </p><ul><li>使用当前docker-compose.yml文件所在目录的上级目录（compose_test/Dockerfile）中的Dockerfile构建映像。 </li><li>将容器上的暴露端口5000映射到主机上的端口5000。 我们使用Flask Web服务器的默认端口5000。<br>redis容器： </li><li>redis服务使用从Docker Hub提取的官方redis镜像3.0.7版本。</li></ul><p>最后一步命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Registry服务端、客户端如何配置？"><a href="#Registry服务端、客户端如何配置？" class="headerlink" title="Registry服务端、客户端如何配置？"></a>Registry服务端、客户端如何配置？</h3><p> <em>本题答案参考自<a href="https://blog.51cto.com/u_14306186/2514802">https://blog.51cto.com/u_14306186/2514802</a></em></p><p>答：准备两台docker服务器，dockerA创建registry私有仓库，dockerB做测试的客户端。</p><p>tips：本题主要记配置文件的代码</p><p>即docker A：<code>ExecStart=/usr/bin/dockerd    --insecure-registry 服务器IP地址:5000端口号</code></p><p>docker B： <code>ExecStart=/usr/bin/dockerd --insecure-registry 客户端IP地址:5000端口号</code></p><p>注：客户端一定要和服务器仓库ip一致 不然无法识别和上传 至于5000端口 应为registry默认5000端口</p><p>详细步骤：</p><p>docker A:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker pull registry:2              //下载registry:2的镜像</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2</span>//创建一个registry容器来运行registry服务；//-p：端口映射（前面是宿主机端口：后面是容器暴露的端口）；//-v：挂载目录（前面是宿主机的目录：后面的是容器的目录）自动创建宿主机的目录；//--restart<span class="token operator">=</span>always：随docker服务的启动而启动！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203256085.png" alt="image-20210705203256085"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker tag  centos:7 192.168.45.129:5000/centos:7  </span>//更改镜像名称注：私有仓库镜像的命名规则：192.168.45.129:5000/XXX（宿主机的IP:5000端口/镜像名称）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203355817.png" alt="image-20210705203355817"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/docker.service   //修改docker主配置文件</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd    --insecure-registry <span class="token number">192.168</span>.45.129:5000  //修改原本的配置文件添加不安全的仓库（--insecure-registry），地址是宿主机的IP地址与5000端口<span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload </span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker             //重新启动docker服务</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># docker push  192.168.45.129:5000/centos:7</span>//将重命名后的镜像上传到registry私有仓库<span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/_catalog             //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"centos"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerA ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/centos/tags/list         //查看镜像的详细信息</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"centos"</span>,<span class="token string">"tags"</span>:<span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dockerB：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># vim /usr/lib/systemd/system/docker.service </span>//修改docker的主配置文件 <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd --insecure-registry <span class="token number">192.168</span>.45.129:5000//添加内容与registry一致，指定registry私有仓库服务器的IP地址及端口<span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload </span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker            //重新启动docker服务</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/_catalog         //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"centos"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># curl 192.168.45.129:5000/v2/centos/tags/list     //查看私有仓库中的镜像</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"centos"</span>,<span class="token string">"tags"</span>:<span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@dockerB ~<span class="token punctuation">]</span><span class="token comment"># docker pull 192.168.45.129:5000/centos:7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210705203542638.png" alt="image-20210705203542638"></p><h3 id="集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？"><a href="#集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？" class="headerlink" title="集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？"></a>集群中时间同步的方式有哪两种？客户端使用什么命令查看时间是否同步成功？</h3><p>答：有chrony服务和ntp服务；chrony服务：在客户端节点执行<code>chronyc sources -v</code>，结果中包含*，则代表同步成功。如果结果中有？，则代表同步不成功，需要等待。ntp服务：执行<code>ntpstat</code>命令</p><p>NTP配置详细：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/ntp.conf           ntpdate server IP   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>重启ntpd服务。</em></p><p><em>跳跃同步，使用ntpdate不能开启ntpd服务</em></p><p>拓展：</p><p>搭建NTP时间服务器(服务端配置)</p><p><em>解释：自己搭建一台NTP服务器，然后其它机器同步这台NTP时间服务器上的时间，而NTP时间服务器同步公网上远程机器的时间，从而实现整套集群保持与北京时间同步。</em></p><p>安装ntp（NTP服务端的包名）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@m01 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">10.0</span>.0.61 <span class="token number">172.16</span>.1.61<span class="token punctuation">[</span>root@m01 ~<span class="token punctuation">]</span><span class="token comment"># yum install ntp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动ntpd服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@m01 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start ntpd</span><span class="token punctuation">[</span>root@m01 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable ntpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其它内网机器同步NTP时间服务器(172.16.1.61)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># hostname -I</span><span class="token number">172.16</span>.1.5 <span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># yum install ntpdate -y</span><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># date -s '20081024'</span><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># ntpdate 172.16.1.61</span><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># date</span>Fri Oct <span class="token number">19</span> <span class="token number">10</span>:35:35 CST <span class="token number">2018</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ntpd服务只要启动，自动会在后台为这台NTP服务器同步时间(可能需要等几分钟)，不需要我们手动操作，其它机器只需同步这台NTP服务器即可。</p><p>命令：<code>ntpstat</code>，查看是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ntpstat</span>unsynchronised  <span class="token function">time</span> server re-starting   polling server every <span class="token number">8</span> s <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>chrony配置详细：<br>     1、 server端：<br>      （1）安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> chrony<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​      （2）修改配置文件 <code>vi /etc/chrony.conf</code><br>​            ①将原有server开头的注释掉<br>​            ②在文件最后追加以下内容<br>​                    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> stratum <span class="token number">10</span> //不同步外部时钟源                    server master iburst//自己做时钟源                    allow all //允许所有客户端同步我这个时钟源，使用我做时钟源服务器     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）重启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart chronyd  <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     2、client端<br>​         （1）安装包<code>yum install chrony</code><br>​         （2）修改配置文件 ``vi /etc/chrony.conf<code>​               ①将原有server开头的注释掉 ​               ②在文件最后追加以下内容 ​                 </code>server 10.1.0.10 iburst  //配置10.1.0.10<code>为时钟源 ​           （3）重启服务 ​                 </code>systemctl restart chronyd  &amp;&amp; systemctl enable chronyd`</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker复习——简答篇&quot;&gt;&lt;a href=&quot;#docker复习——简答篇&quot; class=&quot;headerlink&quot; title=&quot;docker复习——简答篇&quot;&gt;&lt;/a&gt;docker复习——简答篇&lt;/h1&gt;&lt;p&gt;注：（）内容为可替换内容/详细补充&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="运维" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://a1561532803.github.io/yueguang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的个人博客</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/21396.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/21396.html</id>
    <published>2021-07-04T09:02:44.000Z</published>
    <updated>2021-07-05T08:09:53.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于内容"><a href="#关于内容" class="headerlink" title="关于内容"></a>关于内容</h1><p>以技术博客方向为主，记录自己踩过的坑，考前抱佛脚恶补的知识，分享前辈们的经验，收集到的资源，偶尔备份一些喜欢的句子、读书笔记、生活小技巧等等。</p><p>你可以将本站当做一个资源库来使用。</p><p>欢迎各位大佬们与我交换友链qwq。</p><h1 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h1><h2 id="博客搭建框架"><a href="#博客搭建框架" class="headerlink" title="博客搭建框架"></a>博客搭建框架</h2><p>hexo：</p><p>是一个基于nodejs 的静态博客网站生成器，作者是来自台湾的 Tommy Chen</p><p>安装简单快速、资源丰富，文档对中国朋友很友好，强推！</p><p>本站即是使用该框架搭建！<br><a href="https://hexo.io/zh-cn/">前往Hexo</a></p><p>Wordpress：</p><p>使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。</p><p>老牌建站系统，社区强大，对seo搜索引擎友好，适合DIY，静态化较差，使用的谷歌字体、头像经常被墙，访问加载速度慢，不能一键更新。</p><p><a href="https://wordpress.org/download/">前往Wordpress</a></p><p>Jekyll：</p><p>是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如discuz。<br><a href="http://jekyllcn.com/">前往Jekyll</a></p><p>Hugo：</p><p>Golang语言开发</p><p>特点：</p><p>1、完全跨平台支持，可以运行在 Mac OS X, Linux, Windows, 以及更多!</p><p>2、安装方便 Installation</p><p>3、本地调试 Usage 时通过 LiveReload 自动即时刷新页面。</p><p>4、完全的皮肤支持。</p><p>5、可以部署在任何的支持 HTTP 的服务器上。<br><a href="https://github.com/gohugoio/hugo/releases">前往Hugo</a></p><p>pelican：</p><p>是一个法国人用 python 写的用于生成静态页面的程序，支持：</p><p>1、博客文章和页面</p><p>2、使用外部服务 Disqus 实现的评论功能</p><p>3、支持主题</p><p>4、可对文章生成 PDF 文档</p><p>5、支持多语言发布文章</p><p>6、Atom/RSS feeds</p><p>7、代码着色</p><p>8、使用 LESS CSS (optional)</p><p>9、可导入 WordPress, Dotclear 或者 RSS feeds</p><p>10、集成外部功能 Twitter, Google Analytics, etc. (optional)<br><a href="https://github.com/getpelican/pelican">前往pelican</a></p><p>建站的框架很多，选择喜欢的风格即可。</p><h2 id="域名查询与购买"><a href="#域名查询与购买" class="headerlink" title="域名查询与购买"></a>域名查询与购买</h2><p>阿里云 万网：<a href="https://wanwang.aliyun.com/">前往查询</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于内容&quot;&gt;&lt;a href=&quot;#关于内容&quot; class=&quot;headerlink&quot; title=&quot;关于内容&quot;&gt;&lt;/a&gt;关于内容&lt;/h1&gt;&lt;p&gt;以技术博客方向为主，记录自己踩过的坑，考前抱佛脚恶补的知识，分享前辈们的经验，收集到的资源，偶尔备份一些喜欢的句子、读书笔记</summary>
      
    
    
    
    <category term="web开发" scheme="https://a1561532803.github.io/yueguang.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="分享" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
