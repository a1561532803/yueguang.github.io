<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在月光下滑坡</title>
  
  <subtitle>在月光下滑坡</subtitle>
  <link href="https://a1561532803.github.io/yueguang.github.io/atom.xml" rel="self"/>
  
  <link href="https://a1561532803.github.io/yueguang.github.io/"/>
  <updated>2021-07-17T20:29:19.584Z</updated>
  <id>https://a1561532803.github.io/yueguang.github.io/</id>
  
  <author>
    <name>在月光下滑坡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始学Unity——基本操作（1）</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/16191.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/16191.html</id>
    <published>2021-07-17T16:04:00.000Z</published>
    <updated>2021-07-17T20:29:19.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始学Unity（1）"><a href="#从零开始学Unity（1）" class="headerlink" title="从零开始学Unity（1）"></a>从零开始学Unity（1）</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>打开unity hub，项目栏里，右上角选择新建，创建一个2D项目，名字随便起。之后单机创建，创建过程会比较慢。<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717165420908.png" alt="image-20210717165420908"></p><p><strong>拓展：打开别人的项目</strong></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717165858226.png" alt="image-20210717165858226"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170024809.png" alt="image-20210717170024809"></p><p>选中要导入的项目即可，然后在项目列表里面双击该项目即可打开。</p><p><strong>移除项目：</strong></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170137422.png" alt="image-20210717170137422"></p><p>注：移除后项目还在，只是不显示在这个列表里。</p><p><em>批注：屏幕越大，cpu越快，效果越好。</em></p><h2 id="编辑器界面"><a href="#编辑器界面" class="headerlink" title="编辑器界面"></a>编辑器界面</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170409916.png" alt="image-20210717170409916"></p><p>注：我的界面自己做了修改，一般的位置不是这样。</p><p>想要恢复默认布局，可以单机顶部的window选项，选择layouts→Default</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170739604.png" alt="image-20210717170739604"></p><p>main Camera主摄像机，就是Scene界面的摄像机。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717170550951.png" alt="image-20210717170550951"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>场景 <font color="cornflowerblue">Scene</font>，就是一个游戏里的场景/关卡</p><p>例子：小猪佩奇</p><p>场景1：家中</p><p>场景2：户外</p><p>显然，该游戏/动画中，至少有两个场景</p><h3 id="2、创建场景"><a href="#2、创建场景" class="headerlink" title="2、创建场景"></a>2、创建场景</h3><p>当创建项目时，默认地会创建一个场景<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171334133.png" alt="image-20210717171334133"></p><p>Assets 资产/资源，项目里的所有资源都放在Assets目录下面，在Scenes里面已经默认创建了一个场景。</p><p><strong>添加新场景：</strong></p><p>在project栏，Scenes目录下，单机右键，选择Create→Scene<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171657344.png" alt="image-20210717171657344"></p><p>如何删除？</p><p>右键要删除的场景，选择delete即可删除。</p><h2 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717171912215.png" alt="image-20210717171912215"></p><p>演示：将准备好的图片文件添加到项目中</p><p>方法一：直接将图片拖到Assets目录下</p><p>方法二：</p><p>右键<font color="cornflowerblue">Show in Explorer</font>，观察素材文件（能直接打开素材锁在文件）</p><p>-素材文件会拷贝到<font color="cornflowerblue">Assets</font>目录下</p><p>-每一条素材/目录，对应一个<font color="cornflowerblue">*.meta</font>文件</p><p>注意：<img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210717173006415.png" alt="image-20210717173006415"></p><h2 id="场景视图"><a href="#场景视图" class="headerlink" title="场景视图"></a>场景视图</h2><h3 id="1、场景中的几个操作"><a href="#1、场景中的几个操作" class="headerlink" title="1、场景中的几个操作"></a>1、场景中的几个操作</h3><p>鼠标中键（滚轮）：放大/缩小视图</p><p>鼠标右键拖拽：平移视图</p><h3 id="2、一个网格对应多大？"><a href="#2、一个网格对应多大？" class="headerlink" title="2、一个网格对应多大？"></a>2、一个网格对应多大？</h3><p>（一般是由团队规定的），对应屏幕的话一般是100像素</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035056472.png" alt="image-20210718035056472"></p><p>只有白框里的才是玩家可见的范围（也就是Game窗口）</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035224243.png" alt="image-20210718035224243"></p><h2 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h2><h3 id="1、游戏对象是什么？"><a href="#1、游戏对象是什么？" class="headerlink" title="1、游戏对象是什么？"></a>1、游戏对象是什么？</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718035305748.png" alt="image-20210718035305748"></p><h3 id="2、移动视图与一些简单操作"><a href="#2、移动视图与一些简单操作" class="headerlink" title="2、移动视图与一些简单操作"></a>2、移动视图与一些简单操作</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040359253.png" alt="image-20210718040359253"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040427919.png" alt="image-20210718040427919"></p><p>拖动这个小方块可以随意移动元素位置。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040517593.png" alt="image-20210718040517593"></p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><h3 id="1、坐标单位"><a href="#1、坐标单位" class="headerlink" title="1、坐标单位"></a>1、坐标单位</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040756785.png" alt="image-20210718040756785"></p><h3 id="2、Z坐标"><a href="#2、Z坐标" class="headerlink" title="2、Z坐标"></a>2、Z坐标</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040837358.png" alt="image-20210718040837358"></p><p>单机此处，2D和3D是可以自由切换的。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718040951516.png" alt="image-20210718040951516"></p><p>2D所有的对象都在一个平面进行，Z坐标也都是0。</p><p>3D视图导航器<font color="cornflowerblue">Gizmo</font>，较难操作，暂不介绍。</p><h2 id="游戏对象的操作"><a href="#游戏对象的操作" class="headerlink" title="游戏对象的操作"></a>游戏对象的操作</h2><h3 id="1、旋转效果"><a href="#1、旋转效果" class="headerlink" title="1、旋转效果"></a>1、旋转效果</h3><p>顶部导航的第三个工具键，修改该选项意为逆时针旋转90°。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041249150.png" alt="image-20210718041249150"></p><p>可以自己调，也可以在inspector自己设置（其他效果也可以这样设置）。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041436910.png" alt="image-20210718041436910"></p><h3 id="2、缩放效果"><a href="#2、缩放效果" class="headerlink" title="2、缩放效果"></a>2、缩放效果</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041510920.png" alt="image-20210718041510920"></p><h3 id="3、矩形工具"><a href="#3、矩形工具" class="headerlink" title="3、矩形工具"></a>3、矩形工具</h3><p>顶部导航的第五个工具。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041526857.png" alt="image-20210718041526857"></p><h3 id="4、要点与细节"><a href="#4、要点与细节" class="headerlink" title="4、要点与细节"></a>4、要点与细节</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041644409.png" alt="image-20210718041644409"></p><h2 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h2><h3 id="1、摄像机的参数"><a href="#1、摄像机的参数" class="headerlink" title="1、摄像机的参数"></a>1、摄像机的参数</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718041948003.png" alt="image-20210718041948003"></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042142690.png" alt="image-20210718042142690"></p><p>宽度是由具体的显示窗口决定的，常见的窗体比例为16:9。</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042248909.png" alt="image-20210718042248909"></p><h3 id="2、要点与细节"><a href="#2、要点与细节" class="headerlink" title="2、要点与细节"></a>2、要点与细节</h3><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210718042339409.png" alt="image-20210718042339409"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从零开始学Unity（1）&quot;&gt;&lt;a href=&quot;#从零开始学Unity（1）&quot; class=&quot;headerlink&quot; title=&quot;从零开始学Unity（1）&quot;&gt;&lt;/a&gt;从零开始学Unity（1）&lt;/h1&gt;&lt;h2 id=&quot;新建项目&quot;&gt;&lt;a href=&quot;#新建项目&quot;</summary>
      
    
    
    
    <category term="Unity" scheme="https://a1561532803.github.io/yueguang.github.io/categories/Unity/"/>
    
    
    <category term="游戏" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="U3D" scheme="https://a1561532803.github.io/yueguang.github.io/tags/U3D/"/>
    
  </entry>
  
  <entry>
    <title>游戏行业报告解析</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/21128.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/21128.html</id>
    <published>2021-07-13T13:00:05.000Z</published>
    <updated>2021-07-17T20:25:53.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏行业报告解析——U3D方向"><a href="#游戏行业报告解析——U3D方向" class="headerlink" title="游戏行业报告解析——U3D方向"></a>游戏行业报告解析——U3D方向</h1><blockquote><p>课程来自：vipskill</p></blockquote><h2 id="行业报告总结"><a href="#行业报告总结" class="headerlink" title="行业报告总结"></a>行业报告总结</h2><p>1、中国游戏全球化、工业化进程开始，未来几年会保持高速增长</p><p>2、自创IP越来越重要，同质化玩法单一的问题越来越明显，独立游戏会成为创意游戏很大的补充</p><p>3、RPG类可以在求职时加分</p><p>拓展：</p><p>VR可能是未来的大趋势，但现在受限严重。</p><h2 id="U3D工程师职业发展四象限"><a href="#U3D工程师职业发展四象限" class="headerlink" title="U3D工程师职业发展四象限"></a>U3D工程师职业发展四象限</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713205424056.png" alt="image-20210713205424056"></p><p>如：程序向转的TA就是高级开发阶段</p><p>主程往往对应其他项目岗位开发的部门经理，有些公司主程就是总监</p><h2 id="U3D工程师职级体系"><a href="#U3D工程师职级体系" class="headerlink" title="U3D工程师职级体系"></a>U3D工程师职级体系</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713205713924.png" alt="image-20210713205713924"></p><p><strong>实习阶段：</strong></p><p>实习经验可以提高毕业后的求职成功率。</p><p>游戏公司实习经历分享：看主程的UI框架文档，看了两个星期，之后独立完成一个功能模块。</p><p><strong>高级阶段：</strong></p><p>知道原理就够了，不要重复造轮子。</p><p>有些高级工程师的能力是高于主程的。</p><p><strong>主程：</strong></p><p>参与过很多项目的全流程开发。</p><p>有很强的管理能力。</p><p><strong>技术总监：</strong></p><p>一般懂游戏，但不</p><p>参与游戏开发，不需要写代码。</p><p>需要在技术、管理能力上都非常出众。</p><h2 id="U3D行业工资表（2018年-2019年）"><a href="#U3D行业工资表（2018年-2019年）" class="headerlink" title="U3D行业工资表（2018年-2019年）"></a>U3D行业工资表（2018年-2019年）</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713210812458.png" alt="image-20210713210812458"></p><p>除了初级和实习，其余阶段平均上涨30%。</p><p>游戏公司内的功能一般不是指单一功能，而是一整个体系。</p><p>不要抱着掌握所有东西的想法，至少在概念上面熟知即可。</p><p>对于U3D工程师来说，shader只是加分项目，不是必学的。</p><h2 id="U3D学习阶段"><a href="#U3D学习阶段" class="headerlink" title="U3D学习阶段"></a>U3D学习阶段</h2><p>p1阶段</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713211515174.png" alt="image-20210713211515174"></p><p>数学决定天花板 : (，计算机基础大厂考，中小厂不会问。</p><p>开发语言的Lua很重要，稍微有点规模的游戏公司都是用Lua。</p><p><strong>热更新</strong>：不停机更新（意为设备是烫的，没关机），在游戏里面指不需要去商店下载客户端。</p><p>一般是游戏资源更新（非代码以外的东西都叫游戏资源），本质上没有很难，不需要lua就能实现，技术点在于资源管理，难点在于逻辑更新。</p><p>C#和lua可以互相通信（互相调用对方的函数，主要是通过C#来调用）用C#当壳，去读Lua的string内容，市场上目前使用该方式解决热更新问题。</p><p>技能掌握（部分图）</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713213423873.png" alt="image-20210713213423873"></p><h2 id="实习、校招、社招"><a href="#实习、校招、社招" class="headerlink" title="实习、校招、社招"></a>实习、校招、社招</h2><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210713213515178.png" alt="image-20210713213515178"></p><p>校招：</p><p>算法熟练特指基础算法、尤其是排序部分。</p><p>其他方向的算法能听懂就行，如果让你手写二叉树，可能是不打算招你了。</p><p>如果作品选型是单机游戏，推荐选ARPG（动作角色扮演游戏），网络部分推荐选MMORPG（大型多人在线角色扮演游戏）</p><p>热更新部分在会写Lua就够了。</p><p>游戏行业的招聘门槛在上升，校招的价格会比较便宜。</p><p>竞争对手是和自己一样经验的人。</p><p>有没有商业项目在面试官眼里天壤之别。</p><p>实在没项目经验，可以去卡牌类的游戏公司过渡。</p><p>刚入行推荐先从UI开始。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;游戏行业报告解析——U3D方向&quot;&gt;&lt;a href=&quot;#游戏行业报告解析——U3D方向&quot; class=&quot;headerlink&quot; title=&quot;游戏行业报告解析——U3D方向&quot;&gt;&lt;/a&gt;游戏行业报告解析——U3D方向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;课程来自：</summary>
      
    
    
    
    <category term="行业分析" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%A1%8C%E4%B8%9A%E5%88%86%E6%9E%90/"/>
    
    <category term="Unity" scheme="https://a1561532803.github.io/yueguang.github.io/categories/%E8%A1%8C%E4%B8%9A%E5%88%86%E6%9E%90/Unity/"/>
    
    
    <category term="游戏" scheme="https://a1561532803.github.io/yueguang.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="U3D" scheme="https://a1561532803.github.io/yueguang.github.io/tags/U3D/"/>
    
  </entry>
  
  <entry>
    <title>typora辅助工具——快捷标注颜色</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/7249.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/7249.html</id>
    <published>2021-07-10T09:30:05.000Z</published>
    <updated>2021-07-10T10:02:01.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typora辅助工具——快捷标注颜色，添加标签"><a href="#typora辅助工具——快捷标注颜色，添加标签" class="headerlink" title="typora辅助工具——快捷标注颜色，添加标签"></a>typora辅助工具——快捷标注颜色，添加标签</h1><blockquote><p>本文参考自leqaq</p><p>原文地址：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1447470&amp;ctid=2336">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1447470&amp;ctid=2336</a></p></blockquote><h2 id="安装AutoHotkey"><a href="#安装AutoHotkey" class="headerlink" title="安装AutoHotkey"></a>安装AutoHotkey</h2><p>Typora 是一款支持实时预览的 Markdown 文本编辑器，功能强大，页面美观，但在Typora中，想要加颜色或者加大某个字体很不方便，只能使用 HTML 标签去包裹内容再去写入css属性，这样就显得很麻烦。</p><p>比如我给一个字体增加颜色，得这样加上font标签才会生效</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210710174425002.png" alt="image-20210710174425002"></p><p><font color="red" font-size="30px">这是一个测试</font></p><p>↑这是刚才代码的效果</p><p>使用 font 标签要写没这么长一串，也太麻烦了，所以找了个简便办法，就是——<strong>AutoHotkey</strong></p><p>AutoHotkey是一款界面简洁的功能强大的热键脚本语言，可以将所有的键盘操作和鼠标操作自动化。</p><p>首先得去官网安装一下，安装包很小。</p><p>官网：<a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/image-20210710174624451.png" alt="image-20210710174624451"></p><p>下载好后进行安装，安装成功后就可以开始编写脚本了！</p><h2 id="编写ahk脚本"><a href="#编写ahk脚本" class="headerlink" title="编写ahk脚本"></a>编写ahk脚本</h2><p>新建一个 txt 文本文件，添加以下内容，之后将后缀修改为.ahk</p><pre class="line-numbers language-none"><code class="language-none">;热键标记; !感叹号代表Alt键; # 井号代表 Windows 键; ^ 上三角号代表 Ctrl键; + 加号代表 Shift 键; 执行; ::代表按下前面快捷键后会执行后面的命令。; Typora; 快捷增加字体颜色; SendInput {Text} 解决中文输入法问题#IfWinActive ahk_exe Typora.exe{    ; alt+0 红色    !0::addFontColor("black")    ; alt+1 红色    !1::addFontColor("red")    ; alt+1 橙色    !2::addFontColor("orange")      ; alt+3 浅蓝色    !3::addFontColor("cornflowerblue")     ; alt+4 绿色    !4::addFontColor("green")     ; alt+5 青色    !5::addFontColor("cyan")     ; alt+6 紫色    !6::addFontColor("purple")     ; alt+7 黄色    !7::addFontColor("yellow")    ; 增加 字体框    !f::addFont()    ;增加 div 标签    !d::addDiv()    ;增加 ` 号    !`::addPunctuation()}; 快捷增加字体颜色addFontColor(color){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;font color='%color%'&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        ; Typora 在这不会自动补充        SendInput {TEXT}&lt;/font&gt;         ; 清空剪切板        clipboard := ""     }else{        ; Typora中自动补全标签        SendInput {TEXT}&lt;/     }}; 添加 font 标签addFont(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;font style="color:;font-size:"&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        SendInput {TEXT}&lt;/font&gt; ; Typora 在这不会自动补充          clipboard := "" ; 清空剪切板    }else{        SendInput {TEXT}&lt;/ ; Typora中自动补全标签    } }    ; 添加 Div 标签addDiv(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}&lt;div style=""&gt;    SendInput {ctrl down}v{ctrl up} ; 粘贴    If(clipboard = ""){        SendInput {TEXT}&lt;/div&gt; ; Typora 在这不会自动补充          clipboard := "" ; 清空剪切板    }else{        SendInput {TEXT}&lt;/ ; Typora中自动补全标签    }}addPunctuation(){    clipboard := "" ; 清空剪切板    Send {ctrl down}c{ctrl up} ; 复制    SendInput {TEXT}``    SendInput {ctrl down}v{ctrl up} ; 粘贴    SendInput {TEXT}``}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述内容复制进去，可以自己进行修改，注释也很清除，有编程基础的可以自己进行修改。</p><p>保存之后可以直接选择.ahk文件，右键点击 <code>run script</code>，也可以使用 AutoHotkey 的 convert .ahk to .exe 将文件转为 exe 程序方便使用。</p><p>之后当typora运行时，右键选中需要标注颜色的内容</p><ul><li>按下 alt+数字键 0 - 7 可以添加颜色，具体颜色看注释</li><li><code>alt + d</code> 添加 div 标签，方便做内容居中 <div style=""></div></li><li><code>alt + f </code>添加 font 标签，方便自定义颜色和字体大小 <font style="color:;font-size:"></font></li><li><code>alt + </code> `给内容加上标记，也是加上一种颜色（对应格式→代码）</li></ul><p>使用快捷键的时候会有时有卡住输入不了内容的情况，可以使用 <code>alt + tab</code>切换一下界面就好了。</p><p>效果图：</p><p><img src="https://gitee.com/zygxhp/picture/raw/master/img/152835oj88ubunzv8jjubn.gif" alt="img"></p><h2 id="批注"><a href="#批注" class="headerlink" title="批注"></a>批注</h2><blockquote><p>AutoHotkey 是一个自由、开源的宏生成器和自动化软件工具，它让用户能够自动执行重复性任务。AutoHotkey 可以修改任何应用程序的用户界面（例如，把默认的 Windows 按键控制命令替换为 Emacs 风格）。它是由定制的脚本语言驱动，旨在提供键盘快捷键或热键。——wikipedia</p></blockquote><p>简单理解为一种自动化脚本语言，它可以帮助我们完成大量重复性的工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;typora辅助工具——快捷标注颜色，添加标签&quot;&gt;&lt;a href=&quot;#typora辅助工具——快捷标注颜色，添加标签&quot; class=&quot;headerlink&quot; title=&quot;typora辅助工具——快捷标注颜色，添加标签&quot;&gt;&lt;/a&gt;typora辅助工具——快捷标注颜</summary>
      
    
    
    
    <category term="Markdown" scheme="https://a1561532803.github.io/yueguang.github.io/categories/Markdown/"/>
    
    
    <category term="typora" scheme="https://a1561532803.github.io/yueguang.github.io/tags/typora/"/>
    
    <category term="AutoHotkey" scheme="https://a1561532803.github.io/yueguang.github.io/tags/AutoHotkey/"/>
    
  </entry>
  
  <entry>
    <title>爬虫——基础篇</title>
    <link href="https://a1561532803.github.io/yueguang.github.io/posts/13804.html"/>
    <id>https://a1561532803.github.io/yueguang.github.io/posts/13804.html</id>
    <published>2021-07-10T09:20:05.000Z</published>
    <updated>2021-07-10T09:22:36.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：ZY.Zhang</p><p>本文档基于<a href="https://www.bilibili.com/video/BV1Yh411o7Sz?p=1">B站视频教程</a></p></blockquote><h1 id="一、爬虫基础简介"><a href="#一、爬虫基础简介" class="headerlink" title="一、爬虫基础简介"></a>一、爬虫基础简介</h1><h2 id="1-爬虫简介"><a href="#1-爬虫简介" class="headerlink" title="1. 爬虫简介"></a>1. 爬虫简介</h2><p><strong>什么是爬虫：</strong>通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。</p><h2 id="2-爬虫合法性探究"><a href="#2-爬虫合法性探究" class="headerlink" title="2. 爬虫合法性探究"></a>2. 爬虫合法性探究</h2><p><strong>爬虫究竟是合法还是违法的？</strong></p><ul><li>在法律中是不被禁止的</li><li>具有违法风险</li><li>善意爬虫 &amp; 恶意爬虫</li></ul><p><strong>爬虫带来的风险可以体现在如下两个方面：</strong></p><ol><li>爬虫干扰了被访问网站的正常运营</li><li>爬虫抓取了受到法律保护的特定类型的数据或信息</li></ol><p><strong>如何在编写使用的过程中避免进入局子的厄运？</strong></p><ul><li>时常优化自己的程序，避免干扰被访问网站的正常运行</li><li>在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私或者商业机密等敏感内容，需要及时停止爬取或者传播。</li></ul><h2 id="3-爬虫初试深入"><a href="#3-爬虫初试深入" class="headerlink" title="3. 爬虫初试深入"></a>3. 爬虫初试深入</h2><p><strong>爬虫在使用场景中的分类：</strong></p><ul><li><p><strong>通用爬虫：</strong>抓取系统的重要组成部分。抓取的是一整张页面数据。</p></li><li><p><strong>聚焦爬虫：</strong>是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p></li><li><p><strong>增量式爬虫：</strong>监测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</p></li></ul><p><strong>爬虫的矛与盾：</strong></p><ul><li><p><strong>反爬机制：</strong>门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p></li><li><p><strong>反反爬策略：</strong>爬虫程序，可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p></li></ul><p><strong>robots.txt协议：</strong>君子协议。规定了网站中那些数据可以被爬虫爬取，那些数据不允许被爬取。</p><p>例如：<a href="https://www.tabao.com/robots.txt">www.tabao.com/robots.txt</a></p><h2 id="4-http-amp-https协议"><a href="#4-http-amp-https协议" class="headerlink" title="4. http&amp;https协议"></a>4. http&amp;https协议</h2><h3 id="（1）http协议"><a href="#（1）http协议" class="headerlink" title="（1）http协议"></a>（1）http协议</h3><p><strong>概念：</strong>就是服务器和客户端进行数据交互的一种形式。</p><p><strong>常用请求头信息：</strong></p><ul><li><strong>User-Agent：</strong>请求载体的身份标识</li><li><strong>Connection：</strong>请求完毕后，是断开连接还是保持连接</li></ul><p><strong>常用响应头信息：</strong></p><ul><li><strong>Content-Type：</strong>服务器响应回客户端的数据类型</li></ul><h3 id="（2）https协议"><a href="#（2）https协议" class="headerlink" title="（2）https协议"></a>（2）https协议</h3><p><strong>概念：</strong>安全的超文本传输协议</p><h3 id="（3）加密方式"><a href="#（3）加密方式" class="headerlink" title="（3）加密方式"></a>（3）加密方式</h3><ul><li><p><strong>对称秘钥加密</strong></p><p>  <img src="../PythonProjects/Typora_image/image-20210224142616421.png" alt="image-20210224142616421"></p></li><li><p><strong>非对称秘钥加密</strong></p><p>  存在缺点：第一个是如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持，只要是发送秘钥，就有可能有被挟持的风险；第二个是非对称秘钥加密方式效率比较低，处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度。</p><p>  <img src="../PythonProjects/Typora_image/image-20210224142728145.png" alt="image-20210224142728145"></p></li><li><p><strong>证书秘钥加密：</strong></p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起；</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li></ul><p>  <img src="../PythonProjects/Typora_image/image-20210224143442798.png" alt="image-20210224143442798"></p></li></ul><hr><h1 id="二、requests模块基础"><a href="#二、requests模块基础" class="headerlink" title="二、requests模块基础"></a>二、requests模块基础</h1><h2 id="1-requests第一血"><a href="#1-requests第一血" class="headerlink" title="1. requests第一血"></a>1. requests第一血</h2><p><strong>requests模块：</strong>Python中原生的一款基于网络请求的模块，功能非常强大，简单便捷，效率极高。</p><p><strong>作用：</strong>模拟浏览器发请求。</p><p><strong>如何使用：（requests模块的编码流程）</strong></p><ul><li>指定 url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><p><strong>环境的安装：</strong><code>pip install requests</code></p><p><strong>实战编码：</strong></p><ul><li>需求：爬取搜狗首页的数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#step1 指定url</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/'</span>    <span class="token comment">#step2 发起请求</span>    <span class="token comment">#get方法会返回一个响应对象</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span>    <span class="token comment">#step3 获取响应数据，text返回的是字符串形式的响应数据</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token comment">#step4 持久化存储</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./sogou.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'爬取数据结束！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-requests巩固深入案例介绍"><a href="#2-requests巩固深入案例介绍" class="headerlink" title="2. requests巩固深入案例介绍"></a>2. requests巩固深入案例介绍</h2><h3 id="（1）简易网页采集器"><a href="#（1）简易网页采集器" class="headerlink" title="（1）简易网页采集器"></a>（1）简易网页采集器</h3><ul><li>UA检测</li><li>UA伪装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#UA：User-Agent请求载体的身份标识</span><span class="token triple-quoted-string string">'''UA检测：门户网站的服务器会监测对应请求的载体身份标识，如果检测到请求载体身份标识是某一款浏览器,说明该请求时一个正常的请求；但是，如果检测到请求的载体身份不是基于某一款浏览器的，则表示该请求为不正常请求（爬虫）,则服务器很有可能拒绝该次请求'''</span><span class="token comment">#UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器，躲过UA检测</span><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#UA伪装：将对应的User-Agent封装到一个字典中</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment">#step1 指定url query</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/web'</span>    <span class="token comment">#处理url携带的参数 封装到字典中</span>    kw <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Enter a word:'</span><span class="token punctuation">)</span>    param <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'query'</span><span class="token punctuation">:</span>kw    <span class="token punctuation">}</span>    <span class="token comment">#step2 对指定的url发起请求，对应的url是携带参数的，并且处理过程中处理了参数</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>params <span class="token operator">=</span> param<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    <span class="token comment">#step3</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment">#step4</span>    fileName <span class="token operator">=</span> kw <span class="token operator">+</span> <span class="token string">'.html'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'保存成功！！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）破解百度翻译"><a href="#（2）破解百度翻译" class="headerlink" title="（2）破解百度翻译"></a>（2）破解百度翻译</h3><ul><li>post请求（携带了参数）</li><li>响应数据是一组json数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#step1 指定URL</span>    post_url <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/sug'</span>        <span class="token comment">#step2 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>        <span class="token comment">#step3 post请求参数处理（同get请求类似）</span>    word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Enter a word:\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'kw'</span><span class="token punctuation">:</span>word    <span class="token punctuation">}</span>        <span class="token comment">#step4 请求发送</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> post_url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        <span class="token comment">#step5 获取响应数据:json()方法返回的是obj  (如果确认响应数据是json类型--&gt;通过Content-Type分辨，才可以直接用json方法)</span>    dict_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dict_obj<span class="token punctuation">)</span>        <span class="token comment">#step6 持久化存储</span>    fileName <span class="token operator">=</span> word <span class="token operator">+</span> <span class="token string">'.json'</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dict_obj<span class="token punctuation">,</span>fp <span class="token operator">=</span> fp<span class="token punctuation">,</span>ensure_ascii <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）豆瓣电影"><a href="#（3）豆瓣电影" class="headerlink" title="（3）豆瓣电影"></a>（3）豆瓣电影</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list'</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'24'</span><span class="token punctuation">,</span>        <span class="token string">'interval_id'</span><span class="token punctuation">:</span><span class="token string">'100:90'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'start'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment">#从库中的第几部电影去取</span>        <span class="token string">'limit'</span><span class="token punctuation">:</span><span class="token string">'20'</span><span class="token comment">#一次取出的个数</span>    <span class="token punctuation">}</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>params <span class="token operator">=</span> param<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    list_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./douban.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list_data<span class="token punctuation">,</span>fp <span class="token operator">=</span> fp<span class="token punctuation">,</span>ensure_ascii <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-作业—肯德基餐厅查询"><a href="#3-作业—肯德基餐厅查询" class="headerlink" title="3. 作业—肯德基餐厅查询"></a>3. 作业—肯德基餐厅查询</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    post_url <span class="token operator">=</span> <span class="token string">'https://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'</span>    keyword <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要查询的城市：'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'cname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'pid'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'keyword'</span><span class="token punctuation">:</span> keyword<span class="token punctuation">,</span>        <span class="token string">'pageindex'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'10'</span>    <span class="token punctuation">}</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> post_url<span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    <span class="token comment"># page_text = response.text</span>    <span class="token comment"># fileName = keyword + '.html'</span>    <span class="token comment"># with open(fileName, 'w', encoding= 'utf-8') as fp:</span>    <span class="token comment">#     fp.write(page_text)</span>    <span class="token comment"># print(fileName, 'Over!')</span>    <span class="token comment"># 直接打印出来</span>    page <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">dict</span> <span class="token keyword">in</span> page<span class="token punctuation">[</span><span class="token string">'Table1'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        StoreName <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'storeName'</span><span class="token punctuation">]</span>        address <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'addressDetail'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'StoreName:'</span> <span class="token operator">+</span> StoreName<span class="token punctuation">,</span> <span class="token string">'address:'</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-综合练习—药监总局"><a href="#4-综合练习—药监总局" class="headerlink" title="4. 综合练习—药监总局"></a>4. 综合练习—药监总局</h2><ul><li><p>爬取国家药品监督管理总局中<strong>基于中华人民共和国化妆品生产许可证相关数据</strong>（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89">http://scxk.nmpa.gov.cn:81/xk/）</a></p></li><li><p><strong>动态加载数据：</strong>首页中对应的企业信息是通过 <code>ajax</code> 动态请求到的</p></li><li><p>通过对详情页url的观察发现：</p><ul><li>url的域名都是一样的，只有携带的参数（id）不一样</li><li>id值可以从首页对应的 <code>ajax</code> 请求到的 <code>json</code> 串中获取</li><li>域名和id值拼接出一个完整的企业对应的详情页的url</li></ul></li><li><p><strong>详情页的企业详情数据也是动态加载出来的！！！</strong></p><ul><li>观察后发现，所有 <code>post</code> 请求的url都是一样的，只有参数id值不同</li><li>如果我们可以批量获取多家企业的id后，就可以就id和url形成一个完整的详情页对应详情数据的 <code>ajax</code> 请求的url</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储企业的id</span>    all_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储企业所有的详情数据</span>    <span class="token comment"># 批量获取不同企业的id值</span>    url <span class="token operator">=</span> <span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'</span>    <span class="token comment"># 参数的封装</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>            <span class="token string">'page'</span><span class="token punctuation">:</span> page<span class="token punctuation">,</span>            <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'15'</span><span class="token punctuation">,</span>            <span class="token string">'productName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'conditionType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            <span class="token string">'applyname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'applysn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    json_ids <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 从 json_ids 字典中拿到 list 对应的 value 值，对 value 值列表进行遍历</span>    <span class="token keyword">for</span> dic <span class="token keyword">in</span> json_ids<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># print(id_list,'\n')</span>    <span class="token comment"># 获取企业详情数据,也是动态加载出来的，携带一个参数 id，其值可以通过前一步生成的 id列表提取</span>    post_url <span class="token operator">=</span> <span class="token string">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span>        <span class="token punctuation">}</span>        json_detail <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#print(json_detail, '-------------END----------')</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>json_detail <span class="token punctuation">)</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'---------------------------------------------------------'</span><span class="token punctuation">)</span>    <span class="token comment"># 持久化存储all_data_list</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./allData.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>all_data_list<span class="token punctuation">,</span> fp<span class="token operator">=</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># indent 自动排版</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="三、数据解析"><a href="#三、数据解析" class="headerlink" title="三、数据解析"></a>三、数据解析</h1><h2 id="1-数据解析概述"><a href="#1-数据解析概述" class="headerlink" title="1. 数据解析概述"></a>1. 数据解析概述</h2><ul><li><strong>聚焦爬虫：</strong>爬取页面中指定的页面内容。<ul><li>编码流程：1. 指定URL → 2. 发起请求 → 3. 获取响应数据 → 4. 数据解析 → 5. 持久化存储</li></ul></li><li><strong>数据解析分类：</strong><ul><li>正则表达式</li><li><code>bs4</code> 解析</li><li><code>xpath</code> 解析（重点）</li></ul></li><li><strong>数据解析原理概述：</strong>解析的局部的文本内容都会在标签对应的属性中进行存储。<ul><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据值进行提取（解析）</li></ul></li></ul><h2 id="2-图片数据爬取—正则表达式"><a href="#2-图片数据爬取—正则表达式" class="headerlink" title="2. 图片数据爬取—正则表达式"></a>2. 图片数据爬取—正则表达式</h2><table><thead><tr><th align="center"><strong>操作符</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>实例</strong></th></tr></thead><tbody><tr><td align="center"><strong>.</strong></td><td align="center">表示任意单个字符</td><td align="center"></td></tr><tr><td align="center"><strong>[ ]</strong></td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a,b,c,[a-z]表示a-z的</td></tr><tr><td align="center"><strong>[^ ]</strong></td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*****</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc* 表示ab、abc、abcc、abccc等</td></tr><tr><td align="center"><strong>+</strong></td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+ 表示abc、abcc、abccc等</td></tr><tr><td align="center"><strong>?</strong></td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc？ 表示ab、abc</td></tr><tr><td align="center"><strong>|</strong></td><td align="center">左右表达式任意一个</td><td align="center">abc|def 表示abc、def</td></tr></tbody></table><table><thead><tr><th align="center"><strong>{m}</strong></th><th align="center">扩展前一个字符m次</th><th align="center">ab{2}c表示abbc</th></tr></thead><tbody><tr><td align="center"><strong>{m,n}</strong></td><td align="center">扩展前一个字符m至n次（含n）</td><td align="center">ab{1，2}c表示abc、abbc</td></tr><tr><td align="center"><strong>^</strong></td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center"><strong>$</strong></td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center"><strong>( )</strong></td><td align="center">分组标记，内部只能使用|操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center"><strong>\d</strong></td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center"><strong>\w</strong></td><td align="center">单词字符，等价于[A-Za-z0-9_]</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>re.search()</strong></td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，<strong>返回match对象</strong></td></tr><tr><td align="center"><strong>re.match()</strong></td><td align="center">从字符串的开始位置起匹配正则表达式，<strong>返回match对象</strong></td></tr><tr><td align="center"><strong>re.findall()</strong></td><td align="center">搜搜字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center"><strong>re.split()</strong></td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，<strong>返回列表类型</strong></td></tr><tr><td align="center"><strong>re.finditer()</strong></td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，<strong>每个迭代元素是match对象</strong></td></tr><tr><td align="center"><strong>re.sub()</strong></td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><table><thead><tr><th align="center">修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">re.I</td><td align="center">使匹配对大小写不敏感</td></tr><tr><td align="center">re.L</td><td align="center">做本地化识别匹配</td></tr><tr><td align="center">re.M</td><td align="center">多行匹配，影响^和$</td></tr><tr><td align="center">re.S</td><td align="center">使.匹配包括换行在内的所有字符</td></tr><tr><td align="center">re.U</td><td align="center">根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</td></tr><tr><td align="center">re.X</td><td align="center">该标志通过给予你跟灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">常用的正则表达式单字符：.:除换行以外所有字符<span class="token code keyword">[ ]: [aoe]  [a-w] 匹配集合中任意一个字符</span><span class="token code keyword">\d:数字 [0-9]</span><span class="token code keyword">\D:非数字</span><span class="token code keyword">\w:数字、字母、下划线、中文</span><span class="token code keyword">\W:非\w</span><span class="token code keyword">\s :所有的空白字符包，包括空格、制表符、换页符等等，等价于[ \f \n \r \t \v ]</span><span class="token code keyword">\S:非空白</span>数量修饰： \*:任意多次&gt;=0<span class="token code keyword">\+:至少一次&gt;=1</span><span class="token code keyword">?:可有可无0次或者1次</span><span class="token code keyword">{m}:固定m次hello{3,}</span><span class="token code keyword">{m,}:至少m次</span><span class="token code keyword">{m,n}:m-n次</span>边界：\$:以某某结尾<span class="token code keyword">^:以某某开头</span>分组：(ab)贪婪模式：.\*非贪婪（惰性）模式：.\*?re.I:忽略大小写re.M:多行匹配re.S:单行匹配re.sub:正则表达式，替换内容，字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''正则练习'''</span><span class="token keyword">import</span> re<span class="token comment">#提取出python</span>key <span class="token operator">=</span> <span class="token string">"javapythonc++php"</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#提取出hello world</span>key <span class="token operator">=</span> <span class="token string">"&lt;html&gt;&lt;h1&gt;&lt;hello world&gt;&lt;h1&gt;&lt;/html&gt;"</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;h1&gt;(.*)&lt;h1&gt;'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#提取170</span>string <span class="token operator">=</span> '我喜欢身高为<span class="token number">170</span>的女孩’re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\d+'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token comment">#提取出http://和https://</span>key <span class="token operator">=</span> <span class="token string">'http://www.baidu.com and https://boob.com'</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'https?://'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#提取出hello</span>key <span class="token operator">=</span> <span class="token string">'lalala&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;hahah'</span> <span class="token comment">#输出&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;[Hh][Tt][mM][lL]&gt;(.*)&lt;/[Hh][Tt][mM][lL]&gt;'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#提取出hit.</span>key <span class="token operator">=</span> <span class="token string">'bobo@hit.edu.com'</span><span class="token comment">#想要匹配到hit</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'h.*?\.'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">#匹配sas和saas</span>key <span class="token operator">=</span> <span class="token string">'sasa and sas and saaas'</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'sa{1,2}s'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#如何爬取图片</span>    url <span class="token operator">=</span> <span class="token string">'https://pic.qiushibaike.com/system/pictures/12409/124098453/medium/YNPHJQC101MS31E1.jpg'</span>    <span class="token comment">#content返回的是二进制形式的图片数据</span>    <span class="token comment">#text(字符串)  content(二进制)json(队形)</span>    img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiutu.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-正则解析案例"><a href="#3-正则解析案例" class="headerlink" title="3. 正则解析案例"></a>3. 正则解析案例</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需求：爬取糗事百科中糗图板块下所有的糗图图片</span><span class="token triple-quoted-string string">'''&lt;div class="thumb"&gt;&lt;a href="/article/124098472" target="_blank"&gt;&lt;img src="//pic.qiushibaike.com/system/pictures/12409/124098472/medium/HSN2WWN0TP1VUPNG.jpg" alt="糗事#124098472" class="illustration" width="100%" height="auto"&gt;&lt;/a&gt;&lt;/div&gt;'''</span><span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个文件夹，保存所有的图片</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://www.qiushibaike.com/imgrank/ '</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment">#print(page_text)</span>    <span class="token comment">#使用聚焦爬虫将页面中所有的糗图进行解析提取</span>    ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt=.*?&lt;/div&gt;'</span>    img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>img_src_list<span class="token punctuation">)</span>    <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>        <span class="token comment">#拼接出完整的图片url</span>        src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src        img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> src<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token comment">#生成图片名称</span>        img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        imgPath <span class="token operator">=</span> <span class="token string">'./qiutuLibs/'</span> <span class="token operator">+</span> img_name        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'下载成功!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对上述代码进行进一步处理，使得能够分页爬取图片</span><span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个文件夹，保存所有的图片</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'./qiutuLibs'</span><span class="token punctua